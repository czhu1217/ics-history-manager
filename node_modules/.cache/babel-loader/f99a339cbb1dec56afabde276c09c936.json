{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _ButtonIcon = _interopRequireDefault(require(\"../ButtonIcon\"));\n\nvar _Button = _interopRequireDefault(require(\"../Button\"));\n\nvar _ampmSelect = _interopRequireDefault(require(\"./ampmSelect\"));\n\nvar _upArrow = _interopRequireDefault(require(\"./icons/upArrow\"));\n\nvar _downArrow = _interopRequireDefault(require(\"./icons/downArrow\"));\n\nvar _RenderIf = _interopRequireDefault(require(\"../RenderIf\"));\n\nvar _normalizeHour = _interopRequireDefault(require(\"./helpers/normalizeHour\"));\n\nvar _normalizeMinutes = _interopRequireDefault(require(\"./helpers/normalizeMinutes\"));\n\nvar _getNextHour = _interopRequireDefault(require(\"./helpers/getNextHour\"));\n\nvar _getPrevHour = _interopRequireDefault(require(\"./helpers/getPrevHour\"));\n\nvar _getNextMinute = _interopRequireDefault(require(\"./helpers/getNextMinute\"));\n\nvar _getPrevMinute = _interopRequireDefault(require(\"./helpers/getPrevMinute\"));\n\nvar _getNextAmPmValue = _interopRequireDefault(require(\"./helpers/getNextAmPmValue\"));\n\nvar _get24HourTime = _interopRequireDefault(require(\"./helpers/get24HourTime\"));\n\nvar _getSingleNewTypedValue = _interopRequireDefault(require(\"./helpers/getSingleNewTypedValue\"));\n\nvar _isNumber = _interopRequireDefault(require(\"./helpers/isNumber\"));\n\nvar _getHour = _interopRequireDefault(require(\"./helpers/getHour\"));\n\nvar _getMinutes = _interopRequireDefault(require(\"./helpers/getMinutes\"));\n\nvar _getAmPm = _interopRequireDefault(require(\"./helpers/getAmPm\"));\n\nvar _getDefaultAmPm = _interopRequireDefault(require(\"./helpers/getDefaultAmPm\"));\n\nvar _constants = require(\"../../libs/constants\");\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nvar TimeSelect =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(TimeSelect, _Component);\n\n  function TimeSelect(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, TimeSelect);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(TimeSelect).call(this, props));\n    _this.state = {\n      hour: (0, _getHour[\"default\"])(props.value),\n      minutes: (0, _getMinutes[\"default\"])(props.value),\n      ampm: (0, _getAmPm[\"default\"])(props.value)\n    };\n    _this.hourInputRef = _react[\"default\"].createRef();\n    _this.minutesInputRef = _react[\"default\"].createRef();\n    _this.amPmInputRef = _react[\"default\"].createRef();\n    _this.inputsMap = {\n      0: _this.hourInputRef,\n      1: _this.minutesInputRef,\n      2: _this.amPmInputRef\n    };\n    _this.inputFocusedIndex = 0;\n    _this.hasPropValue = !!props.value;\n    _this.handleChangeHour = _this.handleChangeHour.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleFocusHour = _this.handleFocusHour.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleBlurHour = _this.handleBlurHour.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleChangeMinutes = _this.handleChangeMinutes.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleFocusMinutes = _this.handleFocusMinutes.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleAmPmChange = _this.handleAmPmChange.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.hanldeFocusAmPm = _this.hanldeFocusAmPm.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.incrementHandler = _this.incrementHandler.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.decrementHandler = _this.decrementHandler.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleButtonsFocus = _this.handleButtonsFocus.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleChangeTime = _this.handleChangeTime.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleButtonsDown = _this.handleButtonsDown.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(TimeSelect, [{\n    key: \"setNextAmPmValue\",\n    value: function setNextAmPmValue() {\n      var ampm = this.state.ampm;\n      var nextAmPmValue = (0, _getNextAmPmValue[\"default\"])(ampm);\n      this.setState({\n        ampm: nextAmPmValue\n      });\n    }\n  }, {\n    key: \"handleChangeHour\",\n    value: function handleChangeHour(event) {\n      var hour = this.state.hour;\n      var value = event.target.value;\n      var normalizedValue;\n\n      if ((0, _isNumber[\"default\"])(value)) {\n        this.value = value;\n\n        if (Number(value) > 19 || this.isUpOrDownKeyPressed || this.hasPropValue) {\n          var newTypedValue = (0, _getSingleNewTypedValue[\"default\"])(hour, value);\n          normalizedValue = (0, _normalizeHour[\"default\"])(newTypedValue);\n          this.setState({\n            hour: normalizedValue\n          });\n        } else {\n          normalizedValue = (0, _normalizeHour[\"default\"])(value);\n          this.defaultAmPM = (0, _getDefaultAmPm[\"default\"])(value);\n          this.setState({\n            hour: normalizedValue\n          });\n        }\n\n        var shouldNotFocusNextInput = Number(normalizedValue) < 2 && (!hour || this.isUpOrDownKeyPressed || this.hasPropValue);\n\n        if (shouldNotFocusNextInput) {\n          this.isUpOrDownKeyPressed = false;\n          this.hasPropValue = false;\n          return;\n        }\n\n        this.isMinutesInputFocused = true;\n        this.minutesInputRef.current.focus();\n      }\n    }\n  }, {\n    key: \"handleFocusHour\",\n    value: function handleFocusHour() {\n      var hour = this.state.hour;\n      this.inputFocusedIndex = 0;\n      this.prevHour = hour || this.prevHour;\n      this.setState({\n        hour: ''\n      });\n    }\n  }, {\n    key: \"handleBlurHour\",\n    value: function handleBlurHour() {\n      var hour = this.state.hour;\n\n      if (this.isUpOrDownButtonPressed) {\n        this.isUpOrDownButtonPressed = false;\n        return;\n      }\n\n      if (this.isMinutesInputFocused) {\n        this.isMinutesInputFocused = false;\n        return;\n      }\n\n      if (hour === '00' && this.value >= '0') {\n        this.setState({\n          hour: '12'\n        });\n      }\n    }\n  }, {\n    key: \"handleChangeMinutes\",\n    value: function handleChangeMinutes(event) {\n      var minutes = this.state.minutes;\n      var value = event.target.value;\n      var normalizedValue;\n\n      if ((0, _isNumber[\"default\"])(value)) {\n        if (Number(value) > 60 || this.isUpOrDownKeyPressed) {\n          var newTypedValue = (0, _getSingleNewTypedValue[\"default\"])(minutes, value);\n          normalizedValue = (0, _normalizeMinutes[\"default\"])(newTypedValue);\n          this.setState({\n            minutes: normalizedValue\n          });\n        } else {\n          normalizedValue = (0, _normalizeMinutes[\"default\"])(value);\n          this.setState({\n            minutes: normalizedValue\n          });\n        }\n\n        var shouldNotFocusNextInput = Number(normalizedValue) < 6 && (!minutes || this.isUpOrDownKeyPressed);\n\n        if (shouldNotFocusNextInput) {\n          this.isUpOrDownKeyPressed = false;\n          return;\n        }\n\n        this.amPmInputRef.current.focus();\n      }\n    }\n  }, {\n    key: \"handleFocusMinutes\",\n    value: function handleFocusMinutes() {\n      var minutes = this.state.minutes;\n      this.inputFocusedIndex = 1;\n      this.prevMinutes = minutes || this.prevMinutes;\n      this.setState({\n        minutes: ''\n      });\n    }\n  }, {\n    key: \"handleAmPmChange\",\n    value: function handleAmPmChange(value) {\n      this.setState({\n        ampm: value\n      });\n    }\n  }, {\n    key: \"hanldeFocusAmPm\",\n    value: function hanldeFocusAmPm() {\n      this.inputFocusedIndex = 2;\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      var keyCode = event.keyCode;\n\n      if (keyCode === _constants.RIGHT_KEY) {\n        this.handleRightKeyPressed();\n      }\n\n      if (keyCode === _constants.LEFT_KEY) {\n        this.handleLeftKeyPressed();\n      }\n\n      if (keyCode === _constants.UP_KEY) {\n        this.incrementHandler();\n      }\n\n      if (keyCode === _constants.DOWN_KEY) {\n        this.decrementHandler();\n      }\n\n      if (keyCode === _constants.DELETE_KEY) {\n        this.resetState();\n      }\n\n      if (keyCode === _constants.ENTER_KEY) {\n        this.handleChangeTime(event);\n      }\n    }\n  }, {\n    key: \"handleRightKeyPressed\",\n    value: function handleRightKeyPressed() {\n      var nextInputIndex = this.inputFocusedIndex + 1;\n      var nextInputToFocus = this.inputsMap[nextInputIndex];\n\n      if (nextInputToFocus) {\n        this.inputFocusedIndex += 1;\n        nextInputToFocus.current.focus();\n      }\n    }\n  }, {\n    key: \"handleLeftKeyPressed\",\n    value: function handleLeftKeyPressed() {\n      var prevInputIndex = this.inputFocusedIndex - 1;\n      var prevInputToFocus = this.inputsMap[prevInputIndex];\n\n      if (prevInputToFocus) {\n        this.inputFocusedIndex -= 1;\n        prevInputToFocus.current.focus();\n      }\n    }\n  }, {\n    key: \"incrementHandler\",\n    value: function incrementHandler() {\n      this.isUpOrDownKeyPressed = true;\n\n      if (this.inputFocusedIndex === 0) {\n        this.incrementHour();\n      }\n\n      if (this.inputFocusedIndex === 1) {\n        this.incrementMinutes();\n      }\n\n      if (this.inputFocusedIndex === 2) {\n        this.setNextAmPmValue();\n      }\n    }\n  }, {\n    key: \"decrementHandler\",\n    value: function decrementHandler() {\n      this.isUpOrDownKeyPressed = true;\n\n      if (this.inputFocusedIndex === 0) {\n        this.decrementHour();\n      }\n\n      if (this.inputFocusedIndex === 1) {\n        this.decrementMinutes();\n      }\n\n      if (this.inputFocusedIndex === 2) {\n        this.setNextAmPmValue();\n      }\n    }\n  }, {\n    key: \"handleButtonsDown\",\n    value: function handleButtonsDown() {\n      this.isUpOrDownButtonPressed = true;\n    }\n  }, {\n    key: \"handleButtonsFocus\",\n    value: function handleButtonsFocus() {\n      var currentInputFocused = this.inputsMap[this.inputFocusedIndex];\n\n      if (currentInputFocused) {\n        currentInputFocused.current.focus();\n      }\n    }\n  }, {\n    key: \"resetState\",\n    value: function resetState() {\n      if (this.inputFocusedIndex === 0) {\n        this.setState({\n          hour: ''\n        });\n        this.prevHour = '';\n      }\n\n      if (this.inputFocusedIndex === 1) {\n        this.setState({\n          minutes: ''\n        });\n        this.prevMinutes = '';\n      }\n    }\n  }, {\n    key: \"focusHourInput\",\n    value: function focusHourInput() {\n      this.hourInputRef.current.focus();\n      this.inputFocusedIndex = 0;\n    }\n  }, {\n    key: \"incrementHour\",\n    value: function incrementHour() {\n      var hour = this.state.hour;\n      var hourValue = hour || this.prevHour;\n      this.setState({\n        hour: (0, _normalizeHour[\"default\"])((0, _getNextHour[\"default\"])(hourValue))\n      });\n    }\n  }, {\n    key: \"decrementHour\",\n    value: function decrementHour() {\n      var hour = this.state.hour;\n      var hourValue = hour || this.prevHour;\n      this.setState({\n        hour: (0, _normalizeHour[\"default\"])((0, _getPrevHour[\"default\"])(hourValue))\n      });\n    }\n  }, {\n    key: \"incrementMinutes\",\n    value: function incrementMinutes() {\n      var minutes = this.state.minutes;\n      var minutesValue = minutes || this.prevMinutes;\n      this.setState({\n        minutes: (0, _normalizeMinutes[\"default\"])((0, _getNextMinute[\"default\"])(minutesValue))\n      });\n    }\n  }, {\n    key: \"decrementMinutes\",\n    value: function decrementMinutes() {\n      var minutes = this.state.minutes;\n      var minutesValue = minutes || this.prevMinutes;\n      this.setState({\n        minutes: (0, _normalizeMinutes[\"default\"])((0, _getPrevMinute[\"default\"])(minutesValue))\n      });\n    }\n  }, {\n    key: \"handleChangeTime\",\n    value: function handleChangeTime(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var _this$state = this.state,\n          hour = _this$state.hour,\n          minutes = _this$state.minutes,\n          ampm = _this$state.ampm;\n      var _this$props = this.props,\n          onChange = _this$props.onChange,\n          onCloseModal = _this$props.onCloseModal;\n      var currentHour = hour || this.prevHour;\n      var currentMinutes = minutes || this.prevMinutes;\n      var time = (0, _get24HourTime[\"default\"])({\n        hour: currentHour,\n        minutes: currentMinutes,\n        ampm: ampm\n      });\n\n      if (currentHour && currentMinutes && ampm) {\n        onChange(time);\n      }\n\n      onCloseModal();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          hour = _this$state2.hour,\n          minutes = _this$state2.minutes,\n          ampm = _this$state2.ampm;\n      var _this$props2 = this.props,\n          onCloseModal = _this$props2.onCloseModal,\n          cancelLabel = _this$props2.cancelLabel,\n          okLabel = _this$props2.okLabel,\n          hours24 = _this$props2.hours24;\n      var hourPlaceholder = this.prevHour || '--';\n      var minutesPlaceholder = this.prevMinutes || '--';\n      return _react[\"default\"].createElement(\"article\", null, _react[\"default\"].createElement(\"div\", {\n        role: \"presentation\",\n        className: \"rainbow-time-picker_time-select-content\",\n        onKeyDown: this.handleKeyDown\n      }, _react[\"default\"].createElement(\"input\", {\n        onDrop: preventDefault,\n        onPaste: preventDefault,\n        \"data-id\": \"hour\",\n        className: \"rainbow-time-picker_time-select-value\",\n        type: \"text\",\n        value: hour,\n        placeholder: hourPlaceholder,\n        onChange: this.handleChangeHour,\n        onFocus: this.handleFocusHour,\n        onBlur: this.handleBlurHour,\n        pattern: \"\\\\d*\",\n        ref: this.hourInputRef\n      }), _react[\"default\"].createElement(\"span\", {\n        className: \"rainbow-time-picker_dots\"\n      }, \":\"), _react[\"default\"].createElement(\"input\", {\n        onDrop: preventDefault,\n        onPaste: preventDefault,\n        \"data-id\": \"minutes\",\n        className: \"rainbow-time-picker_time-select-value\",\n        tabIndex: \"-1\",\n        type: \"text\",\n        value: minutes,\n        placeholder: minutesPlaceholder,\n        onChange: this.handleChangeMinutes,\n        onFocus: this.handleFocusMinutes,\n        pattern: \"\\\\d*\",\n        ref: this.minutesInputRef\n      }), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !hours24\n      }, _react[\"default\"].createElement(_ampmSelect[\"default\"], {\n        tabIndex: \"-1\",\n        value: ampm,\n        defaultValue: this.defaultAmPM,\n        onFocus: this.hanldeFocusAmPm,\n        onChange: this.handleAmPmChange,\n        ref: this.amPmInputRef\n      })), _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-time-picker_icon-button-container\"\n      }, _react[\"default\"].createElement(_ButtonIcon[\"default\"], {\n        id: \"time-picker_up-button\",\n        tabIndex: \"-1\",\n        variant: \"border-filled\",\n        icon: _react[\"default\"].createElement(_upArrow[\"default\"], null),\n        size: \"small\",\n        onMouseDown: this.handleButtonsDown,\n        onClick: this.incrementHandler,\n        onFocus: this.handleButtonsFocus,\n        assistiveText: \"Next value\"\n      }), _react[\"default\"].createElement(_ButtonIcon[\"default\"], {\n        id: \"time-picker_down-button\",\n        tabIndex: \"-1\",\n        variant: \"border-filled\",\n        icon: _react[\"default\"].createElement(_downArrow[\"default\"], null),\n        size: \"small\",\n        onMouseDown: this.handleButtonsDown,\n        onClick: this.decrementHandler,\n        onFocus: this.handleButtonsFocus,\n        assistiveText: \"Previous value\"\n      }))), _react[\"default\"].createElement(\"footer\", {\n        className: \"rainbow-time-picker_footer\"\n      }, _react[\"default\"].createElement(_Button[\"default\"], {\n        id: \"time-picker_cancel-button\",\n        className: \"rainbow-time-picker_button\",\n        variant: \"base\",\n        label: cancelLabel,\n        onClick: onCloseModal\n      }), _react[\"default\"].createElement(_Button[\"default\"], {\n        id: \"time-picker_ok-button\",\n        className: \"rainbow-time-picker_button\",\n        variant: \"brand\",\n        label: okLabel,\n        onClick: this.handleChangeTime\n      })));\n    }\n  }]);\n  return TimeSelect;\n}(_react.Component);\n\nexports[\"default\"] = TimeSelect;\nTimeSelect.propTypes = {\n  onCloseModal: _propTypes[\"default\"].func,\n  hours24: _propTypes[\"default\"].bool,\n  cancelLabel: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n  okLabel: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n  onChange: _propTypes[\"default\"].func,\n  value: _propTypes[\"default\"].string\n};\nTimeSelect.defaultProps = {\n  onCloseModal: function onCloseModal() {},\n  hours24: false,\n  cancelLabel: 'Cancel',\n  okLabel: 'OK',\n  onChange: function onChange() {},\n  value: undefined\n};","map":null,"metadata":{},"sourceType":"script"}