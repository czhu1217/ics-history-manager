{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _inputBase = _interopRequireDefault(require(\"./inputBase\"));\n\nvar _inputRadio = _interopRequireDefault(require(\"./inputRadio\"));\n\nvar _inputCheckbox = _interopRequireDefault(require(\"./inputCheckbox\"));\n\nvar _withReduxForm = _interopRequireDefault(require(\"./../../libs/hocs/withReduxForm\"));\n/**\n * Text inputs are used for freeform data entry.\n * @category Form\n */\n\n\nvar Input =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Input, _Component);\n\n  function Input(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Input);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Input).call(this, props));\n    _this.inputRef = _react[\"default\"].createRef();\n    return _this;\n  }\n  /**\n   * Sets focus on the element.\n   * @public\n   */\n\n\n  (0, _createClass2[\"default\"])(Input, [{\n    key: \"focus\",\n    value: function focus() {\n      this.inputRef.current.focus();\n    }\n    /**\n     * Sets click on the element.\n     * @public\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.inputRef.current.click();\n    }\n    /**\n     * Sets blur on the element.\n     * @public\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.inputRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var type = this.props.type;\n\n      if (type === 'radio') {\n        return _react[\"default\"].createElement(_inputRadio[\"default\"], (0, _extends2[\"default\"])({\n          ref: this.inputRef\n        }, this.props));\n      }\n\n      if (type === 'checkbox') {\n        return _react[\"default\"].createElement(_inputCheckbox[\"default\"], (0, _extends2[\"default\"])({\n          ref: this.inputRef\n        }, this.props));\n      }\n\n      return _react[\"default\"].createElement(_inputBase[\"default\"], (0, _extends2[\"default\"])({\n        ref: this.inputRef\n      }, this.props));\n    }\n  }]);\n  return Input;\n}(_react.Component);\n\nInput.propTypes = {\n  /** Specifies the value of an input element. */\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].bool]),\n\n  /** The name of the input */\n  name: _propTypes[\"default\"].string,\n\n  /** The type of the input. This value defaults to text. */\n  type: _propTypes[\"default\"].oneOf(['text', 'password', 'datetime', 'datetime-local', 'date', 'month', 'time', 'week', 'number', 'email', 'url', 'search', 'tel', 'color', 'radio', 'checkbox']),\n\n  /** Text label for the input. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]).isRequired,\n\n  /** A boolean to hide the input label. */\n  hideLabel: _propTypes[\"default\"].bool,\n\n  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */\n  placeholder: _propTypes[\"default\"].string,\n\n  /** The icon to show if it is passed. It must be a svg icon or a font icon. */\n  icon: _propTypes[\"default\"].node,\n\n  /** Describes the position of the icon with respect to body. Options include left and right.\n   * This value defaults to left. */\n  iconPosition: _propTypes[\"default\"].oneOf(['left', 'right']),\n\n  /** The maximum number of characters allowed in the field. */\n  maxLength: _propTypes[\"default\"].number,\n\n  /** The minimum number of characters allowed in the field. */\n  minLength: _propTypes[\"default\"].number,\n\n  /** Shows the help message below the input. */\n  bottomHelpText: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Specifies that an input field must be filled out before submitting the form.\n   * This value defaults to false. */\n  required: _propTypes[\"default\"].bool,\n\n  /** Specifies the regular expression that the input's value is checked against.\n   * This attribute is supported for text, search, url, tel, email, and password types. */\n  pattern: _propTypes[\"default\"].string,\n\n  /** Specifies that an input text will be centered. This value defaults to false. */\n  isCentered: _propTypes[\"default\"].bool,\n\n  /** Specifies that an input will not have border. This value defaults to false. */\n  isBare: _propTypes[\"default\"].bool,\n\n  /** Specifies that an input field must be filled out before submitting the form. */\n  error: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Specifies that an input element should be disabled. This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** Specifies that an input field is read-only. This value defaults to false. */\n  readOnly: _propTypes[\"default\"].bool,\n\n  /** The action triggered when a value attribute changes. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** Specifies the tab order of an element (when the tab button is used for navigating). */\n  tabIndex: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The action triggered when the element is clicked. */\n  onClick: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element receives focus. */\n  onFocus: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element releases focus. */\n  onBlur: _propTypes[\"default\"].func,\n\n  /** The action triggered when a key is pressed on the element. */\n  onKeyDown: _propTypes[\"default\"].func,\n\n  /** Set the input to checked state when true. It is used only for input type checkbox. */\n  checked: _propTypes[\"default\"].bool,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A string indicating the type of autocomplete functionality.\n   * If any, to allow on the input. */\n  autoComplete: _propTypes[\"default\"].string\n};\nInput.defaultProps = {\n  value: undefined,\n  type: 'text',\n  name: undefined,\n  placeholder: null,\n  icon: undefined,\n  iconPosition: 'left',\n  maxLength: undefined,\n  minLength: undefined,\n  bottomHelpText: null,\n  required: false,\n  pattern: undefined,\n  isCentered: false,\n  isBare: false,\n  error: null,\n  disabled: false,\n  readOnly: false,\n  onChange: function onChange() {},\n  tabIndex: undefined,\n  onClick: function onClick() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  onKeyDown: function onKeyDown() {},\n  checked: undefined,\n  className: undefined,\n  style: undefined,\n  id: undefined,\n  autoComplete: 'on',\n  hideLabel: false\n};\n\nvar _default = (0, _withReduxForm[\"default\"])(Input);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}