{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _AssistiveText = _interopRequireDefault(require(\"./../AssistiveText\"));\n\nrequire(\"./styles.css\");\n/**\n * Buttons Icons provide the user with visual iconography that\n * is typically used to invoke an event or action.\n */\n\n\nvar ButtonIcon =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(ButtonIcon, _Component);\n\n  function ButtonIcon(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, ButtonIcon);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ButtonIcon).call(this, props));\n    _this.buttonRef = _react[\"default\"].createRef();\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(ButtonIcon, [{\n    key: \"getVariantClassName\",\n    value: function getVariantClassName() {\n      var variant = this.props.variant;\n\n      if (variant === 'base') {\n        return null;\n      }\n\n      return \"rainbow-button-icon--\".concat(variant);\n    }\n  }, {\n    key: \"getButtonClassNames\",\n    value: function getButtonClassNames() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          shaded = _this$props.shaded,\n          variant = _this$props.variant,\n          size = _this$props.size;\n      var isShaded = shaded && (variant === 'border-filled' || variant === 'brand' || variant === 'success');\n      return (0, _classnames[\"default\"])('rainbow-button-icon', {\n        'rainbow-button-icon--shaded': isShaded\n      }, this.getVariantClassName(), \"rainbow-button-icon--\".concat(size), className);\n    }\n    /**\n     * Sets focus on the element.\n     * @public\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.buttonRef.current.focus();\n    }\n    /**\n     * Sets click on the element.\n     * @public\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.buttonRef.current.click();\n    }\n    /**\n     * Sets blur on the element.\n     * @public\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.buttonRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          title = _this$props2.title,\n          type = _this$props2.type,\n          disabled = _this$props2.disabled,\n          tabIndex = _this$props2.tabIndex,\n          onClick = _this$props2.onClick,\n          onFocus = _this$props2.onFocus,\n          onBlur = _this$props2.onBlur,\n          assistiveText = _this$props2.assistiveText,\n          ariaHaspopup = _this$props2.ariaHaspopup,\n          ariaPressed = _this$props2.ariaPressed,\n          style = _this$props2.style,\n          id = _this$props2.id,\n          ariaControls = _this$props2.ariaControls,\n          ariaExpanded = _this$props2.ariaExpanded,\n          icon = _this$props2.icon,\n          onKeyDown = _this$props2.onKeyDown,\n          form = _this$props2.form,\n          onMouseDown = _this$props2.onMouseDown;\n      return _react[\"default\"].createElement(\"button\", {\n        onMouseDown: onMouseDown,\n        \"data-id\": \"button-icon-element\",\n        id: id,\n        className: this.getButtonClassNames(),\n        style: style,\n        disabled: disabled,\n        tabIndex: tabIndex,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onClick: onClick,\n        title: title,\n        type: type,\n        \"aria-haspopup\": ariaHaspopup,\n        \"aria-controls\": ariaControls,\n        \"aria-expanded\": ariaExpanded,\n        \"aria-pressed\": ariaPressed,\n        onKeyDown: onKeyDown,\n        form: form,\n        ref: this.buttonRef\n      }, icon, _react[\"default\"].createElement(_AssistiveText[\"default\"], {\n        text: assistiveText\n      }));\n    }\n  }]);\n  return ButtonIcon;\n}(_react.Component);\n\nexports[\"default\"] = ButtonIcon;\nButtonIcon.propTypes = {\n  /** The icon to show if it is passed.\n   * It must be a svg icon or a font icon. It is a required value. */\n  icon: _propTypes[\"default\"].node.isRequired,\n\n  /** The variant changes the appearance of buttonIcon. Accepted variants include base,\n   *  brand, success, border, border-filled, border-inverse and inverse.\n   * This value defaults to base. */\n  variant: _propTypes[\"default\"].oneOf(['base', 'brand', 'success', 'border', 'border-filled', 'border-inverse', 'inverse']),\n\n  /** The size of the buttonIcon. For the base variant, options include x-small, small, medium,\n   * and large. For non-base variants, options include xx-small, x-small, small, and medium.\n   * This value defaults to medium. */\n  size: _propTypes[\"default\"].oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),\n\n  /** Specify true when the button has a shadow around it.\n   * This value defaults to false.\n   * Only border-filled, brand, and success variant can be shaded. */\n  shaded: _propTypes[\"default\"].bool,\n\n  /** Displays tooltip text when the mouse moves over the element. */\n  title: _propTypes[\"default\"].string,\n\n  /** Specifies the type of button. Valid values are button, reset, and submit.\n   * This value defaults to button. */\n  type: _propTypes[\"default\"].oneOf(['button', 'submit', 'reset']),\n\n  /** Specifies whether this button should be displayed in a disabled state.\n   * Disabled buttons can't be clicked. This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** Specifies the tab order of an element (when the tab button is used for navigating). */\n  tabIndex: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The action that will be run when the button is clicked. */\n  onClick: _propTypes[\"default\"].func,\n\n  /** The action that will be run when the user presses the mouse button. */\n  onMouseDown: _propTypes[\"default\"].func,\n\n  /** The action triggered when a keyboard key is pressed. */\n  onKeyDown: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element receives focus. */\n  onFocus: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element releases focus. */\n  onBlur: _propTypes[\"default\"].func,\n\n  /** A description for assistive sreen readers. */\n  assistiveText: _propTypes[\"default\"].string,\n\n  /** A space-separated list of element IDs that\n   * this button controls the contents or presence of. */\n  ariaControls: _propTypes[\"default\"].string,\n\n  /** Indicates whether an element the button controls is expanded or collapsed.\n   * Valid values are 'true' or 'false'. */\n  ariaExpanded: _propTypes[\"default\"].bool,\n\n  /** Indicates that the element has a popup context menu or sub-level menu. */\n  ariaHaspopup: _propTypes[\"default\"].bool,\n\n  /** Indicates that the element has been pressed. */\n  ariaPressed: _propTypes[\"default\"].bool,\n\n  /** It must be the id attribute of a form element that the button is associated with. */\n  form: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string\n};\nButtonIcon.defaultProps = {\n  variant: 'base',\n  size: 'medium',\n  shaded: false,\n  title: undefined,\n  type: 'button',\n  disabled: false,\n  tabIndex: undefined,\n  onClick: function onClick() {},\n  onMouseDown: function onMouseDown() {},\n  onKeyDown: function onKeyDown() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  assistiveText: undefined,\n  ariaHaspopup: undefined,\n  className: undefined,\n  ariaPressed: undefined,\n  style: undefined,\n  id: undefined,\n  ariaControls: undefined,\n  ariaExpanded: undefined,\n  form: undefined\n};","map":null,"metadata":{},"sourceType":"script"}