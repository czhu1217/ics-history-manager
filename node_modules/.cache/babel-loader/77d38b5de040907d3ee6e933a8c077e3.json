{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _withReduxForm = _interopRequireDefault(require(\"./../../libs/hocs/withReduxForm\"));\n\nvar _utils = require(\"../../libs/utils\");\n\nvar _RenderIf = _interopRequireDefault(require(\"../RenderIf\"));\n\nrequire(\"./styles.css\");\n/* eslint-disable jsx-a11y/label-has-for */\n\n/**\n * Checkbox toggle is a checkable input that communicates if an option is true,\n * false or indeterminate.\n * @category Form\n */\n\n\nvar CheckboxToggle =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(CheckboxToggle, _Component);\n\n  function CheckboxToggle(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, CheckboxToggle);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(CheckboxToggle).call(this, props));\n    _this.checkboxToggleRef = _react[\"default\"].createRef();\n    _this.inputIndentifier = props.name || (0, _utils.uniqueId)('checkbox-toggle');\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(CheckboxToggle, [{\n    key: \"getClassNames\",\n    value: function getClassNames() {\n      var className = this.props.className;\n      return (0, _classnames[\"default\"])('rainbow-checkbox-toggle', className);\n    }\n    /**\n     * Sets focus on the element.\n     * @public\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.checkboxToggleRef.current.focus();\n    }\n    /**\n     * Sets click on the element.\n     * @public\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.checkboxToggleRef.current.click();\n    }\n    /**\n     * Sets blur on the element.\n     * @public\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.checkboxToggleRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          disabled = _this$props.disabled,\n          label = _this$props.label,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          onClick = _this$props.onClick,\n          id = _this$props.id;\n      return _react[\"default\"].createElement(\"label\", {\n        id: id,\n        className: this.getClassNames(),\n        style: style\n      }, _react[\"default\"].createElement(\"input\", {\n        type: \"checkbox\",\n        name: this.inputIndentifier,\n        value: this.inputIndentifier,\n        \"aria-describedby\": this.inputIndentifier,\n        checked: value,\n        onChange: onChange,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onClick: onClick,\n        disabled: disabled,\n        ref: this.checkboxToggleRef\n      }), _react[\"default\"].createElement(\"span\", {\n        id: this.inputIndentifier,\n        className: \"rainbow-checkbox-toggle_faux-container\",\n        \"aria-live\": \"assertive\"\n      }, _react[\"default\"].createElement(\"span\", {\n        className: \"rainbow-checkbox-toggle_faux\"\n      })), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!label\n      }, _react[\"default\"].createElement(\"span\", {\n        className: \"rainbow-checkbox-toggle_label\"\n      }, label)));\n    }\n  }]);\n  return CheckboxToggle;\n}(_react.Component);\n\nCheckboxToggle.propTypes = {\n  /** Text label for the checkbox toggle. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The name of the input */\n  name: _propTypes[\"default\"].string,\n\n  /** The value of the element. */\n  value: _propTypes[\"default\"].bool,\n\n  /** Specifies that the element should be disabled. This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** The action triggered when a value attribute changes. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element is clicked. */\n  onClick: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element receives focus. */\n  onFocus: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element releases focus. */\n  onBlur: _propTypes[\"default\"].func,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string\n};\nCheckboxToggle.defaultProps = {\n  label: null,\n  disabled: false,\n  value: false,\n  name: undefined,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  className: undefined,\n  style: undefined,\n  id: undefined\n};\n\nvar _default = (0, _withReduxForm[\"default\"])(CheckboxToggle);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}