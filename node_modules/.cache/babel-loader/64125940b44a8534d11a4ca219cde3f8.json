{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getChildTabNodes = getChildTabNodes;\nexports.insertChildOrderly = insertChildOrderly;\nexports.getTabIndexFromName = getTabIndexFromName;\nexports.getChildrenTotalWidth = getChildrenTotalWidth;\nexports.getChildrenTotalWidthUpToClickedTab = getChildrenTotalWidthUpToClickedTab;\nexports.isNotSameChildren = isNotSameChildren;\nexports.getUpdatedTabsetChildren = getUpdatedTabsetChildren;\nexports.getLeftButtonDisabledState = getLeftButtonDisabledState;\nexports.getRightButtonDisabledState = getRightButtonDisabledState;\n\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\n\nfunction getChildTabNodes(ref) {\n  if (ref) {\n    return ref.querySelectorAll('a[role=\"tab\"]');\n  }\n\n  return [];\n}\n\nfunction getRefIndex(nodes, ref) {\n  return nodes.indexOf(ref);\n}\n\nfunction sortChildren(childrenRefs, nodes) {\n  var _childrenRefs = (0, _toArray2[\"default\"])(childrenRefs),\n      newChildrenRefs = _childrenRefs.slice(0);\n\n  newChildrenRefs.sort(function (refA, refB) {\n    return getRefIndex(nodes, refA.ref) - getRefIndex(nodes, refB.ref);\n  });\n  return newChildrenRefs;\n}\n\nfunction insertChildOrderly(childrenRefs, childRef, nodes) {\n  var newChildrenRefs = childrenRefs.concat([childRef]);\n  return sortChildren(newChildrenRefs, nodes);\n}\n\nfunction getTabIndexFromName(tabChildren, name) {\n  return tabChildren.findIndex(function (tab) {\n    return tab.name === name;\n  });\n}\n\nfunction getTotalWidth(children) {\n  var totalWidth = 0;\n  children.forEach(function (child) {\n    totalWidth += child.ref.offsetWidth;\n  });\n  return totalWidth;\n}\n\nfunction getChildrenTotalWidth(children) {\n  return getTotalWidth(children);\n}\n\nfunction getChildrenTotalWidthUpToClickedTab(children, index) {\n  var childrenUpToClickedTab = children.slice(0, index);\n  return getTotalWidth(childrenUpToClickedTab);\n}\n\nfunction isNotSameChildren(children, prevChildren) {\n  return children.some(function (child, index) {\n    if (child && prevChildren[index]) {\n      return child.props.name !== prevChildren[index].props.name;\n    }\n\n    return false;\n  });\n}\n\nfunction getUpdatedTabsetChildren(tabsetChildren, tab, nameToUpdate) {\n  return tabsetChildren.map(function (child) {\n    if (child.name === nameToUpdate) {\n      return tab;\n    }\n\n    return child;\n  });\n}\n\nfunction getLeftButtonDisabledState(params) {\n  var activeTabName = params.activeTabName,\n      tabsetChildren = params.tabsetChildren,\n      screenWidth = params.screenWidth,\n      scrollLeft = params.scrollLeft;\n  var activeTabIndex = getTabIndexFromName(tabsetChildren, activeTabName);\n  var isFirstTabActive = activeTabIndex === 0;\n  var isFirstTabVisible = scrollLeft === 0;\n\n  if (screenWidth < 600 && isFirstTabActive) {\n    return true;\n  }\n\n  if (screenWidth > 600 && isFirstTabVisible) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getRightButtonDisabledState(params) {\n  var activeTabName = params.activeTabName,\n      tabsetChildren = params.tabsetChildren,\n      screenWidth = params.screenWidth,\n      scrollLeft = params.scrollLeft,\n      maxScroll = params.maxScroll;\n  var lastTabIndex = tabsetChildren.length - 1;\n  var activeTabIndex = getTabIndexFromName(tabsetChildren, activeTabName);\n  var isLastTabActive = lastTabIndex === activeTabIndex;\n  var isLastTabVisible = scrollLeft === maxScroll;\n\n  if (screenWidth < 600 && isLastTabActive) {\n    return true;\n  }\n\n  if (screenWidth > 600 && isLastTabVisible) {\n    return true;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}