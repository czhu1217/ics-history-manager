{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\n\nvar _Modal = _interopRequireDefault(require(\"../Modal\"));\n\nvar _getDataFromWorkbook = _interopRequireDefault(require(\"./helpers/getDataFromWorkbook\"));\n\nvar _getHeaderRowFromWorkbook = _interopRequireDefault(require(\"./helpers/getHeaderRowFromWorkbook\"));\n\nvar _getDataToImport = _interopRequireDefault(require(\"./helpers/getDataToImport\"));\n\nvar _isStepThreeNextButtonDisabled = _interopRequireDefault(require(\"./helpers/isStepThreeNextButtonDisabled\"));\n\nvar _footer = _interopRequireDefault(require(\"./footer\"));\n\nvar _stepOne = _interopRequireDefault(require(\"./stepOne\"));\n\nvar _stepTwo = _interopRequireDefault(require(\"./stepTwo\"));\n\nvar _stepThree = _interopRequireDefault(require(\"./stepThree\"));\n\nvar _stepFour = _interopRequireDefault(require(\"./stepFour\"));\n\nrequire(\"./styles.css\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar stepNames = ['step-1', 'step-2', 'step-3', 'step-4'];\nvar stepsMap = {\n  'step-1': _stepOne[\"default\"],\n  'step-2': _stepTwo[\"default\"],\n  'step-3': _stepThree[\"default\"],\n  'step-4': _stepFour[\"default\"]\n};\nvar modalTitleMap = {\n  'step-1': 'Whats do you want to do?',\n  'step-2': 'Select Data File',\n  'step-3': 'Assign Fields',\n  'step-4': 'Review and Start Import'\n};\n\nfunction EmptyComponent() {\n  return null;\n}\n\nvar ADD_RECORDS = Symbol('add-records');\nvar MERGE_RECORDS = Symbol('merge-records');\n/**\n * @category Experiences\n */\n\nfunction ImportRecordsFlow(props) {\n  var className = props.className,\n      style = props.style,\n      isOpen = props.isOpen,\n      onRequestClose = props.onRequestClose,\n      schema = props.schema,\n      onComplete = props.onComplete;\n\n  var _useState = (0, _react.useState)(0),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      currentStepIndex = _useState2[0],\n      setCurrentStepIndex = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(''),\n      _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n      actionOption = _useState4[0],\n      setActionOption = _useState4[1];\n\n  var _useState5 = (0, _react.useState)('default'),\n      _useState6 = (0, _slicedToArray2[\"default\"])(_useState5, 2),\n      matchField = _useState6[0],\n      setMatchField = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(''),\n      _useState8 = (0, _slicedToArray2[\"default\"])(_useState7, 2),\n      fileName = _useState8[0],\n      setFileName = _useState8[1];\n\n  var _useState9 = (0, _react.useState)(''),\n      _useState10 = (0, _slicedToArray2[\"default\"])(_useState9, 2),\n      fileType = _useState10[0],\n      setFileType = _useState10[1];\n\n  var _useState11 = (0, _react.useState)(false),\n      _useState12 = (0, _slicedToArray2[\"default\"])(_useState11, 2),\n      isLoading = _useState12[0],\n      setIsLoading = _useState12[1];\n\n  var _useState13 = (0, _react.useState)(false),\n      _useState14 = (0, _slicedToArray2[\"default\"])(_useState13, 2),\n      hasFileSelected = _useState14[0],\n      setHasFileSelected = _useState14[1];\n\n  var _useState15 = (0, _react.useState)([]),\n      _useState16 = (0, _slicedToArray2[\"default\"])(_useState15, 2),\n      columns = _useState16[0],\n      setColumns = _useState16[1];\n\n  var _useState17 = (0, _react.useState)([]),\n      _useState18 = (0, _slicedToArray2[\"default\"])(_useState17, 2),\n      data = _useState18[0],\n      setData = _useState18[1];\n\n  var _useState19 = (0, _react.useState)({}),\n      _useState20 = (0, _slicedToArray2[\"default\"])(_useState19, 2),\n      fieldsMap = _useState20[0],\n      setFieldsMap = _useState20[1];\n\n  var _useState21 = (0, _react.useState)([]),\n      _useState22 = (0, _slicedToArray2[\"default\"])(_useState21, 2),\n      schemaFields = _useState22[0],\n      setSchemaFields = _useState22[1];\n\n  var isBackButtonDisabled = currentStepIndex === 0;\n  var currentStep = stepNames[currentStepIndex];\n  var StepComponent = stepsMap[currentStep] || EmptyComponent;\n\n  var removeFile = function removeFile() {\n    setHasFileSelected(false);\n    setFileName('');\n    setFileType('');\n    setData([]);\n    setColumns([]);\n    setFieldsMap({});\n  };\n\n  (0, _react.useEffect)(function () {\n    setSchemaFields(Object.keys(schema.attributes));\n  }, [schema.attributes]);\n  var prevIsOpen = (0, _react.useRef)(isOpen);\n  (0, _react.useEffect)(function () {\n    if (prevIsOpen.current && !isOpen) {\n      setCurrentStepIndex(0);\n      removeFile();\n      setActionOption('');\n      setMatchField('default');\n    }\n\n    prevIsOpen.current = isOpen;\n  }, [isOpen]);\n\n  var getModalTitle = function getModalTitle() {\n    if (currentStepIndex === 1 && hasFileSelected) {\n      return 'Your File Preview';\n    }\n\n    return modalTitleMap[currentStep];\n  };\n\n  var goBackStep = function goBackStep() {\n    if (currentStepIndex > 0) {\n      var prevStepIndex = currentStepIndex - 1;\n      setCurrentStepIndex(prevStepIndex);\n    }\n  };\n\n  var goNextStep = function goNextStep() {\n    if (currentStepIndex === 3) {\n      onComplete((0, _getDataToImport[\"default\"])({\n        data: data,\n        fieldsMap: fieldsMap,\n        schema: schema,\n        actionOption: actionOption,\n        matchField: matchField\n      }));\n    }\n\n    if (currentStepIndex < stepNames.length - 1) {\n      var nextStepIndex = currentStepIndex + 1;\n      setCurrentStepIndex(nextStepIndex);\n    }\n  };\n\n  var isNextButtonDisabled = function isNextButtonDisabled() {\n    if (currentStepIndex === 0) {\n      return !actionOption || actionOption === 'merge-records' && matchField === 'default';\n    }\n\n    if (currentStepIndex === 1) {\n      return !hasFileSelected || isLoading;\n    }\n\n    if (currentStepIndex === 2) {\n      return (0, _isStepThreeNextButtonDisabled[\"default\"])({\n        fieldsMap: fieldsMap,\n        attributes: schema.attributes,\n        matchField: matchField\n      });\n    }\n\n    return false;\n  };\n\n  var processFile = function processFile(file) {\n    var name = file.name,\n        type = file.type;\n    setFileName(name);\n    setFileType(type);\n    setIsLoading(true);\n    setHasFileSelected(true);\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      var uInt8ArrayData = new Uint8Array(event.target.result);\n\n      var workbook = _xlsx[\"default\"].read(uInt8ArrayData, {\n        type: 'array',\n        raw: true\n      });\n\n      setColumns((0, _getHeaderRowFromWorkbook[\"default\"])(workbook));\n      setData((0, _getDataFromWorkbook[\"default\"])(workbook));\n      setIsLoading(false);\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n  var assignField = function assignField(databaseFieldToAssign, fileFieldsToAssign) {\n    setFieldsMap(_objectSpread({}, fieldsMap, (0, _defineProperty2[\"default\"])({}, databaseFieldToAssign, fileFieldsToAssign.join(','))));\n  };\n\n  return _react[\"default\"].createElement(_Modal[\"default\"], {\n    className: className,\n    style: style,\n    title: getModalTitle(),\n    size: \"medium\",\n    isOpen: isOpen,\n    onRequestClose: onRequestClose,\n    footer: _react[\"default\"].createElement(_footer[\"default\"], {\n      onBack: goBackStep,\n      onNext: goNextStep,\n      currentStep: currentStep,\n      isBackButtonDisabled: isBackButtonDisabled,\n      isNextButtonDisabled: isNextButtonDisabled()\n    })\n  }, _react[\"default\"].createElement(StepComponent, {\n    schemaFields: schemaFields,\n    attributes: schema.attributes,\n    actionOption: actionOption,\n    onChangeAction: setActionOption,\n    matchField: matchField,\n    onChangeMatchField: setMatchField,\n    onProcessFile: processFile,\n    fileName: fileName,\n    fileType: fileType,\n    isLoading: isLoading,\n    hasFileSelected: hasFileSelected,\n    columns: columns,\n    data: data,\n    onRemoveFile: removeFile,\n    onAssignField: assignField,\n    fieldsMap: fieldsMap\n  }));\n}\n\nImportRecordsFlow.propTypes = {\n  /** The schema represent the structure necessary for import data from a file to a database.\n   *  Collection is meant to represent where in database the data will be stored.\n   *  Attributes are the field to map with the file column headers */\n  schema: _propTypes[\"default\"].shape({\n    collection: _propTypes[\"default\"].string,\n    attributes: _propTypes[\"default\"].object\n  }).isRequired,\n\n  /** Controls whether the ImportRecordsFlow modal is opened or not.\n   * If true, the modal is open. */\n  isOpen: _propTypes[\"default\"].bool,\n\n  /** The action triggered when the component request to close\n   *  (e.g click close button, press esc key or click outside the modal). */\n  onRequestClose: _propTypes[\"default\"].func,\n\n  /** The action triggered when all flow steps are completed. */\n  onComplete: _propTypes[\"default\"].func,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nImportRecordsFlow.defaultProps = {\n  className: '',\n  style: {},\n  isOpen: false,\n  onRequestClose: function onRequestClose() {},\n  onComplete: function onComplete() {},\n  schema: {}\n};\nImportRecordsFlow.MERGE_RECORDS = MERGE_RECORDS;\nImportRecordsFlow.ADD_RECORDS = ADD_RECORDS;\nvar _default = ImportRecordsFlow;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}