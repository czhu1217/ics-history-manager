{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _withReduxForm = _interopRequireDefault(require(\"./../../libs/hocs/withReduxForm\"));\n\nvar _utils = require(\"../../libs/utils\");\n\nvar _RenderIf = _interopRequireDefault(require(\"../RenderIf\"));\n\nvar _RequiredAsterisk = _interopRequireDefault(require(\"../RequiredAsterisk\"));\n\nvar _checkboxList = _interopRequireDefault(require(\"./checkboxList\"));\n\nrequire(\"./styles.css\");\n/**\n * A checkable input that communicates if an option is true, false or indeterminate.\n * @category Form\n */\n\n\nvar CheckboxGroup =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(CheckboxGroup, _Component);\n\n  function CheckboxGroup(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, CheckboxGroup);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(CheckboxGroup).call(this, props));\n    _this.errorMessageId = (0, _utils.uniqueId)('error-message');\n    _this.handleOnChange = _this.handleOnChange.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(CheckboxGroup, [{\n    key: \"getErrorMessageId\",\n    value: function getErrorMessageId() {\n      var error = this.props.error;\n\n      if (error) {\n        return this.errorMessageId;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this.props.value;\n\n      if (typeof value === 'string') {\n        return [];\n      }\n\n      return value;\n    }\n  }, {\n    key: \"getCheckboxContainerClassNames\",\n    value: function getCheckboxContainerClassNames() {\n      var _this$props = this.props,\n          error = _this$props.error,\n          className = _this$props.className;\n      return (0, _classnames[\"default\"])('rainbow-checkbox-group_container', {\n        'rainbow-checkbox-group--error': !!error\n      }, className);\n    }\n  }, {\n    key: \"handleOnChange\",\n    value: function handleOnChange(event) {\n      var _event$target = event.target,\n          value = _event$target.value,\n          checked = _event$target.checked;\n      var _this$props2 = this.props,\n          values = _this$props2.value,\n          onChange = _this$props2.onChange;\n\n      if (checked && Array.isArray(values)) {\n        return onChange(values.concat([value]));\n      }\n\n      if (checked && !Array.isArray(values)) {\n        return onChange([].concat([value]));\n      }\n\n      return onChange(values.filter(function (valueId) {\n        return valueId !== value;\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          id = _this$props3.id,\n          options = _this$props3.options,\n          required = _this$props3.required,\n          label = _this$props3.label,\n          error = _this$props3.error,\n          style = _this$props3.style,\n          name = _this$props3.name;\n      return _react[\"default\"].createElement(\"fieldset\", {\n        id: id,\n        className: this.getCheckboxContainerClassNames(),\n        style: style\n      }, _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!label\n      }, _react[\"default\"].createElement(\"legend\", {\n        className: \"rainbow-checkbox-group_label\"\n      }, _react[\"default\"].createElement(_RequiredAsterisk[\"default\"], {\n        required: required\n      }), label)), _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-checkbox-group_content-container\"\n      }, _react[\"default\"].createElement(_checkboxList[\"default\"], {\n        values: this.getValue(),\n        options: options,\n        onChange: this.handleOnChange,\n        describedBy: this.getErrorMessageId(),\n        name: name\n      })), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!error\n      }, _react[\"default\"].createElement(\"div\", {\n        id: this.getErrorMessageId(),\n        className: \"rainbow-checkbox-group_text-error\"\n      }, error)));\n    }\n  }]);\n  return CheckboxGroup;\n}(_react.Component);\n\nCheckboxGroup.propTypes = {\n  /** An Array of checkbox options with label, value and disabled for each checkbox. */\n  options: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]).isRequired,\n    value: _propTypes[\"default\"].string,\n    disabled: _propTypes[\"default\"].bool\n  })),\n\n  /** Text label for the checkbox group. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The name of the checkbox group */\n  name: _propTypes[\"default\"].string,\n\n  /** The list of selected checkboxes. Each array entry contains the value of a selected checkbox.\n   * The value of each checkbox is set in the options attribute. */\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].arrayOf(_propTypes[\"default\"].string), _propTypes[\"default\"].string]),\n\n  /** Set to true if at least one checkbox must be selected. This value defaults to false. */\n  required: _propTypes[\"default\"].bool,\n\n  /** Specifies that an input field must be filled out before submitting the form. */\n  error: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Text label for the checkbox group. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string\n};\nCheckboxGroup.defaultProps = {\n  options: [],\n  value: [],\n  label: null,\n  name: undefined,\n  onChange: function onChange() {},\n  required: false,\n  error: null,\n  className: undefined,\n  style: undefined,\n  id: undefined\n};\n\nvar _default = (0, _withReduxForm[\"default\"])(CheckboxGroup);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}