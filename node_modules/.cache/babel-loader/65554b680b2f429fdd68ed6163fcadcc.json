{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Select = _interopRequireDefault(require(\"./../Select\"));\n\nvar _ButtonIcon = _interopRequireDefault(require(\"./../ButtonIcon\"));\n\nvar _rightArrow = _interopRequireDefault(require(\"./icons/rightArrow\"));\n\nvar _leftArrow = _interopRequireDefault(require(\"./icons/leftArrow\"));\n\nvar _daysOfWeek = _interopRequireDefault(require(\"./daysOfWeek\"));\n\nvar _month = _interopRequireDefault(require(\"./month\"));\n\nvar _helpers = require(\"./helpers\");\n\nrequire(\"./styles.css\");\n/**\n * Calendar provide a simple way to select a single date.\n */\n\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Calendar, _Component);\n\n  function Calendar(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Calendar);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Calendar).call(this, props));\n    _this.state = {\n      currentMonth: (0, _helpers.getFirstDayMonth)((0, _helpers.normalizeDate)(props.value))\n    };\n    _this.previousMonth = _this.previousMonth.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.nextMonth = _this.nextMonth.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleYearChange = _this.handleYearChange.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Calendar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevValue = prevProps.value;\n      var value = this.props.value;\n      var normalizedDate = (0, _helpers.normalizeDate)(value);\n\n      if ((0, _helpers.formatDate)((0, _helpers.normalizeDate)(prevValue)) !== (0, _helpers.formatDate)(normalizedDate)) {\n        this.updateCurrentMonth(normalizedDate);\n      }\n    }\n  }, {\n    key: \"updateCurrentMonth\",\n    value: function updateCurrentMonth(value) {\n      this.setState({\n        currentMonth: (0, _helpers.getFirstDayMonth)(value)\n      });\n    }\n  }, {\n    key: \"nextMonth\",\n    value: function nextMonth() {\n      this.setState({\n        currentMonth: (0, _helpers.addMonths)(this.state.currentMonth, 1)\n      });\n    }\n  }, {\n    key: \"previousMonth\",\n    value: function previousMonth() {\n      this.setState({\n        currentMonth: (0, _helpers.addMonths)(this.state.currentMonth, -1)\n      });\n    }\n  }, {\n    key: \"handleYearChange\",\n    value: function handleYearChange(event) {\n      var year = +event.target.value;\n      var newMonth = new Date(this.state.currentMonth);\n      newMonth.setFullYear(year);\n      this.setState({\n        currentMonth: newMonth\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentMonth = this.state.currentMonth;\n      var _this$props = this.props,\n          onChange = _this$props.onChange,\n          value = _this$props.value,\n          minDate = _this$props.minDate,\n          maxDate = _this$props.maxDate,\n          className = _this$props.className,\n          style = _this$props.style;\n      var formattedMonth = (0, _helpers.getFormattedMonth)(currentMonth);\n      var currentYear = currentMonth.getFullYear();\n      var yearsRange = (0, _helpers.getYearsRange)({\n        minDate: minDate,\n        maxDate: maxDate,\n        currentMonth: currentMonth.getMonth()\n      });\n      var lastYearItem = yearsRange[yearsRange.length - 1];\n      var maxSelectableDate = maxDate || new Date(lastYearItem.value + 1, 0, 1);\n      var disableNextMonth = (0, _helpers.addMonths)(currentMonth, 1) > maxSelectableDate;\n      var minSelectableDate = minDate || new Date(yearsRange[0].value, 0, 1);\n      var prevDate = (0, _helpers.getLastDayMonth)((0, _helpers.addMonths)(currentMonth, -1));\n      var disablePreviousMonth = prevDate < minSelectableDate;\n      return _react[\"default\"].createElement(\"section\", {\n        className: className,\n        style: style\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-calendar_controls-container\"\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-calendar_month-container\"\n      }, _react[\"default\"].createElement(_ButtonIcon[\"default\"], {\n        onClick: this.previousMonth,\n        size: \"medium\",\n        disabled: disablePreviousMonth,\n        icon: _react[\"default\"].createElement(_leftArrow[\"default\"], null),\n        assistiveText: \"Previous Month\"\n      }), _react[\"default\"].createElement(\"h3\", {\n        className: \"rainbow-calendar_month-text\",\n        id: \"month\"\n      }, formattedMonth), _react[\"default\"].createElement(_ButtonIcon[\"default\"], {\n        onClick: this.nextMonth,\n        size: \"medium\",\n        disabled: disableNextMonth,\n        icon: _react[\"default\"].createElement(_rightArrow[\"default\"], null),\n        assistiveText: \"Next Month\"\n      })), _react[\"default\"].createElement(_Select[\"default\"], {\n        label: \"select year\",\n        hideLabel: true,\n        className: \"rainbow-calendar_select-year\",\n        value: currentYear,\n        options: yearsRange,\n        onChange: this.handleYearChange\n      })), _react[\"default\"].createElement(\"table\", {\n        role: \"grid\",\n        \"aria-labelledby\": \"month\"\n      }, _react[\"default\"].createElement(_daysOfWeek[\"default\"], null), _react[\"default\"].createElement(_month[\"default\"], {\n        value: value,\n        firstDayMonth: currentMonth,\n        minDate: minDate,\n        maxDate: maxDate,\n        onChange: onChange\n      })));\n    }\n  }]);\n  return Calendar;\n}(_react.Component);\n\nexports[\"default\"] = Calendar;\nCalendar.propTypes = {\n  /** Sets the date for the Calendar programmatically. */\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].instanceOf(Date), _propTypes[\"default\"].string]),\n\n  /** The ending of a range of valid dates. The range includes the endDate.\n   * The default value is current date + 100 years. */\n  maxDate: _propTypes[\"default\"].instanceOf(Date),\n\n  /** The beginning of a range of valid dates. The range includes the startDate.\n   * The default value is current date - 100 years. */\n  minDate: _propTypes[\"default\"].instanceOf(Date),\n\n  /** The action triggered when a value attribute changes. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nCalendar.defaultProps = {\n  value: undefined,\n  minDate: undefined,\n  maxDate: undefined,\n  onChange: function onChange() {},\n  className: undefined,\n  style: undefined\n};","map":null,"metadata":{},"sourceType":"script"}