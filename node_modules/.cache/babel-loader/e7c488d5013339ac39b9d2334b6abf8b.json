{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n/* eslint-disable no-param-reassign, no-plusplus */\n\n/**\n * Based on Marc J. Schmidt library: https://github.com/marcj/css-element-queries/blob/master\n */\n\n\nvar EventQueue =\n/*#__PURE__*/\nfunction () {\n  function EventQueue() {\n    (0, _classCallCheck2[\"default\"])(this, EventQueue);\n    this.q = [];\n  }\n\n  (0, _createClass2[\"default\"])(EventQueue, [{\n    key: \"add\",\n    value: function add(ev) {\n      this.q.push(ev);\n    }\n  }, {\n    key: \"call\",\n    value: function call(sizeInfo) {\n      for (var i = 0, j = this.q.length; i < j; i++) {\n        this.q[i].call(this, sizeInfo);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(ev) {\n      var newQueue = [];\n\n      for (var i = 0, j = this.q.length; i < j; i++) {\n        if (this.q[i] !== ev) {\n          newQueue.push(this.q[i]);\n        }\n      }\n\n      this.q = newQueue;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.q.length;\n    }\n  }]);\n  return EventQueue;\n}();\n/**\n * Get element size\n * @param {HTMLElement} element - element to return the size.\n * @returns {Object} {width, height}\n */\n\n\nfunction getElementSize(element) {\n  var rect = element.getBoundingClientRect();\n  return {\n    width: Math.round(rect.width),\n    height: Math.round(rect.height)\n  };\n}\n\nfunction createResizeSensor() {\n  var resizeSensor = document.createElement('div');\n  resizeSensor.dir = 'ltr';\n  resizeSensor.className = 'resize-sensor';\n  var style = 'position: absolute; left: -10px; top: -10px; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n  var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n  resizeSensor.style.cssText = style; // eslint-disable-next-line lwc/no-inner-html\n\n  resizeSensor.innerHTML = \"<div class=\\\"resize-sensor-expand\\\" style=\\\"\".concat(style, \"\\\">\") + \"<div style=\\\"\".concat(styleChild, \"\\\"></div>\") + '</div>' + \"<div class=\\\"resize-sensor-shrink\\\" style=\\\"\".concat(style, \"\\\">\") + \"<div style=\\\"\".concat(styleChild, \" width: 200%; height: 200%\\\"></div>\") + '</div>';\n  return resizeSensor;\n}\n/**\n *\n * @param {HTMLElement} element - element to listen resize.\n * @param {Function}    resizeListener - resize event listener.\n */\n\n\nfunction attachResizeEvent(element, resizeListener) {\n  if (!element) {\n    return;\n  }\n\n  if (element.resizedAttached) {\n    element.resizedAttached.add(function () {\n      return resizeListener();\n    });\n    return;\n  }\n\n  element.resizedAttached = new EventQueue();\n  element.resizedAttached.add(function () {\n    return resizeListener();\n  });\n  var resizeSensor = createResizeSensor();\n  element.resizeSensor = resizeSensor;\n  element.appendChild(resizeSensor);\n  var position = (window.getComputedStyle(element) || element.style).getPropertyValue('position');\n\n  if (position !== 'absolute' && position !== 'relative' && position !== 'fixed') {\n    element.style.position = 'relative';\n  }\n\n  var expand = resizeSensor.childNodes[0];\n  var expandChild = expand.childNodes[0];\n  var shrink = resizeSensor.childNodes[1];\n  var dirty;\n  var rafId;\n  var size = getElementSize(element);\n  var lastWidth = size.width;\n  var lastHeight = size.height;\n  var initialHiddenCheck = true;\n  var resetRafId;\n\n  var resetExpandShrink = function resetExpandShrink() {\n    expandChild.style.width = '100000px';\n    expandChild.style.height = '100000px';\n    expand.scrollLeft = 100000;\n    expand.scrollTop = 100000;\n    shrink.scrollLeft = 100000;\n    shrink.scrollTop = 100000;\n  };\n\n  var reset = function reset() {\n    // Check if element is hidden\n    if (initialHiddenCheck) {\n      if (!expand.scrollTop && !expand.scrollLeft) {\n        // reset\n        resetExpandShrink(); // Check in next frame\n\n        if (!resetRafId) {\n          resetRafId = requestAnimationFrame(function () {\n            resetRafId = 0;\n            reset();\n          });\n        }\n\n        return;\n      }\n\n      initialHiddenCheck = false;\n    }\n\n    resetExpandShrink();\n  };\n\n  resizeSensor.resetSensor = reset;\n\n  var onResized = function onResized() {\n    rafId = 0;\n\n    if (!dirty) {\n      return;\n    }\n\n    lastWidth = size.width;\n    lastHeight = size.height;\n\n    if (element.resizedAttached) {\n      element.resizedAttached.call(size);\n    }\n  };\n\n  var onScroll = function onScroll() {\n    size = getElementSize(element);\n    dirty = size.width !== lastWidth || size.height !== lastHeight;\n\n    if (dirty && !rafId) {\n      rafId = requestAnimationFrame(onResized);\n    }\n\n    reset();\n  };\n\n  var addEvent = function addEvent(el, name, cb) {\n    el.addEventListener(name, cb);\n  };\n\n  addEvent(expand, 'scroll', onScroll);\n  addEvent(shrink, 'scroll', onScroll); // Fix for custom Elements\n\n  requestAnimationFrame(reset);\n}\n\nfunction _detach(elem, ev) {\n  if (!elem) {\n    return;\n  }\n\n  if (elem.resizedAttached && typeof ev === 'function') {\n    elem.resizedAttached.remove(ev);\n\n    if (elem.resizedAttached.length()) {\n      return;\n    }\n  }\n\n  if (elem.resizeSensor) {\n    if (elem.contains(elem.resizeSensor)) {\n      elem.removeChild(elem.resizeSensor);\n    }\n\n    delete elem.resizeSensor;\n    delete elem.resizedAttached;\n  }\n}\n\nvar ResizeSensor =\n/*#__PURE__*/\nfunction () {\n  function ResizeSensor(element, resizeListener) {\n    (0, _classCallCheck2[\"default\"])(this, ResizeSensor);\n    this.targetElement = element;\n    this.resizeListener = resizeListener;\n    attachResizeEvent(this.targetElement, this.resizeListener);\n  }\n\n  (0, _createClass2[\"default\"])(ResizeSensor, [{\n    key: \"detach\",\n    value: function detach() {\n      _detach(this.targetElement, this.resizeListener);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.targetElement.resizeSensor.resetSensor();\n    }\n  }]);\n  return ResizeSensor;\n}();\n\nexports[\"default\"] = ResizeSensor;","map":null,"metadata":{},"sourceType":"script"}