{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _withReduxForm = _interopRequireDefault(require(\"./../../libs/hocs/withReduxForm\"));\n\nvar _buttonItems = _interopRequireDefault(require(\"./buttonItems\"));\n\nvar _RenderIf = _interopRequireDefault(require(\"../RenderIf\"));\n\nvar _RequiredAsterisk = _interopRequireDefault(require(\"../RequiredAsterisk\"));\n\nvar _utils = require(\"../../libs/utils\");\n\nrequire(\"./styles.css\");\n\nvar _marker = _interopRequireDefault(require(\"./marker\"));\n\nvar _isOptionChecked = _interopRequireDefault(require(\"./helpers/isOptionChecked\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * A button list that can have a single entry checked at any one time.\n * @category Form\n */\n\n\nvar RadioButtonGroup =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(RadioButtonGroup, _Component);\n\n  function RadioButtonGroup(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, RadioButtonGroup);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(RadioButtonGroup).call(this, props));\n    _this.errorId = (0, _utils.uniqueId)('error-message');\n    _this.groupNameId = props.name || (0, _utils.uniqueId)('options');\n    _this.optionsRefs = _this.generateRefsForOptions();\n    _this.state = {\n      options: _this.addRefsToOptions(props.options),\n      markerLeft: 0,\n      markerWidth: 0\n    };\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(RadioButtonGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.updateMarker();\n      }, 0);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.options !== this.props.options) {\n        this.updateRefs();\n      }\n\n      if (prevProps.value !== this.props.value) {\n        this.updateMarker();\n      }\n    }\n  }, {\n    key: \"getVariantClassNames\",\n    value: function getVariantClassNames() {\n      var variant = this.props.variant;\n\n      if (variant === 'default') {\n        return null;\n      }\n\n      return \"rainbow-radio-button-group--\".concat(variant);\n    }\n  }, {\n    key: \"getContainerClassNames\",\n    value: function getContainerClassNames() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          error = _this$props.error;\n      return (0, _classnames[\"default\"])('rainbow-radio-button-group_container', this.getVariantClassNames(), {\n        'rainbow-radio-button-group--error': !!error\n      }, className);\n    }\n  }, {\n    key: \"getErrorMessageId\",\n    value: function getErrorMessageId() {\n      var error = this.props.error;\n\n      if (error) {\n        return this.errorId;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getCheckedOptionRef\",\n    value: function getCheckedOptionRef() {\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          options = _this$props2.options;\n      var currentOptionIndex = options.findIndex(function (option) {\n        return (0, _isOptionChecked[\"default\"])(option, value);\n      });\n      return currentOptionIndex !== -1 ? this.optionsRefs[currentOptionIndex] : null;\n    }\n  }, {\n    key: \"generateRefsForOptions\",\n    value: function generateRefsForOptions() {\n      var options = this.props.options;\n      return options.map(function () {\n        return _react[\"default\"].createRef();\n      });\n    }\n  }, {\n    key: \"addRefsToOptions\",\n    value: function addRefsToOptions(options) {\n      var _this3 = this;\n\n      return options.map(function (option, index) {\n        return _objectSpread({}, option, {\n          optionRef: _this3.optionsRefs[index]\n        });\n      });\n    }\n  }, {\n    key: \"isMarkerActive\",\n    value: function isMarkerActive() {\n      var _this$props3 = this.props,\n          value = _this$props3.value,\n          options = _this$props3.options;\n      return options.some(function (option) {\n        return !option.disabled && option.value === value;\n      });\n    }\n  }, {\n    key: \"updateMarker\",\n    value: function updateMarker() {\n      var activeOptionRef = this.getCheckedOptionRef();\n\n      if (activeOptionRef && activeOptionRef.current) {\n        this.setState({\n          markerLeft: activeOptionRef.current.offsetLeft,\n          markerWidth: Math.max(activeOptionRef.current.offsetWidth, activeOptionRef.current.clientWidth)\n        });\n      }\n    }\n  }, {\n    key: \"updateRefs\",\n    value: function updateRefs() {\n      var _this4 = this;\n\n      this.optionsRefs = this.generateRefsForOptions();\n      this.setState({\n        options: this.addRefsToOptions(this.props.options)\n      });\n      setTimeout(function () {\n        _this4.updateMarker();\n      }, 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          style = _this$props4.style,\n          label = _this$props4.label,\n          required = _this$props4.required,\n          error = _this$props4.error,\n          value = _this$props4.value,\n          id = _this$props4.id,\n          onChange = _this$props4.onChange;\n      var _this$state = this.state,\n          options = _this$state.options,\n          markerLeft = _this$state.markerLeft,\n          markerWidth = _this$state.markerWidth;\n      var markerStyle = {\n        left: markerLeft,\n        width: markerWidth\n      };\n      return _react[\"default\"].createElement(\"fieldset\", {\n        id: id,\n        className: this.getContainerClassNames(),\n        style: style\n      }, _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!label\n      }, _react[\"default\"].createElement(\"legend\", {\n        className: \"rainbow-radio-button-group_label\"\n      }, _react[\"default\"].createElement(_RequiredAsterisk[\"default\"], {\n        required: required\n      }), label)), _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-radio-button-group_inner-container\"\n      }, _react[\"default\"].createElement(_marker[\"default\"], {\n        isVisible: this.isMarkerActive(),\n        style: markerStyle\n      }), _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-radio-button-group_items-container\"\n      }, _react[\"default\"].createElement(_buttonItems[\"default\"], {\n        value: value,\n        onChange: onChange,\n        options: options,\n        name: this.groupNameId,\n        required: required,\n        ariaDescribedby: this.getErrorMessageId()\n      }))), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!error\n      }, _react[\"default\"].createElement(\"div\", {\n        id: this.getErrorMessageId(),\n        className: \"rainbow-radio-button-group_text-error\"\n      }, error)));\n    }\n  }]);\n  return RadioButtonGroup;\n}(_react.Component);\n\nRadioButtonGroup.propTypes = {\n  /** The radio group label */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The name of the radio group */\n  name: _propTypes[\"default\"].string,\n\n  /** The value of the element. */\n  value: _propTypes[\"default\"].string,\n\n  /** The variant changes the appearance of the radio button. Accepted variants include default,\n   * brand and inverse. This value defaults to default. */\n  variant: _propTypes[\"default\"].oneOf(['default', 'inverse', 'brand']),\n\n  /** The action triggered when a value attribute changes. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** If is set to true the radio group is required. This value defaults to false. */\n  required: _propTypes[\"default\"].bool,\n\n  /** An array with the radio options. */\n  options: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]).isRequired,\n    value: _propTypes[\"default\"].string,\n    disabled: _propTypes[\"default\"].bool\n  })),\n\n  /** Specifies that an radio group must be filled out before submitting the form. */\n  error: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string\n};\nRadioButtonGroup.defaultProps = {\n  label: null,\n  name: null,\n  className: undefined,\n  style: undefined,\n  value: undefined,\n  variant: 'default',\n  onChange: function onChange() {},\n  required: false,\n  options: [],\n  error: null,\n  id: undefined\n};\n\nvar _default = (0, _withReduxForm[\"default\"])(RadioButtonGroup);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}