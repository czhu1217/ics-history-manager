{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Avatar;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _avatarContent = _interopRequireDefault(require(\"./avatarContent\"));\n\nvar _AssistiveText = _interopRequireDefault(require(\"./../AssistiveText\"));\n\nrequire(\"./styles.css\");\n/**\n * An avatar component represents an object or entity\n */\n\n\nfunction Avatar(props) {\n  var className = props.className,\n      style = props.style,\n      size = props.size,\n      assistiveText = props.assistiveText,\n      rest = (0, _objectWithoutProperties2[\"default\"])(props, [\"className\", \"style\", \"size\", \"assistiveText\"]);\n\n  var getContainerClassNames = function getContainerClassNames() {\n    return (0, _classnames[\"default\"])('rainbow-avatar', \"rainbow-avatar--\".concat(size), className);\n  };\n\n  return _react[\"default\"].createElement(\"span\", {\n    className: getContainerClassNames(),\n    style: style\n  }, _react[\"default\"].createElement(_avatarContent[\"default\"], (0, _extends2[\"default\"])({}, rest, {\n    assistiveText: assistiveText\n  })), _react[\"default\"].createElement(_AssistiveText[\"default\"], {\n    text: assistiveText\n  }));\n}\n\nAvatar.propTypes = {\n  /** The URL for the image.\n   * It take precedence over the initials and icon. */\n  src: _propTypes[\"default\"].string,\n\n  /** If the record name contains two words, like first and last name,\n   * use the first capitalized letter of each. For records that only have a single word name,\n   * use the first two letters of that word using one capital and one lower case letter. */\n  initials: _propTypes[\"default\"].string,\n\n  /** The fallback icon to show when src and initials are not passed. */\n  icon: _propTypes[\"default\"].node,\n\n  /** The size of the avatar. Valid values are x-small, small, medium, and large.\n   * It take precedence over the icon.\n   * This value defaults to medium. */\n  size: _propTypes[\"default\"].oneOf(['x-small', 'small', 'medium', 'large']),\n\n  /** The variant of the initials. Only make sense when initials is used. */\n  initialsVariant: _propTypes[\"default\"].oneOf(['default', 'inverse']),\n\n  /** Displays tooltip text when the mouse moves over the element. */\n  title: _propTypes[\"default\"].string,\n\n  /** A description for assistive sreen readers. */\n  assistiveText: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nAvatar.defaultProps = {\n  src: undefined,\n  initials: undefined,\n  icon: null,\n  size: 'medium',\n  initialsVariant: 'default',\n  title: undefined,\n  assistiveText: undefined,\n  className: undefined,\n  style: undefined\n};","map":null,"metadata":{},"sourceType":"script"}