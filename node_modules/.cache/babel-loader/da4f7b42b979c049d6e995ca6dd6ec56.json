{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _clock = _interopRequireDefault(require(\"./icons/clock\"));\n\nvar _Modal = _interopRequireDefault(require(\"../Modal\"));\n\nvar _input = _interopRequireDefault(require(\"./input\"));\n\nvar _timeSelect = _interopRequireDefault(require(\"./timeSelect\"));\n\nvar _get12HourTime = _interopRequireDefault(require(\"./helpers/get12HourTime\"));\n\nvar _getInputValue = _interopRequireDefault(require(\"./helpers/getInputValue\"));\n\nvar _withReduxForm = _interopRequireDefault(require(\"../../libs/hocs/withReduxForm\"));\n\nvar _constants = require(\"../../libs/constants\");\n\nrequire(\"./styles.css\");\n\nrequire(\"./media-queries.css\");\n/**\n * A TimePicker is used to input a time by displaying an interface the user can interact with.\n * @category Form\n */\n\n\nvar TimePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(TimePicker, _Component);\n\n  function TimePicker(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, TimePicker);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(TimePicker).call(this, props));\n    _this.state = {\n      isOpen: false,\n      value: (0, _get12HourTime[\"default\"])(props.value)\n    };\n    _this.inputRef = _react[\"default\"].createRef();\n    _this.timeSelectRef = _react[\"default\"].createRef();\n    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.closeModal = _this.closeModal.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.setFocusToHourInput = _this.setFocusToHourInput.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(TimePicker, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var prevValue = _ref.value;\n      var value = this.props.value;\n\n      if (prevValue !== value) {\n        this.updateValue();\n      }\n    }\n  }, {\n    key: \"getContainerClassName\",\n    value: function getContainerClassName() {\n      var className = this.props.className;\n      return (0, _classnames[\"default\"])('rainbow-time-picker_container', className);\n    }\n  }, {\n    key: \"getTriggerInputValue\",\n    value: function getTriggerInputValue() {\n      var value = this.state.value;\n      var placeholder = this.props.placeholder;\n      return (0, _getInputValue[\"default\"])(value, placeholder);\n    }\n  }, {\n    key: \"setFocusToHourInput\",\n    value: function setFocusToHourInput() {\n      this.timeSelectRef.current.focusHourInput();\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue() {\n      var value = this.props.value;\n      this.setState({\n        value: (0, _get12HourTime[\"default\"])(value)\n      });\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      var keyCode = event.keyCode;\n      var readOnly = this.props.readOnly;\n      var shouldOpenModal = (keyCode === _constants.ENTER_KEY || keyCode === _constants.SPACE_KEY) && !readOnly;\n\n      if (shouldOpenModal) {\n        this.setState({\n          isOpen: true\n        });\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      var _this$props = this.props,\n          onClick = _this$props.onClick,\n          readOnly = _this$props.readOnly;\n\n      if (!readOnly) {\n        this.setState({\n          isOpen: true\n        });\n        onClick(event);\n      }\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      var _this$props2 = this.props,\n          onBlur = _this$props2.onBlur,\n          value = _this$props2.value;\n      onBlur(value);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      var _this$props3 = this.props,\n          onFocus = _this$props3.onFocus,\n          value = _this$props3.value;\n      onFocus(value);\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.setState({\n        isOpen: false\n      });\n    }\n    /**\n     * Sets focus on the element.\n     * @public\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.inputRef.current.focus();\n    }\n    /**\n     * Sets click on the element.\n     * @public\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.inputRef.current.click();\n    }\n    /**\n     * Sets blur on the element.\n     * @public\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.inputRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          placeholder = _this$props4.placeholder,\n          label = _this$props4.label,\n          required = _this$props4.required,\n          style = _this$props4.style,\n          hideLabel = _this$props4.hideLabel,\n          name = _this$props4.name,\n          bottomHelpText = _this$props4.bottomHelpText,\n          isCentered = _this$props4.isCentered,\n          error = _this$props4.error,\n          readOnly = _this$props4.readOnly,\n          disabled = _this$props4.disabled,\n          tabIndex = _this$props4.tabIndex,\n          id = _this$props4.id,\n          cancelLabel = _this$props4.cancelLabel,\n          okLabel = _this$props4.okLabel,\n          onChange = _this$props4.onChange;\n      var _this$state = this.state,\n          isOpen = _this$state.isOpen,\n          value = _this$state.value;\n      return _react[\"default\"].createElement(\"div\", {\n        id: id,\n        className: this.getContainerClassName(),\n        style: style\n      }, _react[\"default\"].createElement(_input[\"default\"], {\n        id: \"time-picker_time-input\",\n        ref: this.inputRef,\n        label: label,\n        placeholder: placeholder,\n        icon: _react[\"default\"].createElement(_clock[\"default\"], null),\n        iconPosition: \"right\",\n        required: required,\n        value: this.getTriggerInputValue(),\n        onKeyDown: this.handleKeyDown,\n        onClick: this.handleClick,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        hideLabel: hideLabel,\n        name: name,\n        bottomHelpText: bottomHelpText,\n        isCentered: isCentered,\n        error: error,\n        readOnly: readOnly,\n        disabled: disabled,\n        tabIndex: tabIndex,\n        autoComplete: \"off\"\n      }), _react[\"default\"].createElement(_Modal[\"default\"], {\n        id: \"time-picker_modal\",\n        className: \"rainbow-time-picker_modal\",\n        isOpen: isOpen,\n        onRequestClose: this.closeModal,\n        onOpened: this.setFocusToHourInput\n      }, _react[\"default\"].createElement(_timeSelect[\"default\"], {\n        onCloseModal: this.closeModal,\n        onChange: onChange,\n        cancelLabel: cancelLabel,\n        okLabel: okLabel,\n        value: value,\n        ref: this.timeSelectRef\n      })));\n    }\n  }]);\n  return TimePicker;\n}(_react.Component);\n\nTimePicker.propTypes = {\n  /** Sets the date for the TimePicker programmatically. */\n  value: _propTypes[\"default\"].string,\n\n  /** Override the label of the 'Cancel' button. */\n  cancelLabel: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Override the label of the 'OK' button. */\n  okLabel: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The action triggered when a value attribute changes. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** Text that is displayed when the TimePicker is empty,\n   * to prompt the user for a valid entry. */\n  placeholder: _propTypes[\"default\"].string,\n\n  /** Text label for the TimePicker. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]).isRequired,\n\n  /** A boolean to hide the TimePicker label. */\n  hideLabel: _propTypes[\"default\"].bool,\n\n  /** Specifies that the TimePicker must be filled out before submitting the form.\n   * This value defaults to false. */\n  required: _propTypes[\"default\"].bool,\n\n  /** The name of the TimePicker. */\n  name: _propTypes[\"default\"].string,\n\n  /** Shows the help message below the TimePicker. */\n  bottomHelpText: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Specifies that the TimePicker text will be centered. This value defaults to false. */\n  isCentered: _propTypes[\"default\"].bool,\n\n  /** Specifies that the TimePicker must be filled out before submitting the form. */\n  error: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Specifies that the TimePicker is read-only. This value defaults to false. */\n  readOnly: _propTypes[\"default\"].bool,\n\n  /** Specifies that the TimePicker element should be disabled. This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** Specifies the tab order of an element (when the tab button is used for navigating). */\n  tabIndex: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The action triggered when the element is clicked. */\n  onClick: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element receives focus. */\n  onFocus: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element releases focus. */\n  onBlur: _propTypes[\"default\"].func,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nTimePicker.defaultProps = {\n  value: undefined,\n  cancelLabel: 'Cancel',\n  okLabel: 'OK',\n  onChange: function onChange() {},\n  placeholder: null,\n  hideLabel: false,\n  required: false,\n  name: undefined,\n  bottomHelpText: null,\n  isCentered: false,\n  error: null,\n  readOnly: false,\n  disabled: false,\n  tabIndex: undefined,\n  onClick: function onClick() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  id: undefined,\n  className: undefined,\n  style: undefined\n};\n\nvar _default = (0, _withReduxForm[\"default\"])(TimePicker);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}