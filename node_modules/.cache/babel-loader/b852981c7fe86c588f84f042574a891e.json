{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _RenderIf = _interopRequireDefault(require(\"./../RenderIf\"));\n\nvar _ButtonIcon = _interopRequireDefault(require(\"./../ButtonIcon\"));\n\nvar _utils = require(\"./../../libs/utils\");\n\nvar _constants = require(\"./../../libs/constants\");\n\nvar _header = _interopRequireDefault(require(\"./header\"));\n\nvar _closeIcon = _interopRequireDefault(require(\"./closeIcon\"));\n\nvar _manageTab = _interopRequireDefault(require(\"./manageTab\"));\n\nvar _scrollController = require(\"./scrollController\");\n\nvar _counterManager = _interopRequireDefault(require(\"./counterManager\"));\n\nrequire(\"./styles.css\");\n/**\n * Modals are used to display content in a layer above the app.\n * This is used in cases such as the creation or editing of a record,\n * as well as various types of messaging.\n * @category Layout\n */\n\n\nvar Modal =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Modal, _Component);\n\n  function Modal(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Modal);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Modal).call(this, props));\n    _this.buttonRef = _react[\"default\"].createRef();\n    _this.modalRef = _react[\"default\"].createRef();\n    _this.modalHeadingId = (0, _utils.uniqueId)('modal-heading');\n    _this.modalContentId = (0, _utils.uniqueId)('modal-content');\n    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.closeModal = _this.closeModal.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Modal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var isOpen = this.props.isOpen;\n\n      if (isOpen) {\n        _counterManager[\"default\"].increment();\n\n        (0, _scrollController.disableScroll)();\n        this.modalTriggerElement = document.activeElement;\n        this.modalRef.current.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          onOpened = _this$props.onOpened;\n      var prevIsOpen = prevProps.isOpen;\n\n      if (isOpen && !prevIsOpen) {\n        _counterManager[\"default\"].increment();\n\n        (0, _scrollController.disableScroll)();\n        this.modalTriggerElement = document.activeElement;\n        this.modalRef.current.focus();\n        onOpened();\n      } else if (!isOpen && prevIsOpen) {\n        _counterManager[\"default\"].decrement();\n\n        if (this.modalTriggerElement) {\n          this.modalTriggerElement.focus();\n        }\n\n        if (!_counterManager[\"default\"].hasModalsOpen()) {\n          (0, _scrollController.enableScroll)();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var isOpen = this.props.isOpen;\n\n      if (isOpen) {\n        _counterManager[\"default\"].decrement();\n      }\n\n      if (!_counterManager[\"default\"].hasModalsOpen()) {\n        (0, _scrollController.enableScroll)();\n      }\n    }\n  }, {\n    key: \"getBackDropClassNames\",\n    value: function getBackDropClassNames() {\n      var isOpen = this.props.isOpen;\n      return (0, _classnames[\"default\"])('rainbow-modal_backdrop', {\n        'rainbow-modal_backdrop--open': isOpen\n      });\n    }\n  }, {\n    key: \"getContainerClassNames\",\n    value: function getContainerClassNames() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          isOpen = _this$props2.isOpen;\n      return (0, _classnames[\"default\"])('rainbow-modal', {\n        'rainbow-modal--open': isOpen,\n        'rainbow-modal--close': !isOpen\n      }, this.getSizeClassNames(), className);\n    }\n  }, {\n    key: \"getSizeClassNames\",\n    value: function getSizeClassNames() {\n      var size = this.props.size;\n\n      if (size === 'small') {\n        return null;\n      }\n\n      return \"rainbow-modal--\".concat(size);\n    }\n  }, {\n    key: \"handleKeyPressed\",\n    value: function handleKeyPressed(event) {\n      event.stopPropagation();\n      var isOpen = this.props.isOpen;\n\n      if (isOpen && event.keyCode === _constants.ESCAPE_KEY) {\n        this.closeModal();\n      }\n\n      if (event.keyCode === _constants.TAB_KEY) {\n        (0, _manageTab[\"default\"])(this.modalRef.current, event);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      if (_counterManager[\"default\"].counter > 1) {\n        event.stopPropagation();\n      }\n\n      var isOpen = this.props.isOpen;\n\n      if (isOpen) {\n        var isClickOutsideModal = !this.modalRef.current.contains(event.target);\n\n        if (isClickOutsideModal) {\n          return this.closeModal();\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      var onRequestClose = this.props.onRequestClose;\n      return onRequestClose();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          title = _this$props3.title,\n          style = _this$props3.style,\n          children = _this$props3.children,\n          footer = _this$props3.footer,\n          isOpen = _this$props3.isOpen,\n          id = _this$props3.id;\n\n      if (isOpen) {\n        return (0, _reactDom.createPortal)(_react[\"default\"].createElement(\"div\", {\n          role: \"presentation\",\n          id: id,\n          onClick: this.handleClick,\n          className: this.getBackDropClassNames(),\n          onKeyDown: this.handleKeyPressed\n        }, _react[\"default\"].createElement(\"section\", {\n          role: \"dialog\",\n          tabIndex: -1,\n          \"aria-labelledby\": this.modalHeadingId,\n          \"aria-modal\": true,\n          \"aria-hidden\": !isOpen,\n          \"aria-describedby\": this.modalContentId,\n          className: this.getContainerClassNames(),\n          style: style,\n          ref: this.modalRef\n        }, _react[\"default\"].createElement(_ButtonIcon[\"default\"], {\n          className: \"rainbow-modal_close-button\",\n          icon: _react[\"default\"].createElement(_closeIcon[\"default\"], null),\n          title: \"Close\",\n          onClick: this.closeModal,\n          ref: this.buttonRef\n        }), _react[\"default\"].createElement(_header[\"default\"], {\n          id: this.modalHeadingId,\n          title: title\n        }), _react[\"default\"].createElement(\"div\", {\n          className: \"rainbow-modal_content\",\n          id: this.modalContentId\n        }, children), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n          isTrue: !!footer\n        }, _react[\"default\"].createElement(\"footer\", {\n          className: \"rainbow-modal_footer\"\n        }, footer)))), document.body);\n      }\n\n      return null;\n    }\n  }]);\n  return Modal;\n}(_react.Component);\n\nexports[\"default\"] = Modal;\nModal.propTypes = {\n  /** The title can include text or another component,\n   * and is displayed in the header of the component. */\n  title: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The size of the Modal. Valid values are small, medium, and large.\n   * This value defaults to small. */\n  size: _propTypes[\"default\"].oneOf(['small', 'medium', 'large']),\n\n  /** The footer can include text or another component. */\n  footer: _propTypes[\"default\"].node,\n\n  /** Controls whether the Modal is opened or not. If true, the modal is open. */\n  isOpen: _propTypes[\"default\"].bool,\n\n  /** The action triggered when the component request to close\n   *  (e.g click close button, press esc key or click outside the modal). */\n  onRequestClose: _propTypes[\"default\"].func,\n\n  /** A callback triggered when the modal is opened. This is usefull for example to set focus\n   * to an element inside the modal content after it is opened.\n   */\n  onOpened: _propTypes[\"default\"].func,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node\n};\nModal.defaultProps = {\n  isOpen: false,\n  title: null,\n  size: 'small',\n  children: null,\n  className: undefined,\n  style: undefined,\n  footer: null,\n  onRequestClose: function onRequestClose() {},\n  onOpened: function onOpened() {},\n  id: undefined\n};","map":null,"metadata":{},"sourceType":"script"}