{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _context = require(\"./context\");\n\nvar _ButtonGroup = _interopRequireDefault(require(\"./../ButtonGroup\"));\n\nvar _ButtonIcon = _interopRequireDefault(require(\"./../ButtonIcon\"));\n\nvar _RenderIf = _interopRequireDefault(require(\"./../RenderIf\"));\n\nvar _constants = require(\"../../libs/constants\");\n\nvar _utils = require(\"./utils\");\n\nvar _rightThinChevron = _interopRequireDefault(require(\"./rightThinChevron\"));\n\nvar _leftThinChevron = _interopRequireDefault(require(\"./leftThinChevron\"));\n\nvar _ResizeSensor = _interopRequireDefault(require(\"../../libs/ResizeSensor\"));\n\nvar _debounce = _interopRequireDefault(require(\"../../libs/debounce\"));\n\nrequire(\"./styles.css\");\n/* eslint-disable max-len */\n\n\nvar RIGHT_SIDE = 1;\nvar LEFT_SIDE = -1;\n/**\n * Tabs make it easy to explore and switch between different views.\n * @category Layout\n */\n\nvar Tabset =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Tabset, _Component);\n\n  function Tabset(props) {\n    var _this$keyHandlerMap;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Tabset);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Tabset).call(this, props));\n    _this.state = {\n      tabsetChildren: [],\n      areButtonsVisible: false\n    };\n    _this.isFirstTime = true;\n    _this.tabsetRef = _react[\"default\"].createRef();\n    _this.resizeTarget = _react[\"default\"].createRef();\n    _this.registerTab = _this.registerTab.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.unRegisterTab = _this.unRegisterTab.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.updateTab = _this.updateTab.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleLeftButtonClick = _this.handleLeftButtonClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleRightButtonClick = _this.handleRightButtonClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.updateButtonsVisibility = _this.updateButtonsVisibility.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleSelect = _this.handleSelect.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.keyHandlerMap = (_this$keyHandlerMap = {}, (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.RIGHT_KEY, function () {\n      return _this.selectTab(RIGHT_SIDE);\n    }), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.LEFT_KEY, function () {\n      return _this.selectTab(LEFT_SIDE);\n    }), _this$keyHandlerMap);\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Tabset, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.widthObserver = new _ResizeSensor[\"default\"](this.resizeTarget.current, (0, _debounce[\"default\"])(this.updateButtonsVisibility, 100));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProp) {\n      var tabsetChildren = this.state.tabsetChildren;\n      var isFirstTime = this.isFirstTime;\n      var children = this.props.children;\n      var areAllChildrenRegistered = children.length === tabsetChildren.length;\n\n      if ((0, _utils.isNotSameChildren)(children, prevProp.children)) {\n        this.updateButtonsVisibility();\n      }\n\n      if (areAllChildrenRegistered && isFirstTime) {\n        this.updateButtonsVisibility();\n        this.isFirstTime = false;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.widthObserver.detach(this.resizeTarget.current);\n    }\n  }, {\n    key: \"getContainerClassName\",\n    value: function getContainerClassName() {\n      var className = this.props.className;\n      return (0, _classnames[\"default\"])('rainbow-tabset_container', className);\n    }\n  }, {\n    key: \"getInnerContainerClassName\",\n    value: function getInnerContainerClassName() {\n      var fullWidth = this.props.fullWidth;\n      return (0, _classnames[\"default\"])('rainbow-tabset_inner-container', {\n        'rainbow-tabset_inner-container--full-width': fullWidth\n      });\n    }\n  }, {\n    key: \"setAsSelectedTab\",\n    value: function setAsSelectedTab(tabIndex) {\n      var tabsetChildren = this.state.tabsetChildren;\n      tabsetChildren[tabIndex].ref.click();\n      tabsetChildren[tabIndex].ref.focus();\n    }\n  }, {\n    key: \"updateButtonsVisibility\",\n    value: function updateButtonsVisibility() {\n      var tabsetChildren = this.state.tabsetChildren;\n      var tabset = this.tabsetRef.current;\n      var scrollWidth = tabset.scrollWidth,\n          scrollLeft = tabset.scrollLeft,\n          tabsetWidth = tabset.offsetWidth;\n      var childrenTotalWidth = (0, _utils.getChildrenTotalWidth)(tabsetChildren);\n      var showButtons = childrenTotalWidth > tabsetWidth;\n      this.screenWidth = window.innerWidth;\n      this.scrollLeft = scrollLeft;\n      this.maxScroll = scrollWidth - tabsetWidth;\n      this.tabsetWidth = tabsetWidth;\n      this.setState({\n        areButtonsVisible: showButtons\n      });\n    }\n  }, {\n    key: \"handleKeyPressed\",\n    value: function handleKeyPressed(event) {\n      if (this.keyHandlerMap[event.keyCode]) {\n        return this.keyHandlerMap[event.keyCode]();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"selectTab\",\n    value: function selectTab(side) {\n      var activeTabName = this.props.activeTabName;\n      var tabsetChildren = this.state.tabsetChildren;\n      var activeTabIndex = (0, _utils.getTabIndexFromName)(tabsetChildren, activeTabName);\n\n      if (activeTabIndex === tabsetChildren.length - 1 && side === RIGHT_SIDE) {\n        this.setAsSelectedTab(0);\n      } else if (activeTabIndex === 0 && side === LEFT_SIDE) {\n        this.setAsSelectedTab(tabsetChildren.length - 1);\n      } else {\n        this.setAsSelectedTab(activeTabIndex + side);\n      }\n    }\n  }, {\n    key: \"isLeftButtonDisabled\",\n    value: function isLeftButtonDisabled() {\n      var activeTabName = this.props.activeTabName;\n      var tabsetChildren = this.state.tabsetChildren;\n      var screenWidth = this.screenWidth,\n          scrollLeft = this.scrollLeft;\n      return (0, _utils.getLeftButtonDisabledState)({\n        activeTabName: activeTabName,\n        tabsetChildren: tabsetChildren,\n        screenWidth: screenWidth,\n        scrollLeft: scrollLeft\n      });\n    }\n  }, {\n    key: \"isRightButtonDisabled\",\n    value: function isRightButtonDisabled() {\n      var activeTabName = this.props.activeTabName;\n      var tabsetChildren = this.state.tabsetChildren;\n      var screenWidth = this.screenWidth,\n          scrollLeft = this.scrollLeft,\n          maxScroll = this.maxScroll;\n      return (0, _utils.getRightButtonDisabledState)({\n        activeTabName: activeTabName,\n        tabsetChildren: tabsetChildren,\n        screenWidth: screenWidth,\n        scrollLeft: scrollLeft,\n        maxScroll: maxScroll\n      });\n    }\n  }, {\n    key: \"handleRightButtonClick\",\n    value: function handleRightButtonClick() {\n      var screenWidth = this.screenWidth,\n          tabsetWidth = this.tabsetWidth,\n          scrollLeft = this.scrollLeft;\n\n      if (screenWidth > 600) {\n        return this.tabsetRef.current.scrollTo(scrollLeft + tabsetWidth, 0);\n      }\n\n      return this.selectTab(RIGHT_SIDE);\n    }\n  }, {\n    key: \"handleLeftButtonClick\",\n    value: function handleLeftButtonClick() {\n      var screenWidth = this.screenWidth,\n          tabsetWidth = this.tabsetWidth,\n          scrollLeft = this.scrollLeft;\n\n      if (screenWidth > 600) {\n        return this.tabsetRef.current.scrollTo(scrollLeft - tabsetWidth, 0);\n      }\n\n      return this.selectTab(LEFT_SIDE);\n    }\n  }, {\n    key: \"updateTab\",\n    value: function updateTab(tab, nameToUpdate) {\n      var tabsetChildren = this.state.tabsetChildren;\n      var newTabsetChildren = (0, _utils.getUpdatedTabsetChildren)(tabsetChildren, tab, nameToUpdate);\n      this.setState({\n        tabsetChildren: newTabsetChildren\n      });\n    }\n  }, {\n    key: \"registerTab\",\n    value: function registerTab(tab) {\n      var tabsetChildren = this.state.tabsetChildren;\n\n      var _getChildTabNodes = (0, _utils.getChildTabNodes)(this.tabsetRef.current),\n          _getChildTabNodes2 = (0, _toArray2[\"default\"])(_getChildTabNodes),\n          nodes = _getChildTabNodes2.slice(0);\n\n      var newChildrenRefs = (0, _utils.insertChildOrderly)(tabsetChildren, tab, nodes);\n      this.setState({\n        tabsetChildren: newChildrenRefs\n      });\n    }\n  }, {\n    key: \"unRegisterTab\",\n    value: function unRegisterTab(tabName) {\n      var tabsetChildren = this.state.tabsetChildren;\n      var newTabsetChildren = tabsetChildren.filter(function (tab) {\n        return tab.name !== tabName;\n      });\n      this.setState({\n        tabsetChildren: newTabsetChildren\n      });\n    }\n  }, {\n    key: \"scrollToSelectedTab\",\n    value: function scrollToSelectedTab(name) {\n      var tabsetChildren = this.state.tabsetChildren;\n      var tabset = this.tabsetRef.current;\n      var scrollLeft = tabset.scrollLeft,\n          tabsetWidth = tabset.offsetWidth;\n      var tabIndex = (0, _utils.getTabIndexFromName)(tabsetChildren, name);\n      var isFirstTab = tabIndex === 0;\n\n      if (isFirstTab) {\n        this.tabsetRef.current.scrollTo(0, 0);\n      } else {\n        var totalWidthUpToCurrentTab = (0, _utils.getChildrenTotalWidthUpToClickedTab)(tabsetChildren, tabIndex + 1);\n        var totalWidthUpToPrevTab = (0, _utils.getChildrenTotalWidthUpToClickedTab)(tabsetChildren, tabIndex);\n        var tabsetWidthUpToCurrentTab = tabsetWidth + scrollLeft;\n        var isCurrentTabOutOfViewOnRightSide = totalWidthUpToCurrentTab > tabsetWidthUpToCurrentTab - 20;\n        var isCurrentTabOutOfViewOnLeftSide = scrollLeft > totalWidthUpToPrevTab;\n\n        if (isCurrentTabOutOfViewOnLeftSide) {\n          this.tabsetRef.current.scrollTo(totalWidthUpToPrevTab, 0);\n        }\n\n        if (isCurrentTabOutOfViewOnRightSide) {\n          var moveScroll = totalWidthUpToCurrentTab - tabsetWidthUpToCurrentTab + 20;\n          this.tabsetRef.current.scrollTo(scrollLeft + moveScroll, 0);\n        }\n      }\n    }\n  }, {\n    key: \"handleSelect\",\n    value: function handleSelect(e, name) {\n      var onSelect = this.props.onSelect;\n      this.scrollToSelectedTab(name);\n      onSelect(e, name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          activeTabName = _this$props.activeTabName,\n          fullWidth = _this$props.fullWidth,\n          children = _this$props.children,\n          style = _this$props.style,\n          id = _this$props.id;\n      var areButtonsVisible = this.state.areButtonsVisible;\n      var screenWidth = this.screenWidth;\n      var showButtons = areButtonsVisible || screenWidth < 600;\n      var context = {\n        activeTabName: activeTabName,\n        onSelect: this.handleSelect,\n        privateRegisterTab: this.registerTab,\n        privateUnRegisterTab: this.unRegisterTab,\n        privateUpdateTab: this.updateTab,\n        fullWidth: fullWidth\n      };\n      return _react[\"default\"].createElement(\"div\", {\n        className: this.getContainerClassName(),\n        style: style,\n        id: id\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-tabset-width-observer\",\n        ref: this.resizeTarget\n      }), _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-tabset\"\n      }, _react[\"default\"].createElement(\"ul\", {\n        className: this.getInnerContainerClassName(),\n        role: \"tablist\",\n        onKeyDown: this.handleKeyPressed,\n        onScroll: this.updateButtonsVisibility,\n        ref: this.tabsetRef\n      }, _react[\"default\"].createElement(_context.Provider, {\n        value: context\n      }, children)), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: showButtons\n      }, _react[\"default\"].createElement(_ButtonGroup[\"default\"], {\n        className: \"rainbow-tabset_button-group\"\n      }, _react[\"default\"].createElement(_ButtonIcon[\"default\"], {\n        className: \"rainbow-tabset_button-icon\",\n        icon: _react[\"default\"].createElement(_leftThinChevron[\"default\"], null),\n        disabled: this.isLeftButtonDisabled(),\n        onClick: this.handleLeftButtonClick,\n        assistiveText: \"previus tab button\",\n        variant: \"border-filled\"\n      }), _react[\"default\"].createElement(_ButtonIcon[\"default\"], {\n        className: \"rainbow-tabset_button-icon\",\n        icon: _react[\"default\"].createElement(_rightThinChevron[\"default\"], null),\n        disabled: this.isRightButtonDisabled(),\n        onClick: this.handleRightButtonClick,\n        assistiveText: \"next tab button\",\n        variant: \"border-filled\"\n      })))));\n    }\n  }]);\n  return Tabset;\n}(_react.Component);\n\nexports[\"default\"] = Tabset;\nTabset.propTypes = {\n  /** The name of the tab that is selected. It must match the name of the tab. */\n  activeTabName: _propTypes[\"default\"].node,\n\n  /** Action fired when an item is selected.\n   * The event params include the `name` of the selected item. */\n  onSelect: _propTypes[\"default\"].func,\n\n  /** If true, the tabs will grow to use all the available space.\n   * This value defaults to false. */\n  fullWidth: _propTypes[\"default\"].bool,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node\n};\nTabset.defaultProps = {\n  activeTabName: undefined,\n  onSelect: function onSelect() {},\n  fullWidth: false,\n  className: undefined,\n  style: undefined,\n  children: null,\n  id: undefined\n};","map":null,"metadata":{},"sourceType":"script"}