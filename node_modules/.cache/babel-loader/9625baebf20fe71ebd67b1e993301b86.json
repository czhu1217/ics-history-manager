{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _chart = _interopRequireDefault(require(\"chart.js\"));\n\nvar _resolveOptions = _interopRequireDefault(require(\"./resolveOptions\"));\n\nvar _resolveDatasets = _interopRequireDefault(require(\"./resolveDatasets\"));\n\nrequire(\"./styles.css\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * The Chart components are based on Charts.js an open source HTML5 based charting library.\n * You can learn more about it here:\n * @category DataView\n */\n\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Chart);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Chart).call(this, props));\n    _this.chartRef = _react[\"default\"].createRef();\n    _this.datasets = [];\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Chart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var children = this.props.children;\n      this.datasets = (0, _resolveDatasets[\"default\"])(children);\n      this.renderChart();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var children = this.props.children;\n      this.datasets = (0, _resolveDatasets[\"default\"])(children);\n      this.updateChart();\n    }\n  }, {\n    key: \"getContainerClassNames\",\n    value: function getContainerClassNames() {\n      var className = this.props.className;\n      return (0, _classnames[\"default\"])('rainbow-chart', className);\n    }\n  }, {\n    key: \"updateChart\",\n    value: function updateChart() {\n      var _this$props = this.props,\n          labels = _this$props.labels,\n          conditions = (0, _objectWithoutProperties2[\"default\"])(_this$props, [\"labels\"]);\n      this.chartInstance.data = {\n        labels: labels,\n        datasets: this.datasets\n      };\n      this.chartInstance.options = (0, _resolveOptions[\"default\"])(_objectSpread({}, conditions));\n      this.chartInstance.update();\n    }\n  }, {\n    key: \"renderChart\",\n    value: function renderChart() {\n      var _this$props2 = this.props,\n          type = _this$props2.type,\n          labels = _this$props2.labels,\n          conditions = (0, _objectWithoutProperties2[\"default\"])(_this$props2, [\"type\", \"labels\"]);\n      var node = this.chartRef.current;\n      this.chartInstance = new _chart[\"default\"](node, {\n        type: type,\n        data: {\n          labels: labels,\n          datasets: this.datasets\n        },\n        options: (0, _resolveOptions[\"default\"])(_objectSpread({}, conditions))\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = this.props.style;\n      return _react[\"default\"].createElement(\"div\", {\n        className: this.getContainerClassNames(),\n        style: style\n      }, _react[\"default\"].createElement(\"canvas\", {\n        ref: this.chartRef\n      }));\n    }\n  }]);\n  return Chart;\n}(_react.Component);\n\nexports[\"default\"] = Chart;\nChart.propTypes = {\n  /** The type of chart to draw. */\n  type: _propTypes[\"default\"].oneOf(['bar', 'horizontalBar', 'line', 'radar', 'pie', 'doughnut', 'polarArea', 'bubble']).isRequired,\n\n  /** Defines the names of the sections for the corresponding values. */\n  labels: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].string).isRequired,\n\n  /** Determines whether to show the stacked bars in a bar chart. */\n  showStacked: _propTypes[\"default\"].bool,\n\n  /** Defines if the legend is shown. */\n  showLegend: _propTypes[\"default\"].bool,\n\n  /** The position of the legend. */\n  legendPosition: _propTypes[\"default\"].oneOf(['top', 'bottom', 'right', 'left']),\n\n  /** Determines whether it should perform animations when rendering the chart,\n   * this would improve general performance\n   * and is recommended for high data volumes charts. */\n  disableAnimations: _propTypes[\"default\"].bool,\n\n  /** Determines whether to draw the lines that join the dots in a line chart,\n   * is recommended for high data volumes charts. */\n  disableLines: _propTypes[\"default\"].bool,\n\n  /** Determines whether the lines that join the dots in a\n   * line chart should be curved or straight.  */\n  disableCurves: _propTypes[\"default\"].bool,\n\n  /** Maintain the original canvas aspect ratio. */\n  maintainAspectRatio: _propTypes[\"default\"].bool,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node\n};\nChart.defaultProps = {\n  showStacked: false,\n  showLegend: true,\n  legendPosition: 'bottom',\n  disableAnimations: false,\n  disableLines: false,\n  disableCurves: false,\n  maintainAspectRatio: true,\n  className: undefined,\n  style: undefined,\n  children: undefined\n};","map":null,"metadata":{},"sourceType":"script"}