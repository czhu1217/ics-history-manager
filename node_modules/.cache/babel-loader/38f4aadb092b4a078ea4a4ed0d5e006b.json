{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = AccordionSection;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _RenderIf = _interopRequireDefault(require(\"./../RenderIf\"));\n\nvar _utils = require(\"./../../libs/utils\");\n\nvar _context = require(\"./../Accordion/context\");\n\nvar _ButtonIcon = _interopRequireDefault(require(\"./../ButtonIcon\"));\n\nvar _rightArrow = _interopRequireDefault(require(\"./rightArrow\"));\n\nvar _isInArray = _interopRequireDefault(require(\"./isInArray\"));\n\nvar _removeItemFromArray = _interopRequireDefault(require(\"./removeItemFromArray\"));\n\nrequire(\"./styles.css\");\n/* eslint-disable react/prop-types */\n\n\nvar AccordionItem =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(AccordionItem, _Component);\n\n  function AccordionItem(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, AccordionItem);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(AccordionItem).call(this, props));\n    _this.accordionDetailsId = (0, _utils.uniqueId)('accordion-section-details');\n    _this.name = (0, _utils.uniqueId)('accordion-section');\n    _this.handleToggleSection = _this.handleToggleSection.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleFocusSection = _this.handleFocusSection.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.containerRef = _react[\"default\"].createRef();\n    _this.buttonRef = _react[\"default\"].createRef();\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(AccordionItem, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          privateRegisterAccordionSection = _this$props.privateRegisterAccordionSection,\n          disabled = _this$props.disabled;\n\n      if (!disabled) {\n        return setTimeout(function () {\n          return privateRegisterAccordionSection({\n            name: _this2.getCurrentName(),\n            ref: _this2.containerRef.current,\n            focusButtonIcon: _this2.buttonRef.current.focus.bind(_this2)\n          });\n        }, 0);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var privateUnregisterAccordionSection = this.props.privateUnregisterAccordionSection;\n      privateUnregisterAccordionSection(this.getCurrentName());\n    }\n  }, {\n    key: \"getContainerClassNames\",\n    value: function getContainerClassNames() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          disabled = _this$props2.disabled;\n      return (0, _classnames[\"default\"])('rainbow-accordion-section_container', {\n        'rainbow-accordion-section_container--disabled': disabled\n      }, className);\n    }\n  }, {\n    key: \"getCollapsedClassNames\",\n    value: function getCollapsedClassNames() {\n      var isExpanded = this.isExpanded();\n      return (0, _classnames[\"default\"])('rainbow-accordion-section_content', {\n        'rainbow-accordion-section_content--collapsed': !isExpanded\n      });\n    }\n  }, {\n    key: \"getCurrentName\",\n    value: function getCurrentName() {\n      var name = this.props.name;\n      return name || this.name;\n    }\n  }, {\n    key: \"resolveActiveNamesWhenMultiple\",\n    value: function resolveActiveNamesWhenMultiple() {\n      var activeNames = this.props.activeNames;\n      var nameToToggle = this.getCurrentName();\n\n      if (activeNames === undefined) {\n        return [nameToToggle];\n      }\n\n      if ((0, _isInArray[\"default\"])(activeNames, nameToToggle)) {\n        return (0, _removeItemFromArray[\"default\"])(activeNames, nameToToggle);\n      }\n\n      return activeNames.concat([nameToToggle]);\n    }\n  }, {\n    key: \"resolveActiveNames\",\n    value: function resolveActiveNames() {\n      var _this$props3 = this.props,\n          multiple = _this$props3.multiple,\n          activeNames = _this$props3.activeNames;\n      var nameToToggle = this.getCurrentName();\n\n      if (multiple) {\n        return this.resolveActiveNamesWhenMultiple();\n      }\n\n      if (nameToToggle === activeNames) {\n        return '';\n      }\n\n      return nameToToggle;\n    }\n  }, {\n    key: \"handleToggleSection\",\n    value: function handleToggleSection(event) {\n      var _this$props4 = this.props,\n          disabled = _this$props4.disabled,\n          privateOnToggleSection = _this$props4.privateOnToggleSection;\n\n      if (!disabled) {\n        privateOnToggleSection(event, this.resolveActiveNames());\n      }\n    }\n  }, {\n    key: \"handleFocusSection\",\n    value: function handleFocusSection() {\n      var _this$props5 = this.props,\n          disabled = _this$props5.disabled,\n          privateOnFocusSection = _this$props5.privateOnFocusSection;\n\n      if (!disabled) {\n        privateOnFocusSection(this.getCurrentName());\n      }\n    }\n  }, {\n    key: \"handleKeyPressed\",\n    value: function handleKeyPressed(event) {\n      var _this$props6 = this.props,\n          disabled = _this$props6.disabled,\n          privateOnKeyPressed = _this$props6.privateOnKeyPressed;\n\n      if (!disabled) {\n        privateOnKeyPressed(event);\n      }\n    }\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded() {\n      var _this$props7 = this.props,\n          activeNames = _this$props7.activeNames,\n          multiple = _this$props7.multiple;\n      var currentName = this.getCurrentName();\n\n      if (multiple && Array.isArray(activeNames)) {\n        return (0, _isInArray[\"default\"])(activeNames, currentName);\n      }\n\n      return activeNames === currentName;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props8 = this.props,\n          style = _this$props8.style,\n          disabled = _this$props8.disabled,\n          children = _this$props8.children,\n          label = _this$props8.label,\n          icon = _this$props8.icon,\n          assistiveText = _this$props8.assistiveText;\n      var isExpanded = this.isExpanded();\n      return _react[\"default\"].createElement(\"li\", {\n        className: this.getContainerClassNames(),\n        style: style,\n        disabled: disabled,\n        ref: this.containerRef\n      }, _react[\"default\"].createElement(\"section\", null, _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-accordion-section_summary\"\n      }, _react[\"default\"].createElement(\"h3\", {\n        className: \"rainbow-accordion-section_summary-heading\"\n      }, _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!icon\n      }, _react[\"default\"].createElement(\"span\", {\n        className: \"rainbow-accordion-section_summary-icon\"\n      }, icon)), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!label\n      }, _react[\"default\"].createElement(\"span\", {\n        title: \"Accordion Label\"\n      }, label))), _react[\"default\"].createElement(_ButtonIcon[\"default\"], {\n        size: \"small\",\n        disabled: disabled,\n        onClick: this.handleToggleSection,\n        onFocus: this.handleFocusSection,\n        onKeyDown: this.handleKeyPressed,\n        assistiveText: assistiveText,\n        ariaControls: this.accordionDetailsId,\n        ariaExpanded: isExpanded,\n        ref: this.buttonRef,\n        icon: _react[\"default\"].createElement(_rightArrow[\"default\"], {\n          isExpanded: isExpanded,\n          disabled: disabled\n        })\n      })), _react[\"default\"].createElement(\"div\", {\n        \"aria-hidden\": !isExpanded,\n        className: this.getCollapsedClassNames(),\n        id: this.accordionDetailsId\n      }, children)));\n    }\n  }]);\n  return AccordionItem;\n}(_react.Component);\n/**\n * An AccordionSection is single section that is nested in the Accordion component.\n * @category Layout\n */\n\n\nfunction AccordionSection(props) {\n  return _react[\"default\"].createElement(_context.Consumer, null, function (context) {\n    return _react[\"default\"].createElement(AccordionItem, (0, _extends2[\"default\"])({}, props, context));\n  });\n}\n\nAccordionSection.propTypes = {\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** Specifies that the AccordionSection element should be disabled.\n   * This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node,\n\n  /** The text to be displayed as the AccordionSection's label. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The icon to show at the left of the label. */\n  icon: _propTypes[\"default\"].node,\n\n  /** A description for assistive sreen readers. */\n  assistiveText: _propTypes[\"default\"].string,\n\n  /** The name is used to determine which AccordionSection was clicked.\n   * If `name` is not passed it will be generated. */\n  name: _propTypes[\"default\"].string\n};\nAccordionSection.defaultProps = {\n  className: undefined,\n  style: undefined,\n  assistiveText: undefined,\n  disabled: false,\n  children: null,\n  label: undefined,\n  icon: null,\n  name: undefined\n};","map":null,"metadata":{},"sourceType":"script"}