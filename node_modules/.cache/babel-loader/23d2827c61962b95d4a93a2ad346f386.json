{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _RenderIf = _interopRequireDefault(require(\"../RenderIf\"));\n\nvar _Spinner = _interopRequireDefault(require(\"../Spinner\"));\n\nvar _label = _interopRequireDefault(require(\"./label\"));\n\nvar _rightElement = _interopRequireDefault(require(\"./rightElement\"));\n\nvar _selectedValue = _interopRequireDefault(require(\"./selectedValue\"));\n\nvar _options = _interopRequireDefault(require(\"./options\"));\n\nvar _helpers = require(\"./helpers\");\n\nvar _utils = require(\"../../libs/utils\");\n\nvar _constants = require(\"../../libs/constants\");\n\nvar _withReduxForm = _interopRequireDefault(require(\"../../libs/hocs/withReduxForm\"));\n\nvar _searchIcon = _interopRequireDefault(require(\"./icons/searchIcon\"));\n\nrequire(\"./styles.css\");\n/* eslint-disable react/no-did-update-set-state, react/no-did-mount-set-state */\n\n\nvar OPTION_HEIGHT = 48;\nvar visibleOptionsMap = {\n  small: 3,\n  medium: 5,\n  large: 8\n};\n/**\n * A Lookup is an autocomplete text input that will search against a database object,\n * it is enhanced by a panel of suggested options.\n * @category Form\n */\n\nvar Lookup =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Lookup, _Component);\n\n  function Lookup(props) {\n    var _this$keyHandlerMap;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Lookup);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Lookup).call(this, props));\n    var normalizedOptions = (0, _helpers.getNormalizedOptions)(props.options || []);\n    _this.state = {\n      searchValue: '',\n      isFocused: false,\n      options: normalizedOptions,\n      focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(normalizedOptions, props.preferredSelectedOption)\n    };\n    _this.inputId = (0, _utils.uniqueId)('lookup-input');\n    _this.errorMessageId = (0, _utils.uniqueId)('error-message');\n    _this.containerRef = _react[\"default\"].createRef();\n    _this.inputRef = _react[\"default\"].createRef();\n    _this.menuRef = _react[\"default\"].createRef();\n    _this.handleSearch = _this.handleSearch.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.clearInput = _this.clearInput.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleChange = _this.handleChange.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleRemoveValue = _this.handleRemoveValue.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleHover = _this.handleHover.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyUpPressed = _this.handleKeyUpPressed.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyDownPressed = _this.handleKeyDownPressed.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyEnterPressed = _this.handleKeyEnterPressed.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.keyHandlerMap = (_this$keyHandlerMap = {}, (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.UP_KEY, _this.handleKeyUpPressed), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.DOWN_KEY, _this.handleKeyDownPressed), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.ENTER_KEY, _this.handleKeyEnterPressed), _this$keyHandlerMap);\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Lookup, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevOptions = prevProps.options,\n          prevPreferredSelectedOption = prevProps.preferredSelectedOption;\n      var _this$props = this.props,\n          options = _this$props.options,\n          preferredSelectedOption = _this$props.preferredSelectedOption;\n\n      if (prevOptions !== options) {\n        var normalizedOptions = (0, _helpers.getNormalizedOptions)(options);\n        this.setState({\n          options: normalizedOptions,\n          focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(normalizedOptions, preferredSelectedOption)\n        });\n      }\n\n      if (prevPreferredSelectedOption !== preferredSelectedOption) {\n        var currentOptions = this.state.options;\n        this.setState({\n          focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(currentOptions, preferredSelectedOption)\n        });\n      }\n    }\n  }, {\n    key: \"getContainerClassNames\",\n    value: function getContainerClassNames() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          error = _this$props2.error;\n      return (0, _classnames[\"default\"])('rainbow-lookup_container', {\n        'rainbow-lookup_container--error': error\n      }, className);\n    }\n  }, {\n    key: \"getInputClassNames\",\n    value: function getInputClassNames() {\n      var isLoading = this.props.isLoading;\n      return (0, _classnames[\"default\"])('rainbow-lookup_input', {\n        'rainbow-lookup_input--loading': isLoading\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this.props.value;\n\n      if ((0, _typeof2[\"default\"])(value) === 'object' && !Array.isArray(value)) {\n        return value;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getErrorMessageId\",\n    value: function getErrorMessageId() {\n      var error = this.props.error;\n\n      if (error) {\n        return this.errorMessageId;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(value) {\n      var _this2 = this;\n\n      var onChange = this.props.onChange;\n      setTimeout(function () {\n        return _this2.containerRef.current.focus();\n      }, 0);\n      this.setState({\n        searchValue: ''\n      });\n      onChange(value);\n    }\n  }, {\n    key: \"handleSearch\",\n    value: function handleSearch(event) {\n      var value = event.target.value;\n      this.setState({\n        searchValue: value\n      });\n      this.fireSearch(value);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      var _this$props3 = this.props,\n          onFocus = _this$props3.onFocus,\n          value = _this$props3.value;\n      this.openMenu();\n      var eventValue = value || null;\n      onFocus(eventValue);\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      var _this$props4 = this.props,\n          onBlur = _this$props4.onBlur,\n          value = _this$props4.value;\n      this.closeMenu();\n      var eventValue = value || null;\n      onBlur(eventValue);\n    }\n  }, {\n    key: \"handleRemoveValue\",\n    value: function handleRemoveValue() {\n      var _this3 = this;\n\n      var _this$props5 = this.props,\n          onChange = _this$props5.onChange,\n          onSearch = _this$props5.onSearch;\n      onChange(null);\n      onSearch('');\n      setTimeout(function () {\n        return _this3.focus();\n      }, 0);\n    }\n  }, {\n    key: \"fireSearch\",\n    value: function fireSearch(value) {\n      var _this$props6 = this.props,\n          onSearch = _this$props6.onSearch,\n          debounce = _this$props6.debounce;\n\n      if (debounce && value) {\n        this.resetTimeout();\n        this.timeout = setTimeout(function () {\n          onSearch(value);\n        }, 500);\n      } else {\n        this.resetTimeout();\n        onSearch(value);\n      }\n    }\n  }, {\n    key: \"clearInput\",\n    value: function clearInput() {\n      var _this4 = this;\n\n      var searchValue = '';\n      this.setState({\n        searchValue: searchValue\n      });\n      this.fireSearch(searchValue);\n      setTimeout(function () {\n        return _this4.focus();\n      }, 0);\n    }\n  }, {\n    key: \"resetTimeout\",\n    value: function resetTimeout() {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n    }\n  }, {\n    key: \"openMenu\",\n    value: function openMenu() {\n      return this.setState({\n        isFocused: true\n      });\n    }\n  }, {\n    key: \"closeMenu\",\n    value: function closeMenu() {\n      var options = this.state.options;\n      var preferredSelectedOption = this.props.preferredSelectedOption;\n      return this.setState({\n        isFocused: false,\n        focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(options, preferredSelectedOption)\n      });\n    }\n  }, {\n    key: \"isMenuOpen\",\n    value: function isMenuOpen() {\n      var _this$state = this.state,\n          searchValue = _this$state.searchValue,\n          isFocused = _this$state.isFocused;\n      var options = this.props.options;\n      var isMenuEmpty = isFocused && !!searchValue && Array.isArray(options) && options.length === 0;\n      var isOpen = isFocused && Array.isArray(options) && !!options.length;\n      return isOpen || isMenuEmpty;\n    }\n  }, {\n    key: \"handleHover\",\n    value: function handleHover(index) {\n      this.setState({\n        focusedItemIndex: index\n      });\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      var searchValue = this.state.searchValue;\n      var keyCode = event.keyCode;\n\n      if (keyCode === _constants.ESCAPE_KEY && !!searchValue) {\n        event.stopPropagation();\n      }\n\n      if ((0, _helpers.isNavigationKey)(keyCode) && this.isMenuOpen()) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.keyHandlerMap[keyCode]) {\n          this.keyHandlerMap[keyCode]();\n        }\n      }\n    }\n  }, {\n    key: \"handleKeyUpPressed\",\n    value: function handleKeyUpPressed() {\n      var _this$state2 = this.state,\n          focusedItemIndex = _this$state2.focusedItemIndex,\n          options = _this$state2.options;\n\n      if (focusedItemIndex > 0) {\n        var prevIndex = focusedItemIndex - 1;\n        var prevFocusedIndex = options[prevIndex].type === 'header' ? focusedItemIndex - 2 : prevIndex;\n\n        if (prevFocusedIndex >= 0) {\n          this.setState({\n            focusedItemIndex: prevFocusedIndex\n          });\n        }\n\n        this.scrollUp(prevFocusedIndex);\n      }\n    }\n  }, {\n    key: \"scrollUp\",\n    value: function scrollUp(prevFocusedIndex) {\n      var options = this.state.options;\n      var size = this.props.size;\n      var menu = this.menuRef.current.getRef();\n      var prevIndex = prevFocusedIndex >= 0 ? prevFocusedIndex : 0;\n      var prevFocusedOption = menu.childNodes[prevIndex];\n      var visibleOptionsAmount = visibleOptionsMap[size] || visibleOptionsMap.medium;\n\n      if (options.length > visibleOptionsAmount && !(0, _helpers.isOptionVisible)(prevFocusedOption, menu)) {\n        this.menuRef.current.scrollTo(OPTION_HEIGHT * prevIndex);\n      }\n    }\n  }, {\n    key: \"handleKeyDownPressed\",\n    value: function handleKeyDownPressed() {\n      var _this$state3 = this.state,\n          focusedItemIndex = _this$state3.focusedItemIndex,\n          options = _this$state3.options;\n      var lastIndex = options.length - 1;\n\n      if (focusedItemIndex < lastIndex) {\n        var nextIndex = focusedItemIndex + 1;\n        var nextFocusedIndex = options[nextIndex].type === 'header' ? focusedItemIndex + 2 : nextIndex;\n\n        if (nextFocusedIndex <= lastIndex) {\n          this.setState({\n            focusedItemIndex: nextFocusedIndex\n          });\n          this.scrollDown(nextFocusedIndex);\n        }\n      }\n    }\n  }, {\n    key: \"scrollDown\",\n    value: function scrollDown(nextFocusedIndex) {\n      var options = this.state.options;\n      var size = this.props.size;\n      var menu = this.menuRef.current.getRef();\n      var nextFocusedOption = menu.childNodes[nextFocusedIndex];\n      var visibleOptionsAmount = visibleOptionsMap[size] || visibleOptionsMap.medium;\n\n      if (options.length > visibleOptionsAmount && !(0, _helpers.isOptionVisible)(nextFocusedOption, menu)) {\n        this.menuRef.current.scrollTo(OPTION_HEIGHT * (nextFocusedIndex - (visibleOptionsAmount - 1)));\n      }\n    }\n  }, {\n    key: \"handleKeyEnterPressed\",\n    value: function handleKeyEnterPressed() {\n      var onChange = this.props.onChange;\n      var focusedItemIndex = this.state.focusedItemIndex;\n      var options = this.state.options;\n      var value = options[focusedItemIndex];\n      this.containerRef.current.focus();\n      this.setState({\n        searchValue: ''\n      });\n      onChange(value);\n    }\n    /**\n     * Sets focus on the element.\n     * @public\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.inputRef.current.focus();\n    }\n    /**\n     * Sets click on the element.\n     * @public\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.inputRef.current.click();\n    }\n    /**\n     * Sets blur on the element.\n     * @public\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.inputRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          style = _this$props7.style,\n          label = _this$props7.label,\n          error = _this$props7.error,\n          size = _this$props7.size,\n          placeholder = _this$props7.placeholder,\n          disabled = _this$props7.disabled,\n          readOnly = _this$props7.readOnly,\n          tabIndex = _this$props7.tabIndex,\n          onClick = _this$props7.onClick,\n          required = _this$props7.required,\n          id = _this$props7.id,\n          name = _this$props7.name,\n          hideLabel = _this$props7.hideLabel,\n          isLoading = _this$props7.isLoading,\n          icon = _this$props7.icon;\n      var _this$state4 = this.state,\n          searchValue = _this$state4.searchValue,\n          focusedItemIndex = _this$state4.focusedItemIndex,\n          options = _this$state4.options;\n      var onDeleteValue = disabled || readOnly ? undefined : this.handleRemoveValue;\n      var isOpenMenu = this.isMenuOpen();\n      var errorMessageId = this.getErrorMessageId();\n      var currentValue = this.getValue();\n      return _react[\"default\"].createElement(\"div\", {\n        id: id,\n        className: this.getContainerClassNames(),\n        style: style,\n        role: \"presentation\",\n        onKeyDown: this.handleKeyDown,\n        ref: this.containerRef,\n        tabIndex: -1\n      }, _react[\"default\"].createElement(_label[\"default\"], {\n        label: label,\n        hideLabel: hideLabel,\n        required: required,\n        inputId: this.inputId,\n        readOnly: readOnly\n      }), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!currentValue\n      }, _react[\"default\"].createElement(_selectedValue[\"default\"], {\n        id: this.inputId,\n        name: name,\n        value: currentValue,\n        tabIndex: tabIndex,\n        onClick: onClick,\n        disabled: disabled,\n        required: required,\n        readOnly: readOnly,\n        errorMessageId: errorMessageId,\n        ref: this.inputRef,\n        onClearValue: onDeleteValue\n      })), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !currentValue\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-lookup_input-container\"\n      }, _react[\"default\"].createElement(_Spinner[\"default\"], {\n        isVisible: isLoading,\n        className: \"rainbow-lookup_spinner\",\n        size: \"x-small\",\n        assistiveText: \"searching\"\n      }), _react[\"default\"].createElement(_rightElement[\"default\"], {\n        showCloseButton: !!searchValue,\n        onClear: this.clearInput,\n        icon: icon\n      }), _react[\"default\"].createElement(\"input\", {\n        id: this.inputId,\n        name: name,\n        type: \"search\",\n        className: this.getInputClassNames(),\n        value: searchValue,\n        placeholder: placeholder,\n        onChange: this.handleSearch,\n        tabIndex: tabIndex,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onClick: onClick,\n        disabled: disabled,\n        readOnly: readOnly,\n        required: required,\n        autoComplete: \"off\",\n        \"aria-describedby\": errorMessageId,\n        ref: this.inputRef\n      }), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: isOpenMenu\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-lookup_options-menu\"\n      }, _react[\"default\"].createElement(_options[\"default\"], {\n        items: options,\n        value: searchValue,\n        onSelectOption: this.handleChange,\n        focusedItemIndex: focusedItemIndex,\n        onHoverOption: this.handleHover,\n        itemHeight: OPTION_HEIGHT,\n        ref: this.menuRef,\n        size: size\n      }))))), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!error\n      }, _react[\"default\"].createElement(\"div\", {\n        id: errorMessageId,\n        className: \"rainbow-lookup_input-error\"\n      }, error)));\n    }\n  }]);\n  return Lookup;\n}(_react.Component);\n\nLookup.propTypes = {\n  /** Text label for the Lookup. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]).isRequired,\n\n  /** A boolean to hide the Lookup label. */\n  hideLabel: _propTypes[\"default\"].bool,\n\n  /** Specifies the selected value of the Lookup. */\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].node, _propTypes[\"default\"].string]),\n    description: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].node, _propTypes[\"default\"].string]),\n    icon: _propTypes[\"default\"].node\n  }), _propTypes[\"default\"].string]),\n\n  /** An array of matched options to show in a menu. */\n  options: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].node, _propTypes[\"default\"].string]),\n    description: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].node, _propTypes[\"default\"].string]),\n    icon: _propTypes[\"default\"].node\n  })),\n\n  /** The name of the Lookup. */\n  name: _propTypes[\"default\"].string,\n\n  /** If set to true the onSearch event is sent when the customer finish typing. */\n  debounce: _propTypes[\"default\"].bool,\n\n  /** If is set to true, then is showed a loading symbol. */\n  isLoading: _propTypes[\"default\"].bool,\n\n  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */\n  placeholder: _propTypes[\"default\"].string,\n\n  /** Specifies that the Lookup must be filled out before submitting the form.\n   * This value defaults to false. */\n  required: _propTypes[\"default\"].bool,\n\n  /** Specifies that the Lookup must be filled out before submitting the form. */\n  error: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Specifies that the Lookup element should be disabled. This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** Specifies that the Lookup is read-only. This value defaults to false. */\n  readOnly: _propTypes[\"default\"].bool,\n\n  /** The icon that appears in the Lookup when the input search is empty.\n   * If not passed by default a search icon will be showed. */\n  icon: _propTypes[\"default\"].node,\n\n  /** The size of the Lookup menu. Options include small, medium, or large.\n   * This value defaults to medium. */\n  size: _propTypes[\"default\"].oneOf(['small', 'medium', 'large']),\n\n  /** Specifies the tab order of an element (when the tab button is used for navigating). */\n  tabIndex: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The action triggered for every key stroke when the customer is typing in the input.\n   * It sent the value/query of the input. This value is normally used for filter/search\n   * for more options. */\n  onSearch: _propTypes[\"default\"].func,\n\n  /**  The action triggered when click/select an option. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element is clicked. */\n  onClick: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element receives focus. */\n  onFocus: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element releases focus. */\n  onBlur: _propTypes[\"default\"].func,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The index of the option that is visual-focus initially */\n  preferredSelectedOption: _propTypes[\"default\"].number\n};\nLookup.defaultProps = {\n  value: undefined,\n  name: undefined,\n  placeholder: null,\n  required: false,\n  error: null,\n  disabled: false,\n  readOnly: false,\n  icon: _react[\"default\"].createElement(_searchIcon[\"default\"], null),\n  size: 'medium',\n  onChange: function onChange() {},\n  tabIndex: undefined,\n  onClick: function onClick() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  className: undefined,\n  style: undefined,\n  id: undefined,\n  hideLabel: false,\n  isLoading: false,\n  options: undefined,\n  onSearch: function onSearch() {},\n  debounce: false,\n  preferredSelectedOption: 0\n};\n\nvar _default = (0, _withReduxForm[\"default\"])(Lookup);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}