{"ast":null,"code":"/**\n    * @license\n    * Copyright 2019 Google LLC. All Rights Reserved.\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    * http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    * =============================================================================\n    */\nimport { loadGraphModel } from \"@tensorflow/tfjs-converter\";\nimport { util, tensor2d, tensor1d } from \"@tensorflow/tfjs-core\";\n\nfunction __awaiter(e, r, n, t) {\n  return new (n || (n = Promise))(function (o, i) {\n    function a(e) {\n      try {\n        c(t.next(e));\n      } catch (e) {\n        i(e);\n      }\n    }\n\n    function u(e) {\n      try {\n        c(t.throw(e));\n      } catch (e) {\n        i(e);\n      }\n    }\n\n    function c(e) {\n      e.done ? o(e.value) : new n(function (r) {\n        r(e.value);\n      }).then(a, u);\n    }\n\n    c((t = t.apply(e, r || [])).next());\n  });\n}\n\nfunction __generator(e, r) {\n  var n,\n      t,\n      o,\n      i,\n      a = {\n    label: 0,\n    sent: function sent() {\n      if (1 & o[0]) throw o[1];\n      return o[1];\n    },\n    trys: [],\n    ops: []\n  };\n  return i = {\n    next: u(0),\n    throw: u(1),\n    return: u(2)\n  }, \"function\" == typeof Symbol && (i[Symbol.iterator] = function () {\n    return this;\n  }), i;\n\n  function u(i) {\n    return function (u) {\n      return function (i) {\n        if (n) throw new TypeError(\"Generator is already executing.\");\n\n        for (; a;) {\n          try {\n            if (n = 1, t && (o = 2 & i[0] ? t.return : i[0] ? t.throw || ((o = t.return) && o.call(t), 0) : t.next) && !(o = o.call(t, i[1])).done) return o;\n\n            switch (t = 0, o && (i = [2 & i[0], o.value]), i[0]) {\n              case 0:\n              case 1:\n                o = i;\n                break;\n\n              case 4:\n                return a.label++, {\n                  value: i[1],\n                  done: !1\n                };\n\n              case 5:\n                a.label++, t = i[1], i = [0];\n                continue;\n\n              case 7:\n                i = a.ops.pop(), a.trys.pop();\n                continue;\n\n              default:\n                if (!(o = (o = a.trys).length > 0 && o[o.length - 1]) && (6 === i[0] || 2 === i[0])) {\n                  a = 0;\n                  continue;\n                }\n\n                if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {\n                  a.label = i[1];\n                  break;\n                }\n\n                if (6 === i[0] && a.label < o[1]) {\n                  a.label = o[1], o = i;\n                  break;\n                }\n\n                if (o && a.label < o[2]) {\n                  a.label = o[2], a.ops.push(i);\n                  break;\n                }\n\n                o[2] && a.ops.pop(), a.trys.pop();\n                continue;\n            }\n\n            i = r.call(e, a);\n          } catch (e) {\n            i = [6, e], t = 0;\n          } finally {\n            n = o = 0;\n          }\n        }\n\n        if (5 & i[0]) throw i[1];\n        return {\n          value: i[0] ? i[1] : void 0,\n          done: !0\n        };\n      }([i, u]);\n    };\n  }\n}\n\nvar stringToChars = function stringToChars(e) {\n  for (var r = [], n = 0, t = e; n < t.length; n++) {\n    var o = t[n];\n    r.push(o);\n  }\n\n  return r;\n},\n    TrieNode = function () {\n  return function () {\n    this.parent = null, this.children = {}, this.end = !1, this.word = [[], 0, 0];\n  };\n}(),\n    Trie = function () {\n  function e() {\n    this.root = new TrieNode();\n  }\n\n  return e.prototype.insert = function (e, r, n) {\n    for (var t = this.root, o = stringToChars(e), i = 0; i < o.length; i++) {\n      t.children[o[i]] || (t.children[o[i]] = new TrieNode(), t.children[o[i]].parent = t, t.children[o[i]].word[0] = t.word[0].concat(o[i])), t = t.children[o[i]], i === o.length - 1 && (t.end = !0, t.word[1] = r, t.word[2] = n);\n    }\n  }, e.prototype.commonPrefixSearch = function (e) {\n    for (var r = [], n = this.root.children[e[0]], t = 0; t < e.length && n; t++) {\n      n.end && r.push(n.word), n = n.children[e[t + 1]];\n    }\n\n    return r.length || r.push([[e[0]], 0, 0]), r;\n  }, e;\n}(),\n    separator = \"▁\";\n\nfunction processInput(e) {\n  var r = e.normalize(\"NFKC\");\n  return separator + r.replace(/ /g, separator);\n}\n\nvar RESERVED_SYMBOLS_COUNT = 6,\n    Tokenizer = function () {\n  function e(e) {\n    this.vocabulary = e, this.trie = new Trie();\n\n    for (var r = RESERVED_SYMBOLS_COUNT; r < this.vocabulary.length; r++) {\n      this.trie.insert(this.vocabulary[r][0], this.vocabulary[r][1], r);\n    }\n  }\n\n  return e.prototype.encode = function (e) {\n    var r = [],\n        n = [],\n        t = [];\n    e = processInput(e);\n\n    for (var o = stringToChars(e), i = 0; i <= o.length; i++) {\n      r.push({}), n.push(0), t.push(0);\n    }\n\n    for (i = 0; i < o.length; i++) {\n      for (var a = this.trie.commonPrefixSearch(o.slice(i)), u = 0; u < a.length; u++) {\n        var c = a[u],\n            s = {\n          key: c[0],\n          score: c[1],\n          index: c[2]\n        };\n        null == r[i + (l = c[0].length)][i] && (r[i + l][i] = []), r[i + l][i].push(s);\n      }\n    }\n\n    for (var l = 0; l <= o.length; l++) {\n      for (var h in r[l]) {\n        var f = r[l][h];\n\n        for (u = 0; u < f.length; u++) {\n          var d = f[u],\n              p = d.score + t[l - d.key.length];\n          (0 === t[l] || p >= t[l]) && (t[l] = p, n[l] = f[u].index);\n        }\n      }\n    }\n\n    for (var v = [], _ = n.length - 1; _ > 0;) {\n      v.push(n[_]), _ -= this.vocabulary[n[_]][0].length;\n    }\n\n    var g = [],\n        w = !1;\n\n    for (i = 0; i < v.length; i++) {\n      var y = v[i];\n      w && 0 === y || g.push(y), w = 0 === y;\n    }\n\n    return g.reverse();\n  }, e;\n}(),\n    BASE_PATH = \"https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/\";\n\nfunction load() {\n  return __awaiter(this, void 0, void 0, function () {\n    var e;\n    return __generator(this, function (r) {\n      switch (r.label) {\n        case 0:\n          return [4, (e = new UniversalSentenceEncoder()).load()];\n\n        case 1:\n          return r.sent(), [2, e];\n      }\n    });\n  });\n}\n\nfunction loadTokenizer(e) {\n  return __awaiter(this, void 0, void 0, function () {\n    var r;\n    return __generator(this, function (n) {\n      switch (n.label) {\n        case 0:\n          return [4, loadVocabulary(e)];\n\n        case 1:\n          return r = n.sent(), [2, new Tokenizer(r)];\n      }\n    });\n  });\n}\n\nfunction loadVocabulary(e) {\n  return void 0 === e && (e = BASE_PATH + \"vocab.json\"), __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (r) {\n      switch (r.label) {\n        case 0:\n          return [4, util.fetch(e)];\n\n        case 1:\n          return [2, r.sent().json()];\n      }\n    });\n  });\n}\n\nvar UniversalSentenceEncoder = function () {\n  function e() {}\n\n  return e.prototype.loadModel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (e) {\n        return [2, loadGraphModel(BASE_PATH + \"model.json\")];\n      });\n    });\n  }, e.prototype.load = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e, r, n;\n      return __generator(this, function (t) {\n        switch (t.label) {\n          case 0:\n            return [4, Promise.all([this.loadModel(), loadVocabulary()])];\n\n          case 1:\n            return e = t.sent(), r = e[0], n = e[1], this.model = r, this.tokenizer = new Tokenizer(n), [2];\n        }\n      });\n    });\n  }, e.prototype.embed = function (e) {\n    return __awaiter(this, void 0, void 0, function () {\n      var r,\n          n,\n          t,\n          o,\n          i,\n          a,\n          u,\n          c = this;\n      return __generator(this, function (s) {\n        switch (s.label) {\n          case 0:\n            for (\"string\" == typeof e && (e = [e]), r = e.map(function (e) {\n              return c.tokenizer.encode(e);\n            }), n = r.map(function (e, r) {\n              return e.map(function (e, n) {\n                return [r, n];\n              });\n            }), t = [], o = 0; o < n.length; o++) {\n              t = t.concat(n[o]);\n            }\n\n            return i = tensor2d(t, [t.length, 2], \"int32\"), a = tensor1d(util.flatten(r), \"int32\"), [4, this.model.executeAsync({\n              indices: i,\n              values: a\n            })];\n\n          case 1:\n            return u = s.sent(), i.dispose(), a.dispose(), [2, u];\n        }\n      });\n    });\n  }, e;\n}();\n\nexport { Tokenizer, UniversalSentenceEncoder, load, loadTokenizer };","map":null,"metadata":{},"sourceType":"module"}