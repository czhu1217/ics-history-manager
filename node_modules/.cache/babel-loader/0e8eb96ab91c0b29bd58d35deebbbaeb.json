{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _autosize = _interopRequireDefault(require(\"autosize\"));\n\nvar _withReduxForm = _interopRequireDefault(require(\"./../../libs/hocs/withReduxForm\"));\n\nvar _utils = require(\"./../../libs/utils\");\n\nvar _RenderIf = _interopRequireDefault(require(\"../RenderIf\"));\n\nvar _label = _interopRequireDefault(require(\"./label\"));\n\nrequire(\"./styles.css\");\n/**\n * Textarea inputs are used for freeform data entry.\n * @category Form\n */\n\n\nvar Textarea =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Textarea, _Component);\n\n  function Textarea(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Textarea);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Textarea).call(this, props));\n    _this.textareaRef = _react[\"default\"].createRef();\n    _this.textareaId = (0, _utils.uniqueId)('textarea');\n    _this.inlineTextLabelId = (0, _utils.uniqueId)('inline-text-label');\n    _this.errorMessageId = (0, _utils.uniqueId)('error-message');\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Textarea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var grow = this.props.grow;\n\n      if (grow) {\n        return (0, _autosize[\"default\"])(this.textareaRef.current);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getContainerClassNames\",\n    value: function getContainerClassNames() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          error = _this$props.error;\n      return (0, _classnames[\"default\"])('rainbow-textarea_container', {\n        'rainbow-textarea--error': error\n      }, className);\n    }\n  }, {\n    key: \"getInlineTextLabelId\",\n    value: function getInlineTextLabelId() {\n      var bottomHelpText = this.props.bottomHelpText;\n\n      if (bottomHelpText) {\n        return this.inlineTextLabelId;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getErrorMessageId\",\n    value: function getErrorMessageId() {\n      var error = this.props.error;\n\n      if (error) {\n        return this.errorMessageId;\n      }\n\n      return undefined;\n    }\n    /**\n     * Sets focus on the element.\n     * @public\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.textareaRef.current.focus();\n    }\n    /**\n     * Sets click on the element.\n     * @public\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.textareaRef.current.click();\n    }\n    /**\n     * Sets blur on the element.\n     * @public\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.textareaRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          style = _this$props2.style,\n          onChange = _this$props2.onChange,\n          onClick = _this$props2.onClick,\n          onFocus = _this$props2.onFocus,\n          onBlur = _this$props2.onBlur,\n          onPaste = _this$props2.onPaste,\n          value = _this$props2.value,\n          readOnly = _this$props2.readOnly,\n          label = _this$props2.label,\n          error = _this$props2.error,\n          placeholder = _this$props2.placeholder,\n          disabled = _this$props2.disabled,\n          maxLength = _this$props2.maxLength,\n          minLength = _this$props2.minLength,\n          bottomHelpText = _this$props2.bottomHelpText,\n          required = _this$props2.required,\n          rows = _this$props2.rows,\n          id = _this$props2.id,\n          hideLabel = _this$props2.hideLabel,\n          name = _this$props2.name;\n      return _react[\"default\"].createElement(\"div\", {\n        className: this.getContainerClassNames(),\n        style: style,\n        id: id\n      }, _react[\"default\"].createElement(_label[\"default\"], {\n        label: label,\n        hideLabel: hideLabel,\n        required: required,\n        textareaId: this.textareaId,\n        readOnly: readOnly,\n        id: this.getInlineTextLabelId()\n      }), _react[\"default\"].createElement(\"textarea\", {\n        id: this.textareaId,\n        className: \"rainbow-textarea\",\n        name: name,\n        placeholder: placeholder,\n        disabled: disabled,\n        required: required,\n        maxLength: maxLength,\n        minLength: minLength,\n        onChange: onChange,\n        onClick: onClick,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onPaste: onPaste,\n        readOnly: readOnly,\n        rows: rows,\n        value: value,\n        \"aria-labelledby\": this.getInlineTextLabelId(),\n        \"aria-describedby\": this.getErrorMessageId(),\n        ref: this.textareaRef\n      }), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!bottomHelpText\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-textarea_bottom-help\"\n      }, bottomHelpText)), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!error\n      }, _react[\"default\"].createElement(\"div\", {\n        id: this.getErrorMessageId(),\n        className: \"rainbow-textarea_text-error\"\n      }, error)));\n    }\n  }]);\n  return Textarea;\n}(_react.Component);\n\nTextarea.propTypes = {\n  /** Text that describes the desired textarea input. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]).isRequired,\n\n  /** A boolean to hide the textarea label */\n  hideLabel: _propTypes[\"default\"].bool,\n\n  /** The name of the textarea */\n  name: _propTypes[\"default\"].string,\n\n  /** The value of the textarea, also used as the default value during init. */\n  value: _propTypes[\"default\"].string,\n\n  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */\n  placeholder: _propTypes[\"default\"].string,\n\n  /** The maximum number of characters allowed in the textarea. */\n  maxLength: _propTypes[\"default\"].number,\n\n  /** The minimum number of characters allowed in the textarea. */\n  minLength: _propTypes[\"default\"].number,\n\n  /** This make to textarea grow. This value defaults to false. */\n  grow: _propTypes[\"default\"].bool,\n\n  /** Shows the help message below the textarea. */\n  bottomHelpText: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Specifies that the textarea field must be filled out before submitting the form.\n   * This value defaults to false. */\n  required: _propTypes[\"default\"].bool,\n\n  /** Specifies that the textarea field must be filled out before submitting the form. */\n  error: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Specifies that the textarea element should be disabled. This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** The number of visible text lines for the control. The value by default is 3. */\n  rows: _propTypes[\"default\"].number,\n\n  /** Specifies that the textarea field is read-only. This value defaults to false. */\n  readOnly: _propTypes[\"default\"].bool,\n\n  /** The action triggered when a value attribute changes. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element is clicked. */\n  onClick: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element receives focus. */\n  onFocus: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element releases focus. */\n  onBlur: _propTypes[\"default\"].func,\n\n  /** Event fired when the user paste on the textarea */\n  onPaste: _propTypes[\"default\"].func,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string\n};\nTextarea.defaultProps = {\n  value: undefined,\n  name: undefined,\n  placeholder: null,\n  maxLength: undefined,\n  minLength: undefined,\n  grow: false,\n  bottomHelpText: null,\n  required: false,\n  error: null,\n  disabled: false,\n  rows: 3,\n  readOnly: false,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  onPaste: function onPaste() {},\n  className: undefined,\n  style: undefined,\n  id: undefined,\n  hideLabel: false\n};\n\nvar _default = (0, _withReduxForm[\"default\"])(Textarea);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}