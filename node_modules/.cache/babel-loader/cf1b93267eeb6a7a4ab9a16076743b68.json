{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\cindy\\\\Documents\\\\GitHub\\\\todo-list-icon-classification-with-tensorflow-js\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\cindy\\\\Documents\\\\GitHub\\\\todo-list-icon-classification-with-tensorflow-js\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\cindy\\\\Documents\\\\GitHub\\\\todo-list-icon-classification-with-tensorflow-js\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\cindy\\\\Documents\\\\GitHub\\\\todo-list-icon-classification-with-tensorflow-js\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\cindy\\\\Documents\\\\GitHub\\\\todo-list-icon-classification-with-tensorflow-js\\\\src\\\\index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Card } from \"react-rainbow-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTasks } from \"@fortawesome/free-solid-svg-icons\";\nimport * as use from \"@tensorflow-models/universal-sentence-encoder\";\nimport UUID from \"uuidjs\";\nimport _ from \"lodash\";\nimport Task from \"./Task\";\nimport NewTask from \"./NewTask\";\nimport { trainModel } from \"./suggestions/model\";\nimport Loader from \"./Loader\";\nvar iconContainerStyles = {\n  width: \"2.5rem\",\n  height: \"2.5rem\"\n};\n\nvar App = function App() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      tasks = _useState2[0],\n      setTasks = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      model = _useState4[0],\n      setModel = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      encoder = _useState6[0],\n      setEncoder = _useState6[1];\n\n  useEffect(function () {\n    var loadModel = function loadModel() {\n      var sentenceEncoder, trainedModel;\n      return _regeneratorRuntime.async(function loadModel$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(use.load());\n\n            case 2:\n              sentenceEncoder = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(trainModel(sentenceEncoder));\n\n            case 5:\n              trainedModel = _context.sent;\n              setEncoder(sentenceEncoder);\n              setModel(trainedModel);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    loadModel();\n  }, []);\n\n  var handleSaveTask = function handleSaveTask(task) {\n    var taskId = UUID.generate();\n    var taskData = {\n      id: taskId,\n      name: task.name,\n      icon: task.icon,\n      isComplete: false\n    };\n    setTasks(_objectSpread({}, tasks, _defineProperty({}, taskId, taskData)));\n  };\n\n  var completeTask = function completeTask(taskId) {\n    var task = tasks[taskId];\n    task.isComplete = true;\n    setTasks(_objectSpread({}, tasks, _defineProperty({}, taskId, task)));\n  };\n\n  var undoCompleteTask = function undoCompleteTask(taskId) {\n    var task = tasks[taskId];\n    task.isComplete = false;\n    setTasks(_objectSpread({}, tasks, _defineProperty({}, taskId, task)));\n  };\n\n  var removeTask = function removeTask(taskId) {\n    var newTasks = _.omit(tasks, [taskId]);\n\n    setTasks(newTasks);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"rainbow-m-around_x-large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, model === null && React.createElement(\"div\", {\n    id: \"loss-cont\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(Card, {\n    title: \"The Cute List\",\n    icon: React.createElement(\"span\", {\n      className: \"rainbow-background-color_success rainbow-border-radius_circle rainbow-align-content_center\",\n      style: iconContainerStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faTasks,\n      size: \"lg\",\n      className: \"rainbow-color_white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, model === null && React.createElement(Loader, {\n    text: \"Preparing suggestions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), model !== null && React.createElement(\"div\", {\n    className: \"rainbow-p-around_x-large rainbow-align-content_center rainbow-flex_column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(NewTask, {\n    onSaveTask: handleSaveTask,\n    model: model,\n    encoder: encoder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), Object.values(tasks).map(function (t) {\n    return React.createElement(Task, {\n      key: t.id,\n      id: t.id,\n      name: t.name,\n      icon: t.icon,\n      isComplete: t.isComplete,\n      onComplete: completeTask,\n      onUndo: undoCompleteTask,\n      onRemove: removeTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n  }))));\n};\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["C:/Users/cindy/Documents/GitHub/todo-list-icon-classification-with-tensorflow-js/src/index.js"],"names":["React","useState","useEffect","ReactDOM","Card","FontAwesomeIcon","faTasks","use","UUID","_","Task","NewTask","trainModel","Loader","iconContainerStyles","width","height","App","tasks","setTasks","model","setModel","encoder","setEncoder","loadModel","load","sentenceEncoder","trainedModel","handleSaveTask","task","taskId","generate","taskData","id","name","icon","isComplete","completeTask","undoCompleteTask","removeTask","newTasks","omit","Object","values","map","t","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Card } from \"react-rainbow-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTasks } from \"@fortawesome/free-solid-svg-icons\";\r\nimport * as use from \"@tensorflow-models/universal-sentence-encoder\";\r\nimport UUID from \"uuidjs\";\r\nimport _ from \"lodash\";\r\nimport Task from \"./Task\";\r\nimport NewTask from \"./NewTask\";\r\nimport { trainModel } from \"./suggestions/model\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst iconContainerStyles = {\r\n  width: \"2.5rem\",\r\n  height: \"2.5rem\"\r\n};\r\n\r\nconst App = () => {\r\n  const [tasks, setTasks] = useState({});\r\n  const [model, setModel] = useState(null);\r\n  const [encoder, setEncoder] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadModel = async () => {\r\n      const sentenceEncoder = await use.load();\r\n      const trainedModel = await trainModel(sentenceEncoder);\r\n      setEncoder(sentenceEncoder);\r\n      setModel(trainedModel);\r\n    };\r\n    loadModel();\r\n  }, []);\r\n\r\n  const handleSaveTask = task => {\r\n    const taskId = UUID.generate();\r\n    const taskData = {\r\n      id: taskId,\r\n      name: task.name,\r\n      icon: task.icon,\r\n      isComplete: false\r\n    };\r\n    setTasks({\r\n      ...tasks,\r\n      [taskId]: taskData\r\n    });\r\n  };\r\n\r\n  const completeTask = taskId => {\r\n    const task = tasks[taskId];\r\n    task.isComplete = true;\r\n    setTasks({\r\n      ...tasks,\r\n      [taskId]: task\r\n    });\r\n  };\r\n\r\n  const undoCompleteTask = taskId => {\r\n    const task = tasks[taskId];\r\n    task.isComplete = false;\r\n    setTasks({\r\n      ...tasks,\r\n      [taskId]: task\r\n    });\r\n  };\r\n\r\n  const removeTask = taskId => {\r\n    const newTasks = _.omit(tasks, [taskId]);\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  return (\r\n    <div className=\"rainbow-m-around_x-large\">\r\n      {model === null && <div id=\"loss-cont\" />}\r\n      <Card\r\n        title=\"The Cute List\"\r\n        icon={\r\n          <span\r\n            className=\"rainbow-background-color_success rainbow-border-radius_circle rainbow-align-content_center\"\r\n            style={iconContainerStyles}\r\n          >\r\n            <FontAwesomeIcon\r\n              icon={faTasks}\r\n              size=\"lg\"\r\n              className=\"rainbow-color_white\"\r\n            />\r\n          </span>\r\n        }\r\n      >\r\n        {model === null && <Loader text=\"Preparing suggestions\" />}\r\n        {model !== null && (\r\n          <div className=\"rainbow-p-around_x-large rainbow-align-content_center rainbow-flex_column\">\r\n            <NewTask\r\n              onSaveTask={handleSaveTask}\r\n              model={model}\r\n              encoder={encoder}\r\n            />\r\n            {Object.values(tasks).map(t => (\r\n              <Task\r\n                key={t.id}\r\n                id={t.id}\r\n                name={t.name}\r\n                icon={t.icon}\r\n                isComplete={t.isComplete}\r\n                onComplete={completeTask}\r\n                onUndo={undoCompleteTask}\r\n                onRemove={removeTask}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"]},"metadata":{},"sourceType":"module"}