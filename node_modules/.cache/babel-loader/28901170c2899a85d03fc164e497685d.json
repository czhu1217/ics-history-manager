{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = AvatarMenu;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _PrimitiveMenu = _interopRequireDefault(require(\"../PrimitiveMenu\"));\n\nvar _avatarButton = _interopRequireDefault(require(\"./avatarButton\"));\n/**\n * A Avatar Menu offers a list of actions or functions that a user can access.\n */\n\n\nfunction AvatarMenu(props) {\n  var src = props.src,\n      initials = props.initials,\n      icon = props.icon,\n      avatarSize = props.avatarSize,\n      initialsVariant = props.initialsVariant,\n      title = props.title,\n      assistiveText = props.assistiveText,\n      disabled = props.disabled,\n      tabIndex = props.tabIndex,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      children = props.children,\n      rest = (0, _objectWithoutProperties2[\"default\"])(props, [\"src\", \"initials\", \"icon\", \"avatarSize\", \"initialsVariant\", \"title\", \"assistiveText\", \"disabled\", \"tabIndex\", \"onFocus\", \"onBlur\", \"children\"]);\n  return _react[\"default\"].createElement(_PrimitiveMenu[\"default\"], (0, _extends2[\"default\"])({}, rest, {\n    src: src,\n    icon: icon,\n    initials: initials,\n    disabled: disabled,\n    tabIndex: tabIndex,\n    avatarSize: avatarSize,\n    initialsVariant: initialsVariant,\n    title: title,\n    assistiveText: assistiveText,\n    ariaHaspopup: true,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    trigger: _avatarButton[\"default\"]\n  }), children);\n}\n\nAvatarMenu.propTypes = {\n  /** The URL for the image.\n   * It take precedence over the initials and icon. */\n  src: _propTypes[\"default\"].string,\n\n  /** If the record name contains two words, like first and last name,\n   * use the first capitalized letter of each. For records that only have a single word name,\n   * use the first two letters of that word using one capital and one lower case letter. */\n  initials: _propTypes[\"default\"].string,\n\n  /** The fallback icon to show when src and initials are not passed. */\n  icon: _propTypes[\"default\"].node,\n\n  /** The size of the avatar. Valid values are x-small, small, medium, and large.\n   * It take precedence over the icon.\n   * This value defaults to medium. */\n  avatarSize: _propTypes[\"default\"].oneOf(['x-small', 'small', 'medium', 'large']),\n\n  /** The variant of the initials. Only make sense when initials is used. */\n  initialsVariant: _propTypes[\"default\"].oneOf(['default', 'inverse']),\n\n  /** The content of the AvatarMenu. Used to render the menuItem elements\n   * when the AvatarMenu is open. */\n  children: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].arrayOf(_propTypes[\"default\"].node), _propTypes[\"default\"].object]),\n\n  /** The size of the menu. Options include xx-small, x-small, medium, or large.\n   * This value defaults to small. */\n  menuSize: _propTypes[\"default\"].oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),\n\n  /** Determines the alignment of the menu relative to the AvatarMenu.\n   * Available options are: left, center, right, bottom, bottom-left, bottom-right.\n   * This value defaults to left. */\n  menuAlignment: _propTypes[\"default\"].oneOf(['left', 'right', 'bottom', 'center', 'bottom-right', 'bottom-left']),\n\n  /** If is set to true, then is showed a loading symbol. */\n  isLoading: _propTypes[\"default\"].bool,\n\n  /** Displays tooltip text when the mouse moves over the element. */\n  title: _propTypes[\"default\"].string,\n\n  /** A description for assistive sreen readers. */\n  assistiveText: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** Specifies the tab order of an element (when the tab button is used for navigating). */\n  tabIndex: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** If true, the menu is disabled. Disabling the menu prevents users from opening it.\n   * This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool\n};\nAvatarMenu.defaultProps = {\n  src: undefined,\n  initials: undefined,\n  icon: null,\n  avatarSize: 'medium',\n  initialsVariant: 'default',\n  title: undefined,\n  assistiveText: undefined,\n  className: undefined,\n  style: undefined,\n  children: null,\n  menuSize: 'xx-small',\n  menuAlignment: 'left',\n  isLoading: false,\n  id: undefined,\n  disabled: false,\n  tabIndex: undefined\n};","map":null,"metadata":{},"sourceType":"script"}