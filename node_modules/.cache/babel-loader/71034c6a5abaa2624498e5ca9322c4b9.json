{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = PicklistOption;\nexports.Option = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _context = require(\"../Picklist/context\");\n\nvar _icon = _interopRequireDefault(require(\"./icon\"));\n\nrequire(\"./styles.css\");\n/* eslint-disable no-script-url, react/prop-types, jsx-a11y/anchor-is-valid */\n\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nvar Option =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Option, _Component);\n\n  function Option(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Option);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Option).call(this, props));\n    _this.itemRef = _react[\"default\"].createRef();\n    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleHover = _this.handleHover.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Option, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          variant = _this$props.variant,\n          name = _this$props.name,\n          currentValueName = _this$props.currentValueName;\n      var isHeader = variant === 'header';\n\n      if (disabled || isHeader || typeof name !== 'string' || name === currentValueName) {\n        return null;\n      }\n\n      return this.register();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          currentValueName = _this$props2.currentValueName,\n          name = _this$props2.name;\n      var prevCurrentValueName = prevProps.currentValueName;\n\n      if (prevCurrentValueName !== currentValueName) {\n        if (prevCurrentValueName === name && currentValueName !== name) {\n          this.register();\n        } else if (prevCurrentValueName !== name && currentValueName === name) {\n          this.unregister();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      return this.unregister();\n    }\n  }, {\n    key: \"getHeaderClassNames\",\n    value: function getHeaderClassNames() {\n      var className = this.props.className;\n      return (0, _classnames[\"default\"])('rainbow-picklist-option_header', className);\n    }\n  }, {\n    key: \"getItemClassNames\",\n    value: function getItemClassNames() {\n      var _this$props3 = this.props,\n          className = _this$props3.className,\n          activeOptionName = _this$props3.activeOptionName,\n          name = _this$props3.name,\n          currentValueName = _this$props3.currentValueName;\n      return (0, _classnames[\"default\"])('rainbow-picklist-option', {\n        'rainbow-picklist-option_selected': currentValueName === name,\n        'rainbow-picklist-option_active': activeOptionName === name\n      }, className);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      var _this$props4 = this.props,\n          disabled = _this$props4.disabled,\n          privateOnClick = _this$props4.privateOnClick,\n          label = _this$props4.label,\n          name = _this$props4.name,\n          icon = _this$props4.icon,\n          value = _this$props4.value;\n\n      if (disabled) {\n        event.preventDefault();\n        return null;\n      }\n\n      return privateOnClick(event, {\n        label: label,\n        name: name,\n        icon: icon,\n        value: value\n      });\n    }\n  }, {\n    key: \"handleHover\",\n    value: function handleHover(event) {\n      var _this$props5 = this.props,\n          privateOnHover = _this$props5.privateOnHover,\n          disabled = _this$props5.disabled,\n          name = _this$props5.name;\n\n      if (disabled) {\n        return null;\n      }\n\n      return privateOnHover(event, name);\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      var _this2 = this;\n\n      var _this$props6 = this.props,\n          privateRegisterChild = _this$props6.privateRegisterChild,\n          label = _this$props6.label,\n          name = _this$props6.name,\n          icon = _this$props6.icon,\n          value = _this$props6.value;\n      return setTimeout(function () {\n        return privateRegisterChild(_this2.itemRef.current, {\n          label: label,\n          name: name,\n          icon: icon,\n          value: value\n        });\n      }, 0);\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      var _this3 = this;\n\n      var privateUnregisterChild = this.props.privateUnregisterChild;\n      return setTimeout(function () {\n        return privateUnregisterChild(_this3.itemRef.current);\n      }, 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          style = _this$props7.style,\n          label = _this$props7.label,\n          title = _this$props7.title,\n          variant = _this$props7.variant,\n          icon = _this$props7.icon,\n          iconPosition = _this$props7.iconPosition,\n          disabled = _this$props7.disabled;\n\n      if (variant === 'header') {\n        return _react[\"default\"].createElement(\"li\", {\n          className: this.getHeaderClassNames(),\n          style: style,\n          title: title,\n          role: \"presentation\",\n          onMouseDown: preventDefault\n        }, _react[\"default\"].createElement(\"span\", {\n          className: \"rainbow-picklist-option_header-label\"\n        }, label));\n      }\n\n      var hasLeftIcon = !!(icon && iconPosition === 'left');\n      var hasRightIcon = !!(icon && iconPosition === 'right');\n      return _react[\"default\"].createElement(\"li\", {\n        className: this.getItemClassNames(),\n        style: style,\n        role: \"presentation\",\n        onMouseDown: this.handleClick,\n        onMouseEnter: this.handleHover\n      }, _react[\"default\"].createElement(\"a\", {\n        href: \"javascript:void(0);\",\n        role: \"menuitem\",\n        \"aria-disabled\": disabled,\n        ref: this.itemRef\n      }, _react[\"default\"].createElement(\"span\", {\n        className: \"rainbow-picklist-option_icon-container\",\n        title: title\n      }, _react[\"default\"].createElement(_icon[\"default\"], {\n        \"data-id\": \"menu-item-left-icon\",\n        icon: icon,\n        isVisible: hasLeftIcon,\n        position: iconPosition\n      }), label), _react[\"default\"].createElement(_icon[\"default\"], {\n        \"data-id\": \"menu-item-right-icon\",\n        icon: icon,\n        isVisible: hasRightIcon,\n        position: iconPosition\n      })));\n    }\n  }]);\n  return Option;\n}(_react.Component);\n/**\n * Represents a list options in a menu.\n * @category Form\n */\n\n\nexports.Option = Option;\n\nfunction PicklistOption(props) {\n  return _react[\"default\"].createElement(_context.Consumer, null, function (values) {\n    return _react[\"default\"].createElement(Option, (0, _extends2[\"default\"])({}, props, values));\n  });\n}\n\nPicklistOption.propTypes = {\n  /** Text of the PicklistOption. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]).isRequired,\n\n  /** The name of the PicklistOption. */\n  name: _propTypes[\"default\"].string.isRequired,\n\n  /** The variant changes the type of PicklistOption.\n   * Accepted variants include default and header.\n   * This value defaults to default. */\n  variant: _propTypes[\"default\"].oneOf(['default', 'header']),\n\n  /** The icon to show if it is passed. It must be a svg icon or a font icon. */\n  icon: _propTypes[\"default\"].node,\n\n  /** Describes the position of the icon with respect to body. Options include left and right.\n   * This value defaults to left. */\n  iconPosition: _propTypes[\"default\"].oneOf(['left', 'right']),\n\n  /** If true the PicklistOption is not actionable and is shown as disabled. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** Displays tooltip text when the mouse moves over the element. */\n  title: _propTypes[\"default\"].string,\n\n  /** The value of the PicklistOption. */\n  value: _propTypes[\"default\"].object,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nPicklistOption.defaultProps = {\n  name: undefined,\n  variant: 'default',\n  icon: null,\n  iconPosition: 'left',\n  disabled: false,\n  title: undefined,\n  className: undefined,\n  style: undefined,\n  value: undefined\n};","map":null,"metadata":{},"sourceType":"script"}