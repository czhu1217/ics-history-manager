{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _content = _interopRequireDefault(require(\"./content\"));\n\nrequire(\"./styles.css\");\n/**\n * Buttons are clickable items used to perform an action.\n */\n\n\nvar Button =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Button, _Component);\n\n  function Button(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Button);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Button).call(this, props));\n    _this.buttonRef = _react[\"default\"].createRef();\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Button, [{\n    key: \"getVariantClassNames\",\n    value: function getVariantClassNames() {\n      var variant = this.props.variant;\n\n      if (variant === 'base') {\n        return null;\n      }\n\n      return \"rainbow-button--\".concat(variant);\n    }\n  }, {\n    key: \"getClassNames\",\n    value: function getClassNames() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          shaded = _this$props.shaded,\n          variant = _this$props.variant,\n          isLoading = _this$props.isLoading;\n      var isShaded = shaded && (variant === 'neutral' || variant === 'brand' || variant === 'destructive' || variant === 'success');\n      return (0, _classnames[\"default\"])('rainbow-button', this.getVariantClassNames(), {\n        'rainbow-button--shaded': isShaded,\n        'rainbow-button--loading': isLoading && variant !== 'base'\n      }, className);\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      var _this$props2 = this.props,\n          disabled = _this$props2.disabled,\n          isLoading = _this$props2.isLoading;\n      return disabled || isLoading;\n    }\n    /**\n     * Sets focus on the element.\n     * @public\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.buttonRef.current.focus();\n    }\n    /**\n     * Sets click on the element.\n     * @public\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.buttonRef.current.click();\n    }\n    /**\n     * Sets blur on the element.\n     * @public\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.buttonRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          style = _this$props3.style,\n          label = _this$props3.label,\n          children = _this$props3.children,\n          tabIndex = _this$props3.tabIndex,\n          onFocus = _this$props3.onFocus,\n          onBlur = _this$props3.onBlur,\n          onClick = _this$props3.onClick,\n          title = _this$props3.title,\n          type = _this$props3.type,\n          ariaHaspopup = _this$props3.ariaHaspopup,\n          id = _this$props3.id,\n          isLoading = _this$props3.isLoading,\n          variant = _this$props3.variant,\n          ariaPressed = _this$props3.ariaPressed,\n          ariaControls = _this$props3.ariaControls,\n          ariaExpanded = _this$props3.ariaExpanded,\n          onKeyDown = _this$props3.onKeyDown,\n          form = _this$props3.form;\n      return _react[\"default\"].createElement(\"button\", {\n        \"data-id\": \"button-element\",\n        id: id,\n        className: this.getClassNames(),\n        style: style,\n        disabled: this.isDisabled(),\n        tabIndex: tabIndex,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onClick: onClick,\n        title: title,\n        type: type,\n        \"aria-haspopup\": ariaHaspopup,\n        \"aria-controls\": ariaControls,\n        \"aria-expanded\": ariaExpanded,\n        \"aria-pressed\": ariaPressed,\n        onKeyDown: onKeyDown,\n        form: form,\n        ref: this.buttonRef\n      }, _react[\"default\"].createElement(_content[\"default\"], {\n        variant: variant,\n        label: label,\n        isLoading: isLoading\n      }, children));\n    }\n  }]);\n  return Button;\n}(_react.Component);\n\nexports[\"default\"] = Button;\nButton.propTypes = {\n  /** The text to be displayed inside the button. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The content of the button, used to render icon or text elements inside the button.\n   * Children take precedence over label. */\n  children: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].arrayOf(_propTypes[\"default\"].node), _propTypes[\"default\"].object]),\n\n  /** The variant changes the appearance of the button.\n   * Accepted variants include base, neutral, brand, outline-brand, destructive,\n   * success, inverse and border-inverse. */\n  variant: _propTypes[\"default\"].oneOf(['base', 'neutral', 'brand', 'outline-brand', 'destructive', 'success', 'inverse', 'border-inverse']),\n\n  /** Specifies true when the button has a shadow around it.\n   * Only neutral, brand, destructive and success variant can be shaded. */\n  shaded: _propTypes[\"default\"].bool,\n\n  /** Displays tooltip text when the mouse moves over the element. */\n  title: _propTypes[\"default\"].string,\n\n  /** Specifies the type of button. Valid values are button, reset, and submit. */\n  type: _propTypes[\"default\"].oneOf(['button', 'submit', 'reset']),\n\n  /** Specifies whether this button should be displayed in a disabled state.\n   * Disabled buttons can't be clicked. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** Specifies the tab order of an element (when the tab button is used for navigating). */\n  tabIndex: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string]),\n\n  /** The action triggered when the element is clicked. */\n  onClick: _propTypes[\"default\"].func,\n\n  /** The action triggered when a keyboard key is pressed. */\n  onKeyDown: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element receives focus. */\n  onFocus: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element releases focus. */\n  onBlur: _propTypes[\"default\"].func,\n\n  /** Indicates that the element has a popup context menu or sub-level menu. */\n  ariaHaspopup: _propTypes[\"default\"].bool,\n\n  /** A space-separated list of element IDs that\n   * this button controls the contents or presence of. */\n  ariaControls: _propTypes[\"default\"].string,\n\n  /** Indicates whether an element the button controls is expanded or collapsed.\n   * Valid values are 'true' or 'false'. */\n  ariaExpanded: _propTypes[\"default\"].bool,\n\n  /** Indicates that the element has been pressed. */\n  ariaPressed: _propTypes[\"default\"].bool,\n\n  /** It must be the id attribute of a form element that the button is associated with. */\n  form: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** If it is set to true, then a loading symbol is displayed. */\n  isLoading: _propTypes[\"default\"].bool\n};\nButton.defaultProps = {\n  label: undefined,\n  children: null,\n  variant: 'neutral',\n  shaded: false,\n  title: undefined,\n  type: 'button',\n  disabled: false,\n  tabIndex: undefined,\n  onClick: function onClick() {},\n  onKeyDown: function onKeyDown() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  ariaHaspopup: undefined,\n  className: undefined,\n  style: undefined,\n  id: undefined,\n  isLoading: false,\n  ariaPressed: undefined,\n  ariaControls: undefined,\n  ariaExpanded: undefined,\n  form: undefined\n};","map":null,"metadata":{},"sourceType":"script"}