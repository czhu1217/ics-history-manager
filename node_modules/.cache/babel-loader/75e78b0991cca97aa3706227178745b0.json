{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = MapMarker;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _context = require(\"./../GMap/context\");\n\nvar _utils = require(\"./../../libs/utils\");\n\nvar _icon = _interopRequireDefault(require(\"./icon\"));\n\nrequire(\"./styles.css\");\n/* eslint-disable react/prop-types */\n\n\nvar marker = Symbol('marker');\n\nvar Marker =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Marker, _Component);\n\n  function Marker(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Marker);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Marker).call(this, props));\n    _this.getLocationInfo = _this.getLocationInfo.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleMarkerClick = _this.handleMarkerClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.startAnimation = _this.startAnimation.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.stopAnimation = _this.stopAnimation.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.name = (0, _utils.uniqueId)('marker');\n    var label = props.label,\n        description = props.description;\n    _this.state = {\n      label: label,\n      description: description\n    };\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Marker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.map) {\n        this.setMarker();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props = this.props,\n          map = _this$props.map,\n          latitude = _this$props.latitude,\n          longitude = _this$props.longitude;\n\n      if (!this[marker] && map && latitude && longitude) {\n        this.setMarker();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.google.maps.event.removeListener(this.markerListener);\n    }\n  }, {\n    key: \"setMarker\",\n    value: function setMarker() {\n      var _this$props2 = this.props,\n          map = _this$props2.map,\n          latitude = _this$props2.latitude,\n          longitude = _this$props2.longitude,\n          geocoder = _this$props2.geocoder,\n          label = _this$props2.label,\n          description = _this$props2.description;\n      var position = {\n        lat: latitude,\n        lng: longitude\n      };\n      this[marker] = new window.google.maps.Marker({\n        position: position,\n        map: map\n      });\n      this.markerListener = this[marker].addListener('click', this.handleMarkerClick);\n\n      if (!label && !description) {\n        geocoder.geocode({\n          location: position\n        }, this.getLocationInfo);\n      } else if (!this.state.infowindow) {\n        this.setInfoWindow();\n      }\n    }\n  }, {\n    key: \"getLocationInfo\",\n    value: function getLocationInfo(results, status) {\n      if (status === 'OK' && results[0]) {\n        var geoLabel = results[0].address_components[0].long_name;\n        var geoDescription = results[0].formatted_address;\n        var infowindow = new window.google.maps.InfoWindow({\n          content: geoDescription\n        });\n        this.setState({\n          label: geoLabel,\n          description: geoDescription,\n          infowindow: infowindow\n        });\n      }\n    }\n  }, {\n    key: \"setInfoWindow\",\n    value: function setInfoWindow() {\n      var _this$props3 = this.props,\n          description = _this$props3.description,\n          label = _this$props3.label;\n      this.setState({\n        infowindow: new window.google.maps.InfoWindow({\n          content: description || label\n        })\n      });\n    }\n  }, {\n    key: \"getAssistiveAriaLiveText\",\n    value: function getAssistiveAriaLiveText() {\n      var label = this.state.label;\n\n      if (this.isSelected()) {\n        return \"\".concat(label, \" is currently selected\");\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"handleMarkerClick\",\n    value: function handleMarkerClick() {\n      var privateMarkerClick = this.props.privateMarkerClick;\n      var infowindow = this.state.infowindow;\n\n      if (this[marker]) {\n        privateMarkerClick(infowindow, this[marker]);\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      var _this$props4 = this.props,\n          privateOnClick = _this$props4.privateOnClick,\n          latitude = _this$props4.latitude,\n          longitude = _this$props4.longitude;\n      var position = {\n        lat: latitude,\n        lng: longitude\n      };\n\n      if (this[marker]) {\n        this[marker].setAnimation(null);\n        privateOnClick(this.name, position);\n      }\n    }\n  }, {\n    key: \"startAnimation\",\n    value: function startAnimation() {\n      if (this[marker]) {\n        this[marker].setAnimation(window.google.maps.Animation.BOUNCE);\n      }\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      if (this[marker]) {\n        this[marker].setAnimation(null);\n      }\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected() {\n      var selectedMarker = this.props.selectedMarker;\n      return this.name === selectedMarker;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          className = _this$props5.className,\n          style = _this$props5.style,\n          latitude = _this$props5.latitude,\n          longitude = _this$props5.longitude,\n          icon = _this$props5.icon;\n      var _this$state = this.state,\n          label = _this$state.label,\n          description = _this$state.description;\n\n      if (latitude && longitude) {\n        return _react[\"default\"].createElement(\"li\", {\n          className: className,\n          style: style\n        }, _react[\"default\"].createElement(\"span\", {\n          className: \"rainbow-google-map-marker_assistive-aria-live\",\n          \"aria-live\": \"polite\"\n        }, this.getAssistiveAriaLiveText()), _react[\"default\"].createElement(\"button\", {\n          className: \"rainbow-google-map-marker_button\",\n          \"aria-pressed\": this.isSelected(),\n          onClick: this.handleClick,\n          onMouseOver: this.startAnimation,\n          onFocus: this.startAnimation,\n          onMouseLeave: this.stopAnimation,\n          onBlur: this.stopAnimation\n        }, _react[\"default\"].createElement(_icon[\"default\"], {\n          icon: icon\n        }), _react[\"default\"].createElement(\"span\", {\n          className: \"rainbow-google-map-marker_text-container\"\n        }, _react[\"default\"].createElement(\"span\", {\n          className: \"rainbow-google-map-marker_label\"\n        }, label), _react[\"default\"].createElement(\"span\", null, description))));\n      }\n\n      return null;\n    }\n  }]);\n  return Marker;\n}(_react.Component);\n/**\n * The MapMarker component is a single section of information that is nested in the GMap component.\n * This component shows you the detailed information of each location that is displayed in the GMap.\n */\n\n\nfunction MapMarker(props) {\n  return _react[\"default\"].createElement(_context.Consumer, null, function (context) {\n    return _react[\"default\"].createElement(Marker, (0, _extends2[\"default\"])({}, props, context));\n  });\n}\n\nMapMarker.propTypes = {\n  /** The label of the marker. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The description of the marker. */\n  description: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The angular distance of a place north or south of the earth's equator. */\n  latitude: _propTypes[\"default\"].number.isRequired,\n\n  /** The angular distance of a place east or west of the meridian at Greenwich. */\n  longitude: _propTypes[\"default\"].number.isRequired,\n\n  /** The icon to show if it is passed. If not passed a fallback icon will be showed. */\n  icon: _propTypes[\"default\"].node,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nMapMarker.defaultProps = {\n  label: undefined,\n  description: undefined,\n  icon: null,\n  className: undefined,\n  style: undefined\n};","map":null,"metadata":{},"sourceType":"script"}