{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getRowsWithInitalSelectedRows;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _isSelectedRow = _interopRequireDefault(require(\"./isSelectedRow\"));\n\nvar _getCurrentSelectionLength = _interopRequireDefault(require(\"./getCurrentSelectionLength\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction rowKeyExists(indexes, key) {\n  return !!indexes[key];\n}\n\nfunction filterValidKeys(indexes, keys) {\n  return keys.filter(function (key) {\n    return rowKeyExists(indexes, key);\n  });\n}\n\nfunction getRowsWithInitalSelectedRows() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _params$rows = params.rows,\n      rows = _params$rows === void 0 ? [] : _params$rows,\n      selectedRows = params.selectedRows,\n      maxRowSelection = params.maxRowSelection,\n      indexes = params.indexes,\n      _params$selectedRowsK = params.selectedRowsKeys,\n      selectedRowsKeys = _params$selectedRowsK === void 0 ? {} : _params$selectedRowsK;\n\n  if (Array.isArray(selectedRows) && maxRowSelection > 0) {\n    var previousSelectionLength = (0, _getCurrentSelectionLength[\"default\"])(selectedRowsKeys);\n    var validSelectedRowsKeys = filterValidKeys(indexes, selectedRows);\n\n    if (validSelectedRowsKeys.length > maxRowSelection) {\n      console.warn(\"The number of keys in selectedRows for Table component\\n            exceeds the limit defined by maxRowSelection.\");\n      validSelectedRowsKeys = validSelectedRowsKeys.slice(0, maxRowSelection);\n    }\n\n    validSelectedRowsKeys.forEach(function (item) {\n      selectedRowsKeys[item] = true;\n    });\n\n    if (validSelectedRowsKeys.length === maxRowSelection && maxRowSelection > 1) {\n      return rows.map(function (row) {\n        if (!(0, _isSelectedRow[\"default\"])(selectedRowsKeys, row.key)) {\n          return _objectSpread({}, row, {\n            isDisabled: true\n          });\n        }\n\n        return _objectSpread({}, row, {\n          isSelected: true\n        });\n      });\n    }\n\n    if (selectedRows.length < maxRowSelection && previousSelectionLength === maxRowSelection) {\n      return rows.map(function (row) {\n        return _objectSpread({}, row, {\n          isDisabled: false\n        });\n      });\n    }\n\n    return rows.map(function (row) {\n      return _objectSpread({}, row, {\n        isSelected: (0, _isSelectedRow[\"default\"])(selectedRowsKeys, row.key)\n      });\n    });\n  }\n\n  return rows;\n}","map":null,"metadata":{},"sourceType":"script"}