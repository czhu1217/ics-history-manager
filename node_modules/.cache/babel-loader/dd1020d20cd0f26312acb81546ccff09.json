{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getDataToImport;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _ = _interopRequireDefault(require(\"../\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction getDateValue(value) {\n  var date = new Date(value);\n  var isValidDate = !isNaN(date.getTime());\n  return isValidDate ? date : '';\n}\n\nfunction getTypeValue(value, dataType) {\n  switch (dataType.name) {\n    case 'String':\n      return value;\n\n    case 'Number':\n      return !isNaN(Number(value)) ? Number(value) : '';\n\n    case 'Boolean':\n      return !!value;\n\n    case 'Date':\n      return getDateValue(value);\n\n    default:\n      return value || '';\n  }\n}\n\nfunction getNormalizedFieldValue(value, attributeDef) {\n  if (typeof attributeDef === 'function') {\n    return getTypeValue(value, attributeDef);\n  }\n\n  if (typeof attributeDef.type === 'function') {\n    return getTypeValue(value, attributeDef.type);\n  }\n\n  return value || '';\n}\n\nfunction getDataToImport(params) {\n  var actionTypeMap = {\n    'add-records': _[\"default\"].ADD_RECORDS,\n    'merge-records': _[\"default\"].MERGE_RECORDS\n  };\n  var data = params.data,\n      fieldsMap = params.fieldsMap,\n      schema = params.schema,\n      actionOption = params.actionOption,\n      matchField = params.matchField;\n  return {\n    collection: schema.collection,\n    actionType: actionTypeMap[actionOption],\n    mergeByKey: matchField === 'default' ? '' : matchField,\n    data: data.map(function (item) {\n      return _objectSpread({}, Object.keys(fieldsMap).reduce(function (acc, field) {\n        var keys = fieldsMap[field].split(',');\n        var schemaField = schema.attributes[field];\n        var value = keys.reduce(function (accumulator, key) {\n          return \"\".concat(accumulator, \" \").concat(item[key] || '').trim();\n        }, '') || schemaField.defaultTo;\n        return _objectSpread({}, acc, (0, _defineProperty2[\"default\"])({}, field, getNormalizedFieldValue(value, schemaField)));\n      }, {}));\n    })\n  };\n}","map":null,"metadata":{},"sourceType":"script"}