{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _context = require(\"./context\");\n\nvar _constants = require(\"../../libs/constants\");\n\nvar _utils = require(\"./utils\");\n\nvar RIGHT_SIDE = 1;\nvar LEFT_SIDE = -1;\n/**\n * An Accordion is a collection of vertically stacked sections with multiple content areas.\n * Allows a user to toggle the display of a section of content.\n * @category Layout\n */\n\nvar Accordion =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Accordion, _Component);\n\n  function Accordion(props) {\n    var _this$keyHandlerMap;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Accordion);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Accordion).call(this, props));\n    _this.containerRef = _react[\"default\"].createRef();\n    _this.handleToggleSection = _this.handleToggleSection.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleFocusSection = _this.handleFocusSection.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.registerAccordionSection = _this.registerAccordionSection.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.unregisterAccordionSection = _this.unregisterAccordionSection.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.keyHandlerMap = (_this$keyHandlerMap = {}, (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.RIGHT_KEY, function () {\n      return _this.selectAccordionSection(RIGHT_SIDE);\n    }), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.LEFT_KEY, function () {\n      return _this.selectAccordionSection(LEFT_SIDE);\n    }), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.DOWN_KEY, function () {\n      return _this.selectAccordionSection(RIGHT_SIDE);\n    }), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.UP_KEY, function () {\n      return _this.selectAccordionSection(LEFT_SIDE);\n    }), _this$keyHandlerMap);\n    _this.state = {\n      activeNames: props.activeSectionNames,\n      multiple: props.multiple,\n      privateOnToggleSection: _this.handleToggleSection,\n      privateOnFocusSection: _this.handleFocusSection,\n      privateRegisterAccordionSection: _this.registerAccordionSection,\n      privateUnregisterAccordionSection: _this.unregisterAccordionSection,\n      privateOnKeyPressed: _this.handleKeyPressed,\n      childrenRegistered: []\n    };\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Accordion, [{\n    key: \"setAsSelectAccordionSection\",\n    value: function setAsSelectAccordionSection(accordionSectionIndex) {\n      var childrenRegistered = this.state.childrenRegistered;\n      childrenRegistered[accordionSectionIndex].focusButtonIcon();\n    }\n  }, {\n    key: \"handleToggleSection\",\n    value: function handleToggleSection(event, name) {\n      var onToggleSection = this.props.onToggleSection;\n\n      if (typeof onToggleSection === 'function') {\n        return onToggleSection(event, name);\n      }\n\n      return this.setState({\n        activeNames: name\n      });\n    }\n  }, {\n    key: \"handleFocusSection\",\n    value: function handleFocusSection(currentSection) {\n      return this.setState({\n        currentSection: currentSection\n      });\n    }\n  }, {\n    key: \"handleKeyPressed\",\n    value: function handleKeyPressed(event) {\n      if (this.keyHandlerMap[event.keyCode]) {\n        event.preventDefault();\n        return this.keyHandlerMap[event.keyCode]();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"selectAccordionSection\",\n    value: function selectAccordionSection(side) {\n      var _this$state = this.state,\n          childrenRegistered = _this$state.childrenRegistered,\n          currentSection = _this$state.currentSection;\n      var accordionSectionIndex = childrenRegistered.findIndex(function (section) {\n        return section.name === currentSection;\n      });\n\n      if (accordionSectionIndex === childrenRegistered.length - 1 && side === RIGHT_SIDE) {\n        this.setAsSelectAccordionSection(0);\n      } else if (accordionSectionIndex === 0 && side === LEFT_SIDE) {\n        this.setAsSelectAccordionSection(childrenRegistered.length - 1);\n      } else {\n        this.setAsSelectAccordionSection(accordionSectionIndex + side);\n      }\n    }\n  }, {\n    key: \"registerAccordionSection\",\n    value: function registerAccordionSection(section) {\n      var childrenRegistered = this.state.childrenRegistered;\n\n      var _getChildAccordionSec = (0, _utils.getChildAccordionSectionNodes)(this.containerRef.current),\n          _getChildAccordionSec2 = (0, _toArray2[\"default\"])(_getChildAccordionSec),\n          nodes = _getChildAccordionSec2.slice(0);\n\n      var newChildrenRefs = (0, _utils.insertChildOrderly)(childrenRegistered, section, nodes);\n      this.setState({\n        childrenRegistered: newChildrenRefs\n      });\n    }\n  }, {\n    key: \"unregisterAccordionSection\",\n    value: function unregisterAccordionSection(sectionName) {\n      var childrenRegistered = this.state.childrenRegistered;\n      var newAccordionSectionChildren = childrenRegistered.filter(function (section) {\n        return section.name !== sectionName;\n      });\n      this.setState({\n        childrenRegistered: newAccordionSectionChildren\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          children = _this$props.children,\n          style = _this$props.style,\n          className = _this$props.className;\n      return _react[\"default\"].createElement(\"ul\", {\n        ref: this.containerRef,\n        id: id,\n        className: className,\n        style: style\n      }, _react[\"default\"].createElement(_context.Provider, {\n        value: this.state\n      }, children));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var activeSectionNames = props.activeSectionNames,\n          onToggleSection = props.onToggleSection;\n\n      if (activeSectionNames && activeSectionNames !== state.activeNames && typeof onToggleSection === 'function') {\n        return {\n          activeNames: activeSectionNames\n        };\n      }\n\n      return null;\n    }\n  }]);\n  return Accordion;\n}(_react.Component);\n\nexports[\"default\"] = Accordion;\nAccordion.propTypes = {\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied for the outer element. */\n  style: _propTypes[\"default\"].object,\n\n  /**\n   * This prop that should not be visible in the documentation.\n   * @ignore\n   */\n  children: _propTypes[\"default\"].node,\n\n  /** If true, expands multiples AccordionSections.\n   * This value defaults to false. */\n  multiple: _propTypes[\"default\"].bool,\n\n  /** Action fired when an AccordionSection is selected.\n   * The event params include the `name` of the selected AccordionSection. */\n  onToggleSection: _propTypes[\"default\"].func,\n\n  /** It contain the name of the AccordionSection that is expanded.\n   * It is an array of string when multiple is true,\n   * or a string when when multiple is false.\n   * It must match the name of the AccordionSection. */\n  activeSectionNames: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].arrayOf(_propTypes[\"default\"].string), _propTypes[\"default\"].string])\n};\nAccordion.defaultProps = {\n  className: undefined,\n  style: undefined,\n  children: null,\n  id: undefined,\n  multiple: false,\n  onToggleSection: undefined,\n  activeSectionNames: undefined\n};","map":null,"metadata":{},"sourceType":"script"}