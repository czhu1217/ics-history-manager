{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Component = exports[\"default\"] = void 0;\n\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _withReduxForm = _interopRequireDefault(require(\"../../libs/hocs/withReduxForm\"));\n\nvar _RenderIf = _interopRequireDefault(require(\"../RenderIf\"));\n\nvar _constants = require(\"../../libs/constants\");\n\nvar _context = require(\"./context\");\n\nvar _menuContent = _interopRequireDefault(require(\"./menuContent\"));\n\nvar _utils = require(\"./utils\");\n\nvar _label = _interopRequireDefault(require(\"./label\"));\n\nrequire(\"./styles.css\");\n\nvar _utils2 = require(\"../../libs/utils\");\n\nvar _menuArrowButton = _interopRequireDefault(require(\"./menuArrowButton\"));\n\nvar _getNormalizeValue4 = _interopRequireDefault(require(\"./helpers/getNormalizeValue\"));\n\nvar _isChildRegistered = _interopRequireDefault(require(\"./helpers/isChildRegistered\"));\n\nvar _isOptionVisible = _interopRequireDefault(require(\"./helpers/isOptionVisible\"));\n\nvar _shouldOpenMenu = _interopRequireDefault(require(\"./helpers/shouldOpenMenu\"));\n\nvar _calculateScrollOffset = _interopRequireDefault(require(\"./helpers/calculateScrollOffset\"));\n\nvar _isScrollPositionAtMenuBottom = _interopRequireDefault(require(\"./helpers/isScrollPositionAtMenuBottom\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar sizeMap = {\n  medium: 227\n};\n/**\n * A Picklist provides a user with an read-only input field that is accompanied with\n *  a listbox of pre-defined options.\n * @category Form\n */\n\nvar Picklist =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(Picklist, _Component);\n\n  function Picklist(props) {\n    var _this$keyHandlerMap;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Picklist);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Picklist).call(this, props));\n    _this.inputId = (0, _utils2.uniqueId)('picklist-input');\n    _this.errorMessageId = (0, _utils2.uniqueId)('error-message');\n    _this.containerRef = _react[\"default\"].createRef();\n    _this.triggerRef = _react[\"default\"].createRef();\n    _this.menuRef = _react[\"default\"].createRef();\n    _this.handleInputClick = _this.handleInputClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.hoverChild = _this.hoverChild.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleOptionClick = _this.handleOptionClick.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleScrollUpArrowHover = _this.handleScrollUpArrowHover.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.handleScrollDownArrowHover = _this.handleScrollDownArrowHover.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.updateScrollingArrows = _this.updateScrollingArrows.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.stopArrowScoll = _this.stopArrowScoll.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.registerChild = _this.registerChild.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.unregisterChild = _this.unregisterChild.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.activeChildren = [];\n    _this.state = {\n      isOpen: false,\n      activeOptionIndex: -1,\n      activeOptionName: null,\n      showScrollUpArrow: undefined,\n      showScrollDownArrow: undefined\n    };\n    _this.keyHandlerMap = (_this$keyHandlerMap = {}, (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.UP_KEY, _this.handleKeyUpPressed.bind((0, _assertThisInitialized2[\"default\"])(_this))), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.DOWN_KEY, _this.handleKeyDownPressed.bind((0, _assertThisInitialized2[\"default\"])(_this))), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.ESCAPE_KEY, _this.closeMenu.bind((0, _assertThisInitialized2[\"default\"])(_this))), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.TAB_KEY, _this.closeMenu.bind((0, _assertThisInitialized2[\"default\"])(_this))), (0, _defineProperty2[\"default\"])(_this$keyHandlerMap, _constants.ENTER_KEY, _this.handleKeyEnterPressed.bind((0, _assertThisInitialized2[\"default\"])(_this))), _this$keyHandlerMap);\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(Picklist, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var wasOpen = prevState.isOpen;\n      var isOpen = this.state.isOpen;\n\n      if (!wasOpen && isOpen) {\n        this.scrollTo(0);\n        this.updateScrollingArrows();\n      }\n    }\n  }, {\n    key: \"getContainerClassNames\",\n    value: function getContainerClassNames() {\n      var isOpen = this.state.isOpen;\n      var _this$props = this.props,\n          className = _this$props.className,\n          readOnly = _this$props.readOnly,\n          error = _this$props.error;\n      return (0, _classnames[\"default\"])('rainbow-picklist', {\n        'rainbow-picklist--error': error,\n        'rainbow-picklist--readonly': readOnly,\n        'rainbow-picklist--open': isOpen && !readOnly\n      }, className);\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      var activeOptionName = this.state.activeOptionName;\n      var value = this.props.value;\n\n      var _getNormalizeValue = (0, _getNormalizeValue4[\"default\"])(value),\n          name = _getNormalizeValue.name;\n\n      return {\n        privateOnClick: this.handleOptionClick,\n        privateRegisterChild: this.registerChild,\n        privateUnregisterChild: this.unregisterChild,\n        privateOnHover: this.hoverChild,\n        activeOptionName: activeOptionName,\n        currentValueName: name\n      };\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"getMenuMaxHeight\",\n    value: function getMenuMaxHeight() {\n      return sizeMap.medium;\n    }\n  }, {\n    key: \"getInputClassNames\",\n    value: function getInputClassNames() {\n      var value = this.props.value;\n\n      var _getNormalizeValue2 = (0, _getNormalizeValue4[\"default\"])(value),\n          icon = _getNormalizeValue2.icon;\n\n      return (0, _classnames[\"default\"])('rainbow-picklist_input', {\n        'rainbow-picklist_input--icon': !!icon\n      });\n    }\n  }, {\n    key: \"getIndicatorClassNames\",\n    value: function getIndicatorClassNames() {\n      var disabled = this.props.disabled;\n      return (0, _classnames[\"default\"])('rainbow-picklist_input-dropdown-indicator', {\n        'rainbow-picklist_input-dropdown-indicator--disabled': disabled\n      });\n    }\n  }, {\n    key: \"getDropdownClassNames\",\n    value: function getDropdownClassNames() {\n      var isLoading = this.props.isLoading;\n      return (0, _classnames[\"default\"])('rainbow-picklist_dropdown', {\n        'rainbow-picklist_dropdown--loading-box': isLoading\n      });\n    }\n  }, {\n    key: \"getErrorMessageId\",\n    value: function getErrorMessageId() {\n      var error = this.props.error;\n\n      if (error) {\n        return this.errorMessageId;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"handleKeyUpPressed\",\n    value: function handleKeyUpPressed() {\n      var activeOptionIndex = this.state.activeOptionIndex;\n      var nextActiveIndex = (this.activeChildren.length + activeOptionIndex - 1) % this.activeChildren.length;\n\n      if (nextActiveIndex < activeOptionIndex) {\n        if (nextActiveIndex === 0) {\n          this.scrollTo(0);\n        } else {\n          this.scrollToOption(nextActiveIndex);\n        }\n\n        this.setState({\n          activeOptionIndex: nextActiveIndex,\n          activeOptionName: this.activeChildren[nextActiveIndex].name\n        });\n      }\n    }\n  }, {\n    key: \"handleKeyDownPressed\",\n    value: function handleKeyDownPressed() {\n      var activeOptionIndex = this.state.activeOptionIndex;\n      var nextActiveIndex = (activeOptionIndex + 1) % this.activeChildren.length;\n\n      if (nextActiveIndex > 0) {\n        this.scrollToOption(nextActiveIndex);\n        this.setState({\n          activeOptionIndex: nextActiveIndex,\n          activeOptionName: this.activeChildren[nextActiveIndex].name\n        });\n      }\n    }\n  }, {\n    key: \"handleKeyEnterPressed\",\n    value: function handleKeyEnterPressed() {\n      var onChange = this.props.onChange;\n      var activeOptionIndex = this.state.activeOptionIndex;\n      var _this$activeChildren$ = this.activeChildren[activeOptionIndex],\n          label = _this$activeChildren$.label,\n          name = _this$activeChildren$.name,\n          icon = _this$activeChildren$.icon,\n          value = _this$activeChildren$.value;\n      this.closeMenu();\n      return onChange({\n        label: label,\n        name: name,\n        icon: icon,\n        value: value\n      });\n    }\n  }, {\n    key: \"handleKeyPressed\",\n    value: function handleKeyPressed(event) {\n      var isOpen = this.state.isOpen;\n\n      if (isOpen) {\n        if ([_constants.UP_KEY, _constants.DOWN_KEY, _constants.SPACE_KEY].includes(event.keyCode)) event.preventDefault();\n\n        if (this.keyHandlerMap[event.keyCode]) {\n          return this.keyHandlerMap[event.keyCode]();\n        }\n      } else if ((0, _shouldOpenMenu[\"default\"])(event.keyCode)) {\n        event.preventDefault();\n        this.openMenu();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"registerChild\",\n    value: function registerChild(childRef, childProps) {\n      if ((0, _isChildRegistered[\"default\"])(childRef, this.activeChildren)) return;\n\n      var _getChildMenuItemNode = (0, _utils.getChildMenuItemNodes)(this.containerRef.current),\n          _getChildMenuItemNode2 = (0, _toArray2[\"default\"])(_getChildMenuItemNode),\n          nodes = _getChildMenuItemNode2.slice(0);\n\n      this.activeChildren = (0, _utils.insertChildOrderly)(this.activeChildren, _objectSpread({\n        ref: childRef\n      }, childProps), nodes);\n    }\n  }, {\n    key: \"unregisterChild\",\n    value: function unregisterChild(childRef) {\n      if (!(0, _isChildRegistered[\"default\"])(childRef, this.activeChildren)) return;\n      this.activeChildren = this.activeChildren.filter(function (child) {\n        return child.ref !== childRef;\n      });\n    }\n  }, {\n    key: \"hoverChild\",\n    value: function hoverChild(event, name) {\n      this.setState({\n        activeOptionName: name,\n        activeOptionIndex: this.activeChildren.findIndex(function (child) {\n          return child.name === name;\n        })\n      });\n    }\n  }, {\n    key: \"openMenu\",\n    value: function openMenu() {\n      var firstOptionIndex = this.activeChildren.length > 0 ? 0 : -1;\n      var firstOptionName = this.activeChildren.length > 0 ? this.activeChildren[0].name : null;\n      return this.setState({\n        isOpen: true,\n        activeOptionIndex: firstOptionIndex,\n        activeOptionName: firstOptionName\n      });\n    }\n  }, {\n    key: \"closeMenu\",\n    value: function closeMenu() {\n      return this.setState({\n        isOpen: false,\n        activeOptionIndex: -1,\n        activeOptionName: null\n      });\n    }\n  }, {\n    key: \"handleInputClick\",\n    value: function handleInputClick(event) {\n      var onClick = this.props.onClick;\n      var isOpen = this.state.isOpen;\n      onClick(event);\n\n      if (isOpen) {\n        return this.closeMenu();\n      }\n\n      return this.openMenu();\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      var _this$props2 = this.props,\n          onFocus = _this$props2.onFocus,\n          value = _this$props2.value;\n      var eventValue = value || null;\n      onFocus(eventValue);\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      var _this$props3 = this.props,\n          onBlur = _this$props3.onBlur,\n          value = _this$props3.value;\n      this.closeMenu();\n      var eventValue = value || null;\n      onBlur(eventValue);\n    }\n  }, {\n    key: \"handleOptionClick\",\n    value: function handleOptionClick(event, option) {\n      var onChange = this.props.onChange;\n      return onChange(option);\n    }\n  }, {\n    key: \"scrollToOption\",\n    value: function scrollToOption(nextFocusedIndex) {\n      var activeOptionIndex = this.state.activeOptionIndex;\n      var currentFocusedOptionRef = this.activeChildren[activeOptionIndex].ref;\n      var nextFocusedOptionRef = this.activeChildren[nextFocusedIndex].ref;\n\n      if (!(0, _isOptionVisible[\"default\"])(nextFocusedOptionRef, this.menuRef.current)) {\n        var amount = (0, _calculateScrollOffset[\"default\"])(currentFocusedOptionRef.offsetTop, nextFocusedOptionRef.offsetTop);\n        this.scrollBy(amount);\n      }\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(offset) {\n      this.menuRef.current.scrollTo(0, offset);\n    }\n  }, {\n    key: \"scrollBy\",\n    value: function scrollBy(offset) {\n      this.menuRef.current.scrollBy(0, offset);\n    }\n  }, {\n    key: \"updateScrollingArrows\",\n    value: function updateScrollingArrows() {\n      var menu = this.menuRef.current;\n      var showScrollUpArrow = menu.scrollTop > 0;\n      var showScrollDownArrow = !(0, _isScrollPositionAtMenuBottom[\"default\"])(menu);\n      this.setState({\n        showScrollUpArrow: showScrollUpArrow,\n        showScrollDownArrow: showScrollDownArrow\n      });\n    }\n  }, {\n    key: \"handleScrollUpArrowHover\",\n    value: function handleScrollUpArrowHover() {\n      var _this2 = this;\n\n      this.stopArrowScoll();\n      var menu = this.menuRef.current;\n      this.scrollingTimer = setInterval(function () {\n        if (menu.scrollTop > 0) {\n          menu.scrollBy(0, -1);\n        } else {\n          _this2.stopArrowScoll();\n        }\n      }, 5);\n    }\n  }, {\n    key: \"handleScrollDownArrowHover\",\n    value: function handleScrollDownArrowHover() {\n      var _this3 = this;\n\n      this.stopArrowScoll();\n      var menu = this.menuRef.current;\n      this.scrollingTimer = setInterval(function () {\n        if (!(0, _isScrollPositionAtMenuBottom[\"default\"])(menu)) {\n          menu.scrollBy(0, 1);\n        } else {\n          _this3.stopArrowScoll();\n        }\n      }, 5);\n    }\n  }, {\n    key: \"stopArrowScoll\",\n    value: function stopArrowScoll() {\n      if (this.scrollingTimer) clearInterval(this.scrollingTimer);\n    }\n    /**\n     * Sets focus on the element.\n     * @public\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.triggerRef.current.focus();\n    }\n    /**\n     * Sets click on the element.\n     * @public\n     */\n\n  }, {\n    key: \"click\",\n    value: function click() {\n      this.triggerRef.current.click();\n    }\n    /**\n     * Sets blur on the element.\n     * @public\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.triggerRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          pickListLabel = _this$props4.label,\n          hideLabel = _this$props4.hideLabel,\n          style = _this$props4.style,\n          error = _this$props4.error,\n          title = _this$props4.title,\n          assistiveText = _this$props4.assistiveText,\n          isLoading = _this$props4.isLoading,\n          disabled = _this$props4.disabled,\n          readOnly = _this$props4.readOnly,\n          required = _this$props4.required,\n          children = _this$props4.children,\n          id = _this$props4.id,\n          tabIndex = _this$props4.tabIndex,\n          placeholder = _this$props4.placeholder,\n          name = _this$props4.name,\n          valueInProps = _this$props4.value;\n      var ariaLabel = title || assistiveText;\n\n      var _getNormalizeValue3 = (0, _getNormalizeValue4[\"default\"])(valueInProps),\n          valueLabel = _getNormalizeValue3.label,\n          icon = _getNormalizeValue3.icon;\n\n      var value = valueLabel || '';\n      var errorMessageId = this.getErrorMessageId();\n      var menuContainerStyles = {\n        maxHeight: this.getMenuMaxHeight()\n      };\n      var _this$state = this.state,\n          showScrollUpArrow = _this$state.showScrollUpArrow,\n          showScrollDownArrow = _this$state.showScrollDownArrow;\n      return _react[\"default\"].createElement(\"div\", {\n        id: id,\n        role: \"presentation\",\n        className: this.getContainerClassNames(),\n        style: style,\n        onKeyDown: this.handleKeyPressed,\n        ref: this.containerRef\n      }, _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!pickListLabel\n      }, _react[\"default\"].createElement(_label[\"default\"], {\n        label: pickListLabel,\n        hideLabel: hideLabel,\n        required: required,\n        inputId: this.inputId,\n        readOnly: readOnly\n      })), _react[\"default\"].createElement(\"div\", {\n        className: \"rainbow-picklist_inner-container\"\n      }, _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!icon\n      }, _react[\"default\"].createElement(\"span\", {\n        className: \"rainbow-picklist_icon\"\n      }, icon)), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !readOnly\n      }, _react[\"default\"].createElement(\"span\", {\n        className: this.getIndicatorClassNames()\n      })), _react[\"default\"].createElement(\"input\", {\n        className: this.getInputClassNames(),\n        id: this.inputId,\n        type: \"text\",\n        name: name,\n        value: value,\n        onClick: this.handleInputClick,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        placeholder: placeholder,\n        tabIndex: tabIndex,\n        readOnly: true,\n        disabled: disabled,\n        required: required,\n        \"aria-describedby\": errorMessageId,\n        autoComplete: \"off\",\n        ref: this.triggerRef\n      }), _react[\"default\"].createElement(\"div\", {\n        role: \"listbox\",\n        className: this.getDropdownClassNames()\n      }, _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: showScrollUpArrow\n      }, _react[\"default\"].createElement(_menuArrowButton[\"default\"], {\n        arrow: \"up\",\n        onMouseEnter: this.handleScrollUpArrowHover,\n        onMouseLeave: this.stopArrowScoll\n      })), _react[\"default\"].createElement(\"ul\", {\n        role: \"presentation\",\n        onScroll: this.updateScrollingArrows,\n        \"aria-label\": ariaLabel,\n        ref: this.menuRef,\n        style: menuContainerStyles\n      }, _react[\"default\"].createElement(_menuContent[\"default\"], {\n        isLoading: isLoading\n      }, _react[\"default\"].createElement(_context.Provider, {\n        value: this.getContext()\n      }, children))), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: showScrollDownArrow\n      }, _react[\"default\"].createElement(_menuArrowButton[\"default\"], {\n        arrow: \"down\",\n        onMouseEnter: this.handleScrollDownArrowHover,\n        onMouseLeave: this.stopArrowScoll\n      })))), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n        isTrue: !!error\n      }, _react[\"default\"].createElement(\"div\", {\n        id: errorMessageId,\n        className: \"rainbow-picklist_input-error\"\n      }, error)));\n    }\n  }]);\n  return Picklist;\n}(_react.Component);\n\nexports.Component = Picklist;\nPicklist.propTypes = {\n  /** Text label for the PickList. */\n  label: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]).isRequired,\n\n  /** A boolean to hide the PickList label. */\n  hideLabel: _propTypes[\"default\"].bool,\n\n  /** The content of the Picklist. Used to render the options\n   * when the Picklist is open. */\n  children: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].arrayOf(_propTypes[\"default\"].node), _propTypes[\"default\"].object]),\n\n  /** If is set to true, then is showed a loading symbol. */\n  isLoading: _propTypes[\"default\"].bool,\n\n  /** Displays tooltip text when the mouse moves over the element. */\n  title: _propTypes[\"default\"].string,\n\n  /** A description for assistive sreen readers. */\n  assistiveText: _propTypes[\"default\"].string,\n\n  /** Specifies the selected value of the Picklist. */\n  value: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].string]),\n\n  /**  The action triggered when click/select an option. */\n  onChange: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element is clicked. */\n  onClick: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element receives focus. */\n  onFocus: _propTypes[\"default\"].func,\n\n  /** The action triggered when the element releases focus. */\n  onBlur: _propTypes[\"default\"].func,\n\n  /** Specifies the tab order of an element (when the tab button is used for navigating). */\n  tabIndex: _propTypes[\"default\"].string,\n\n  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */\n  placeholder: _propTypes[\"default\"].string,\n\n  /** The name of the Picklist. */\n  name: _propTypes[\"default\"].string,\n\n  /** Specifies that the Picklist must be filled out before submitting the form. */\n  error: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** Specifies that an option must be selected before submitting the form.\n   * This value defaults to false. */\n  required: _propTypes[\"default\"].bool,\n\n  /** Specifies that the Picklist element should be disabled. This value defaults to false. */\n  disabled: _propTypes[\"default\"].bool,\n\n  /** Specifies that the Picklist is read-only. This value defaults to false. */\n  readOnly: _propTypes[\"default\"].bool,\n\n  /** The id of the outer element. */\n  id: _propTypes[\"default\"].string,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nPicklist.defaultProps = {\n  children: null,\n  isLoading: false,\n  title: undefined,\n  assistiveText: undefined,\n  value: undefined,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  onFocus: function onFocus() {},\n  onBlur: function onBlur() {},\n  tabIndex: undefined,\n  placeholder: undefined,\n  name: undefined,\n  hideLabel: false,\n  id: undefined,\n  error: null,\n  disabled: false,\n  readOnly: false,\n  required: false,\n  className: undefined,\n  style: undefined\n};\n\nvar _default = (0, _withReduxForm[\"default\"])(Picklist);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}