{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Card;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _cardBody = _interopRequireDefault(require(\"./cardBody\"));\n\nvar _header = _interopRequireDefault(require(\"./header\"));\n\nvar _RenderIf = _interopRequireDefault(require(\"../RenderIf\"));\n\nrequire(\"./styles.css\");\n/**\n * Cards are used to apply a container around a\n * related grouping of information.\n * @category Layout\n */\n\n\nfunction Card(props) {\n  var className = props.className,\n      style = props.style,\n      actions = props.actions,\n      children = props.children,\n      footer = props.footer,\n      title = props.title,\n      icon = props.icon,\n      isLoading = props.isLoading;\n\n  var getContainerClassName = function getContainerClassName() {\n    var hasHeader = icon || title || actions;\n    return (0, _classnames[\"default\"])('rainbow-card', {\n      'rainbow-card--with-header': hasHeader\n    }, className);\n  };\n\n  return _react[\"default\"].createElement(\"article\", {\n    className: getContainerClassName(),\n    style: style\n  }, _react[\"default\"].createElement(_header[\"default\"], {\n    actions: actions,\n    title: title,\n    icon: icon\n  }), _react[\"default\"].createElement(_cardBody[\"default\"], {\n    isLoading: isLoading\n  }, children), _react[\"default\"].createElement(_RenderIf[\"default\"], {\n    isTrue: footer && !isLoading\n  }, _react[\"default\"].createElement(\"footer\", {\n    className: \"rainbow-card_footer\"\n  }, footer)));\n}\n\nCard.propTypes = {\n  /** The title can include text or another component,\n   * and is displayed in the header of the component. */\n  title: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The icon to show if it is passed. It must be a svg icon or a font icon.\n   * It is displayed in the header of the component. */\n  icon: _propTypes[\"default\"].node,\n\n  /** Actions are components such as button or buttonIcon. Actions are displayed in the header. */\n  actions: _propTypes[\"default\"].node,\n\n  /** The footer can include text or another component. */\n  footer: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].node]),\n\n  /** The content of the Card. */\n  children: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].arrayOf(_propTypes[\"default\"].node), _propTypes[\"default\"].object]),\n\n  /** If is set to true, then is showed a loading symbol. */\n  isLoading: _propTypes[\"default\"].bool,\n\n  /** A CSS class for the outer element, in addition to the component's base classes. */\n  className: _propTypes[\"default\"].string,\n\n  /** An object with custom style applied to the outer element. */\n  style: _propTypes[\"default\"].object\n};\nCard.defaultProps = {\n  title: null,\n  icon: null,\n  actions: null,\n  footer: null,\n  isLoading: false,\n  className: undefined,\n  style: undefined,\n  children: null\n};","map":null,"metadata":{},"sourceType":"script"}