"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Card;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _cardBody = _interopRequireDefault(require("./cardBody"));

var _header = _interopRequireDefault(require("./header"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

require("./styles.css");

/**
 * Cards are used to apply a container around a
 * related grouping of information.
 * @category Layout
 */
function Card(props) {
  var className = props.className,
      style = props.style,
      actions = props.actions,
      children = props.children,
      footer = props.footer,
      title = props.title,
      icon = props.icon,
      isLoading = props.isLoading;

  var getContainerClassName = function getContainerClassName() {
    var hasHeader = icon || title || actions;
    return (0, _classnames["default"])('rainbow-card', {
      'rainbow-card--with-header': hasHeader
    }, className);
  };

  return _react["default"].createElement("article", {
    className: getContainerClassName(),
    style: style
  }, _react["default"].createElement(_header["default"], {
    actions: actions,
    title: title,
    icon: icon
  }), _react["default"].createElement(_cardBody["default"], {
    isLoading: isLoading
  }, children), _react["default"].createElement(_RenderIf["default"], {
    isTrue: footer && !isLoading
  }, _react["default"].createElement("footer", {
    className: "rainbow-card_footer"
  }, footer)));
}

Card.propTypes = {
  /** The title can include text or another component,
   * and is displayed in the header of the component. */
  title: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The icon to show if it is passed. It must be a svg icon or a font icon.
   * It is displayed in the header of the component. */
  icon: _propTypes["default"].node,

  /** Actions are components such as button or buttonIcon. Actions are displayed in the header. */
  actions: _propTypes["default"].node,

  /** The footer can include text or another component. */
  footer: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The content of the Card. */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].object]),

  /** If is set to true, then is showed a loading symbol. */
  isLoading: _propTypes["default"].bool,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object
};
Card.defaultProps = {
  title: null,
  icon: null,
  actions: null,
  footer: null,
  isLoading: false,
  className: undefined,
  style: undefined,
  children: null
};