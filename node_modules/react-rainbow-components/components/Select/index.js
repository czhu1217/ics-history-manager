"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _withReduxForm = _interopRequireDefault(require("./../../libs/hocs/withReduxForm"));

var _utils = require("./../../libs/utils");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _RequiredAsterisk = _interopRequireDefault(require("../RequiredAsterisk"));

var _options = _interopRequireDefault(require("./options"));

require("./styles.css");

/**
 * Select element presents a menu of options.
 * @category Form
 */
var Select =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Select, _Component);

  function Select(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Select);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Select).call(this, props));
    _this.selectId = (0, _utils.uniqueId)('select');
    _this.selectRef = _react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(Select, [{
    key: "getContainerClassNames",
    value: function getContainerClassNames() {
      var _this$props = this.props,
          className = _this$props.className,
          error = _this$props.error;
      return (0, _classnames["default"])('rainbow-select_container', {
        'rainbow-select--error': error
      }, className);
    }
  }, {
    key: "getLabelClassNames",
    value: function getLabelClassNames() {
      var hideLabel = this.props.hideLabel;
      return (0, _classnames["default"])('rainbow-select_label', {
        'rainbow-select_label--hide-label': hideLabel
      });
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.selectRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.selectRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.selectRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          label = _this$props2.label,
          value = _this$props2.value,
          onChange = _this$props2.onChange,
          onFocus = _this$props2.onFocus,
          onBlur = _this$props2.onBlur,
          onClick = _this$props2.onClick,
          error = _this$props2.error,
          required = _this$props2.required,
          disabled = _this$props2.disabled,
          options = _this$props2.options,
          style = _this$props2.style,
          id = _this$props2.id,
          name = _this$props2.name;
      return _react["default"].createElement("div", {
        className: this.getContainerClassNames(),
        style: style,
        id: id
      }, _react["default"].createElement("label", {
        className: this.getLabelClassNames(),
        htmlFor: this.selectId
      }, _react["default"].createElement(_RequiredAsterisk["default"], {
        required: required
      }), label), _react["default"].createElement("div", {
        className: "rainbow-select_inner-container",
        disabled: disabled
      }, _react["default"].createElement("select", {
        className: "rainbow-select",
        id: this.selectId,
        name: name,
        onChange: onChange,
        onFocus: onFocus,
        onBlur: onBlur,
        onClick: onClick,
        value: value,
        required: required,
        disabled: disabled,
        ref: this.selectRef
      }, _react["default"].createElement(_options["default"], {
        options: options
      }))), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!error
      }, _react["default"].createElement("div", {
        className: "rainbow-select_text-error"
      }, error)));
    }
  }]);
  return Select;
}(_react.Component);

Select.propTypes = {
  /** Text label for the select. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]).isRequired,

  /** The name of the select */
  name: _propTypes["default"].string,

  /** Specifies the selected value. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** The action triggered when a option item is selected. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** Specifies that an input field must be filled out before submitting the form.
   * This value defaults to false. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that an input element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** The option items to be displayed. */
  options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]).isRequired,
    value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
    disabled: _propTypes["default"].bool
  })),

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** The id of the outer element. */
  hideLabel: _propTypes["default"].bool
};
Select.defaultProps = {
  value: undefined,
  name: undefined,
  onChange: function onChange() {},
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  error: null,
  required: false,
  disabled: false,
  options: [],
  className: undefined,
  style: undefined,
  id: undefined,
  hideLabel: false
};

var _default = (0, _withReduxForm["default"])(Select);

exports["default"] = _default;