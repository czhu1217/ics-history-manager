"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("./../index"));

describe('<Spinner/>', function () {
  it('should not render the spinner when isVisible is false', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      isVisible: false
    }));
    expect(component.children().length).toBe(0);
  });
  it('should not render the spinner when isVisible is true', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      isVisible: true
    }));
    expect(component.children().length).toBe(1);
  });
  it('should have the right class names when ehiter the variant and size are not passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], null));
    expect(component.find('div.rainbow-spinner.rainbow-spinner--medium').exists()).toBe(true);
  });
  it('should have the right class names when a custom class name is passed, variant is brand and size is large', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "brand",
      size: "large",
      className: "custom-container-classname"
    }));
    expect(component.find('div.rainbow-spinner.rainbow-spinner--brand.rainbow-spinner--large.custom-container-classname').exists()).toBe(true);
  });
  it('should have the right class names when variant is inverse and size is medium', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "inverse",
      size: "medium"
    }));
    expect(component.find('div.rainbow-spinner.rainbow-spinner--inverse.rainbow-spinner--medium').exists()).toBe(true);
  });
  it('should have the right class names when variant is neutral and size is medium', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "neutral",
      size: "medium"
    }));
    expect(component.find('div.rainbow-spinner.rainbow-spinner--neutral.rainbow-spinner--medium').exists()).toBe(true);
  });
  it('should have the right class names when size is small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      size: "small"
    }));
    expect(component.find('div.rainbow-spinner.rainbow-spinner--small').exists()).toBe(true);
  });
  it('should have the right class names when size is x-small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      size: "x-small"
    }));
    expect(component.find('div.rainbow-spinner.rainbow-spinner--x-small').exists()).toBe(true);
  });
  it('should have the right class names when size is xx-small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      size: "xx-small"
    }));
    expect(component.find('div.rainbow-spinner.rainbow-spinner--xx-small').exists()).toBe(true);
  });
  it('should pass assistiveText to the prop text of AssistiveText component', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      assistiveText: "for screen readers"
    }));
    expect(component.find('AssistiveText').prop('text')).toBe('for screen readers');
  });
});