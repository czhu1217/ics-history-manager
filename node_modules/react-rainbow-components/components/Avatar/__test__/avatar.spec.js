"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("./../index"));

describe('<Avatar/>', function () {
  it('should pass assistiveText to the prop text of AssistiveText component', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      initials: "JD",
      assistiveText: "for screen readers"
    }));
    expect(component.find('AssistiveText').prop('text')).toBe('for screen readers');
  });
  it('should have the right class names when props are not passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], null));
    expect(component.find('span[className="rainbow-avatar rainbow-avatar--medium"]').exists()).toBe(true);
  });
  it('should have the right class names when size is small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      size: "small"
    }));
    expect(component.find('span[className="rainbow-avatar rainbow-avatar--small"]').exists()).toBe(true);
  });
  it('should have the right class names when size is x-small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      size: "x-small"
    }));
    expect(component.find('span[className="rainbow-avatar rainbow-avatar--x-small"]').exists()).toBe(true);
  });
  it('should have the right class names when size is medium', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      size: "medium"
    }));
    expect(component.find('span[className="rainbow-avatar rainbow-avatar--medium"]').exists()).toBe(true);
  });
  it('should have the right class names when size is large', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      size: "large"
    }));
    expect(component.find('span[className="rainbow-avatar rainbow-avatar--large"]').exists()).toBe(true);
  });
});