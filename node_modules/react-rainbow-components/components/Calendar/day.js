"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Day;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function Day(props) {
  var date = props.date,
      firstDayMonth = props.firstDayMonth,
      isSelected = props.isSelected,
      minDate = props.minDate,
      maxDate = props.maxDate,
      onChange = props.onChange;
  var day = date.getDate();
  var isAdjacentDate = date.getMonth() !== firstDayMonth.getMonth();
  var isDisabled = date > maxDate || date < minDate;

  if (isAdjacentDate || isDisabled) {
    return _react["default"].createElement("td", {
      className: "rainbow-calendar_day",
      role: "gridcell",
      "aria-selected": "false"
    }, _react["default"].createElement("span", {
      className: "rainbow-calendar_day-adjacent"
    }, day));
  }

  var buttonClassNames = (0, _classnames["default"])('rainbow-calendar_day-button', {
    'rainbow-calendar_day-button--selected': isSelected
  });
  return _react["default"].createElement("td", {
    className: "rainbow-calendar_day",
    role: "gridcell"
  }, _react["default"].createElement("button", {
    onClick: function onClick() {
      return onChange(new Date(date));
    },
    className: buttonClassNames
  }, day));
}

Day.propTypes = {
  date: _propTypes["default"].instanceOf(Date),
  firstDayMonth: _propTypes["default"].instanceOf(Date),
  minDate: _propTypes["default"].instanceOf(Date),
  maxDate: _propTypes["default"].instanceOf(Date),
  isSelected: _propTypes["default"].bool,
  onChange: _propTypes["default"].func
};
Day.defaultProps = {
  date: undefined,
  firstDayMonth: undefined,
  minDate: undefined,
  maxDate: undefined,
  isSelected: false,
  onChange: function onChange() {}
};