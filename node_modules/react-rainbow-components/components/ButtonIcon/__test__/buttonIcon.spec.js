"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("./../index"));

describe('<ButtonIcon/>', function () {
  it('should focus the button when the focus method is called', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], null));
    component.instance().focus();
    var focusedElementDataId = document.activeElement.getAttribute('data-id');
    var buttonDataId = component.find('button').prop('data-id');
    expect(focusedElementDataId).toBe(buttonDataId);
  });
  it('should blur the button when the blur method is called', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], null));
    var instance = component.instance();
    var buttonDataId = component.find('button').prop('data-id');
    instance.focus();
    expect(document.activeElement.getAttribute('data-id')).toBe(buttonDataId);
    instance.blur();
    expect(document.activeElement.getAttribute('data-id')).toBeNull();
  });
  it('should set disable to true when it is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      disabled: true
    }));
    expect(component.find('button').prop('disabled')).toBe(true);
  });
  it('should set the tabIndex passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      tabIndex: 0
    }));
    expect(component.find('button').prop('tabIndex')).toBe(0);
  });
  it('should set the title passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      title: "my title"
    }));
    expect(component.find('button').prop('title')).toBe('my title');
  });
  it('should set the type passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      type: "reset"
    }));
    expect(component.find('button').prop('type')).toBe('reset');
  });
  it('should set aria-haspopup to true when it is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      ariaHaspopup: true
    }));
    expect(component.find('button').prop('aria-haspopup')).toBe(true);
  });
  it('should set aria-controls to true when it is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      ariaControls: "testing ariaControls"
    }));
    expect(component.find('button').prop('aria-controls')).toBe('testing ariaControls');
  });
  it('should set aria-expanded to true when it is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      ariaExpanded: true
    }));
    expect(component.find('button').prop('aria-expanded')).toBe(true);
  });
  it('should pass assistiveText to the prop text of AssistiveText component', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      assistiveText: "for screen readers"
    }));
    expect(component.find('AssistiveText').prop('text')).toBe('for screen readers');
  });
  it('should have the right class names in the button element', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], null));
    expect(component.find('button').prop('className')).toBe('rainbow-button-icon rainbow-button-icon--medium');
  });
  it('should have the right class names when variant is border-filled and have a custom class', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "border-filled",
      className: "my-custom-class-name"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button-icon rainbow-button-icon--border-filled rainbow-button-icon--medium my-custom-class-name');
  });
  it('should have the right class names when variant is border-inverse and size is small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "border-inverse",
      size: "small"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button-icon rainbow-button-icon--border-inverse rainbow-button-icon--small');
  });
  it('should have the right class names when variant is border and size is x-small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "border",
      size: "x-small"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button-icon rainbow-button-icon--border rainbow-button-icon--x-small');
  });
  it('should have the right class names when variant is brand and size is xx-small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "brand",
      size: "xx-small"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button-icon rainbow-button-icon--brand rainbow-button-icon--xx-small');
  });
  it('should have the right class names when variant is inverse and size is large', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "inverse",
      size: "large"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button-icon rainbow-button-icon--inverse rainbow-button-icon--large');
  });
  it('should have the right class names when variant is base and size is xx-small', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      size: "xx-small"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button-icon rainbow-button-icon--xx-small');
  });
  it('should have the right class names when shaded is passed and variant is brand', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      variant: "brand",
      shaded: true
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button-icon rainbow-button-icon--shaded rainbow-button-icon--brand rainbow-button-icon--medium');
  });
});