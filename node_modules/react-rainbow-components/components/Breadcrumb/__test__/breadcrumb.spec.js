"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("./../index"));

/* eslint-disable no-script-url */
describe('<Breadcrumb/>', function () {
  it('should fallback the href to href="javascript:void(0);" if the prop is not provided', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "index"
    }));
    expect(component.find('a').prop('href')).toBe('javascript:void(0);');
  });
  it('should set the href passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "index",
      href: "index"
    }));
    expect(component.find('a').prop('href')).toBe('index');
  });
  it('should invoke onClick callback when we clicked in the breadcrumb', function () {
    var onClickMockFn = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "index",
      onClick: onClickMockFn
    }));
    component.find('a').simulate('click');
    expect(onClickMockFn.mock.calls.length).toBe(1);
  });
  it('should set the label passed as children', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "index"
    }));
    expect(component.find('a').text()).toBe('index');
  });
  it('should set the right aria-disabled value when the disabled is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "index",
      disabled: true
    }));
    expect(component.find('a').prop('aria-disabled')).toBe(true);
  });
  it('should set the right className when the disabled is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "index",
      disabled: true
    }));
    expect(component.find('li').prop('className')).toBe('rainbow-breadcrumb rainbow-breadcrumb--disabled');
  });
});