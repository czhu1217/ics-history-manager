"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _calendarIcon = _interopRequireDefault(require("./calendarIcon"));

var _Modal = _interopRequireDefault(require("./../Modal"));

var _Calendar = _interopRequireDefault(require("./../Calendar"));

var _input = _interopRequireDefault(require("./input"));

var _formatDate = _interopRequireDefault(require("./helpers/formatDate"));

var _withReduxForm = _interopRequireDefault(require("../../libs/hocs/withReduxForm"));

var _constants = require("../../libs/constants");

require("./styles.css");

require("./media-queries.css");

/**
 * A DatePicker is a text input to capture a date.
 * @category Form
 */
var DatePicker =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(DatePicker, _Component);

  function DatePicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, DatePicker);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(DatePicker).call(this, props));
    _this.state = {
      isOpen: false
    };
    _this.inputRef = _react["default"].createRef();
    _this.handleChange = _this.handleChange.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
    _this.openModal = _this.openModal.bind((0, _assertThisInitialized2["default"])(_this));
    _this.closeModal = _this.closeModal.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(DatePicker, [{
    key: "getContainerClassName",
    value: function getContainerClassName() {
      var className = this.props.className;
      return (0, _classnames["default"])('rainbow-date-picker_container', className);
    }
  }, {
    key: "handleChange",
    value: function handleChange() {
      var onChange = this.props.onChange;
      this.setState({
        isOpen: false
      });
      onChange.apply(void 0, arguments);
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      var _this$props = this.props,
          onBlur = _this$props.onBlur,
          value = _this$props.value;
      onBlur(value);
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      var _this$props2 = this.props,
          onFocus = _this$props2.onFocus,
          value = _this$props2.value;
      onFocus(value);
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var keyCode = event.keyCode;
      var readOnly = this.props.readOnly;
      var shouldOpenModal = (keyCode === _constants.ENTER_KEY || keyCode === _constants.SPACE_KEY) && !readOnly;

      if (shouldOpenModal) {
        this.setState({
          isOpen: true
        });
      }
    }
  }, {
    key: "openModal",
    value: function openModal(event) {
      var _this$props3 = this.props,
          onClick = _this$props3.onClick,
          readOnly = _this$props3.readOnly;

      if (!readOnly) {
        this.setState({
          isOpen: true
        });
        onClick(event);
      }
    }
  }, {
    key: "closeModal",
    value: function closeModal() {
      this.setState({
        isOpen: false
      });
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.inputRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.inputRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.inputRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          value = _this$props4.value,
          minDate = _this$props4.minDate,
          maxDate = _this$props4.maxDate,
          placeholder = _this$props4.placeholder,
          label = _this$props4.label,
          required = _this$props4.required,
          style = _this$props4.style,
          formatStyle = _this$props4.formatStyle,
          hideLabel = _this$props4.hideLabel,
          name = _this$props4.name,
          bottomHelpText = _this$props4.bottomHelpText,
          isCentered = _this$props4.isCentered,
          error = _this$props4.error,
          readOnly = _this$props4.readOnly,
          disabled = _this$props4.disabled,
          tabIndex = _this$props4.tabIndex,
          id = _this$props4.id;
      var isOpen = this.state.isOpen;
      var formattedDate = (0, _formatDate["default"])(value, formatStyle);
      return _react["default"].createElement("div", {
        id: id,
        className: this.getContainerClassName(),
        style: style
      }, _react["default"].createElement(_input["default"], {
        ref: this.inputRef,
        label: label,
        placeholder: placeholder,
        icon: _react["default"].createElement(_calendarIcon["default"], null),
        iconPosition: "right",
        required: required,
        value: formattedDate,
        onKeyDown: this.handleKeyDown,
        onClick: this.openModal,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        hideLabel: hideLabel,
        name: name,
        bottomHelpText: bottomHelpText,
        isCentered: isCentered,
        error: error,
        readOnly: readOnly,
        disabled: disabled,
        tabIndex: tabIndex,
        autoComplete: "off"
      }), _react["default"].createElement(_Modal["default"], {
        className: "rainbow-date-picker_modal",
        isOpen: isOpen,
        onRequestClose: this.closeModal
      }, _react["default"].createElement("header", {
        className: "rainbow-date-picker_calendar-details-header"
      }, _react["default"].createElement("h2", {
        className: "rainbow-date-picker_calendar-date--selected"
      }, formattedDate)), _react["default"].createElement(_Calendar["default"], {
        value: value,
        minDate: minDate,
        maxDate: maxDate,
        formatStyle: formatStyle,
        onChange: this.handleChange,
        className: "rainbow-date-picker_calendar-container"
      })));
    }
  }]);
  return DatePicker;
}(_react.Component);

DatePicker.propTypes = {
  /** Sets the date for the DatePicker programmatically. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].instanceOf(Date), _propTypes["default"].string]),

  /** The ending of a range of valid dates. The range includes the endDate.
   * The default value is current date + 100 years. */
  maxDate: _propTypes["default"].instanceOf(Date),

  /** The beginning of a range of valid dates. The range includes the startDate.
   * The default value is current date - 100 years. */
  minDate: _propTypes["default"].instanceOf(Date),

  /** This function is called to format the date displayed in the input field.
   * Valid values are small, medium, and large. */
  formatStyle: _propTypes["default"].oneOf(['small', 'medium', 'large']),

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** Text that is displayed when the DatePicker is empty,
   * to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** Text label for the DatePicker. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]).isRequired,

  /** A boolean to hide the DatePicker label. */
  hideLabel: _propTypes["default"].bool,

  /** Specifies that the DatePicker field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** The name of the DatePicker. */
  name: _propTypes["default"].string,

  /** Shows the help message below the DatePicker. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the DatePicker text will be centered. This value defaults to false. */
  isCentered: _propTypes["default"].bool,

  /** Specifies that the DatePicker must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the DatePicker is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** Specifies that the DatePicker element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object
};
DatePicker.defaultProps = {
  value: undefined,
  minDate: undefined,
  maxDate: undefined,
  formatStyle: 'medium',
  onChange: function onChange() {},
  placeholder: null,
  hideLabel: false,
  required: false,
  name: undefined,
  bottomHelpText: null,
  isCentered: false,
  error: null,
  readOnly: false,
  disabled: false,
  tabIndex: undefined,
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  id: undefined,
  className: undefined,
  style: undefined
};

var _default = (0, _withReduxForm["default"])(DatePicker);

exports["default"] = _default;