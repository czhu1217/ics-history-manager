"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _content = _interopRequireDefault(require("./content"));

require("./styles.css");

/**
 * Buttons are clickable items used to perform an action.
 */
var Button =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Button, _Component);

  function Button(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Button);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Button).call(this, props));
    _this.buttonRef = _react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(Button, [{
    key: "getVariantClassNames",
    value: function getVariantClassNames() {
      var variant = this.props.variant;

      if (variant === 'base') {
        return null;
      }

      return "rainbow-button--".concat(variant);
    }
  }, {
    key: "getClassNames",
    value: function getClassNames() {
      var _this$props = this.props,
          className = _this$props.className,
          shaded = _this$props.shaded,
          variant = _this$props.variant,
          isLoading = _this$props.isLoading;
      var isShaded = shaded && (variant === 'neutral' || variant === 'brand' || variant === 'destructive' || variant === 'success');
      return (0, _classnames["default"])('rainbow-button', this.getVariantClassNames(), {
        'rainbow-button--shaded': isShaded,
        'rainbow-button--loading': isLoading && variant !== 'base'
      }, className);
    }
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      var _this$props2 = this.props,
          disabled = _this$props2.disabled,
          isLoading = _this$props2.isLoading;
      return disabled || isLoading;
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.buttonRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.buttonRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.buttonRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          style = _this$props3.style,
          label = _this$props3.label,
          children = _this$props3.children,
          tabIndex = _this$props3.tabIndex,
          onFocus = _this$props3.onFocus,
          onBlur = _this$props3.onBlur,
          onClick = _this$props3.onClick,
          title = _this$props3.title,
          type = _this$props3.type,
          ariaHaspopup = _this$props3.ariaHaspopup,
          id = _this$props3.id,
          isLoading = _this$props3.isLoading,
          variant = _this$props3.variant,
          ariaPressed = _this$props3.ariaPressed,
          ariaControls = _this$props3.ariaControls,
          ariaExpanded = _this$props3.ariaExpanded,
          onKeyDown = _this$props3.onKeyDown,
          form = _this$props3.form;
      return _react["default"].createElement("button", {
        "data-id": "button-element",
        id: id,
        className: this.getClassNames(),
        style: style,
        disabled: this.isDisabled(),
        tabIndex: tabIndex,
        onFocus: onFocus,
        onBlur: onBlur,
        onClick: onClick,
        title: title,
        type: type,
        "aria-haspopup": ariaHaspopup,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-pressed": ariaPressed,
        onKeyDown: onKeyDown,
        form: form,
        ref: this.buttonRef
      }, _react["default"].createElement(_content["default"], {
        variant: variant,
        label: label,
        isLoading: isLoading
      }, children));
    }
  }]);
  return Button;
}(_react.Component);

exports["default"] = Button;
Button.propTypes = {
  /** The text to be displayed inside the button. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The content of the button, used to render icon or text elements inside the button.
   * Children take precedence over label. */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].object]),

  /** The variant changes the appearance of the button.
   * Accepted variants include base, neutral, brand, outline-brand, destructive,
   * success, inverse and border-inverse. */
  variant: _propTypes["default"].oneOf(['base', 'neutral', 'brand', 'outline-brand', 'destructive', 'success', 'inverse', 'border-inverse']),

  /** Specifies true when the button has a shadow around it.
   * Only neutral, brand, destructive and success variant can be shaded. */
  shaded: _propTypes["default"].bool,

  /** Displays tooltip text when the mouse moves over the element. */
  title: _propTypes["default"].string,

  /** Specifies the type of button. Valid values are button, reset, and submit. */
  type: _propTypes["default"].oneOf(['button', 'submit', 'reset']),

  /** Specifies whether this button should be displayed in a disabled state.
   * Disabled buttons can't be clicked. */
  disabled: _propTypes["default"].bool,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when a keyboard key is pressed. */
  onKeyDown: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** Indicates that the element has a popup context menu or sub-level menu. */
  ariaHaspopup: _propTypes["default"].bool,

  /** A space-separated list of element IDs that
   * this button controls the contents or presence of. */
  ariaControls: _propTypes["default"].string,

  /** Indicates whether an element the button controls is expanded or collapsed.
   * Valid values are 'true' or 'false'. */
  ariaExpanded: _propTypes["default"].bool,

  /** Indicates that the element has been pressed. */
  ariaPressed: _propTypes["default"].bool,

  /** It must be the id attribute of a form element that the button is associated with. */
  form: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** If it is set to true, then a loading symbol is displayed. */
  isLoading: _propTypes["default"].bool
};
Button.defaultProps = {
  label: undefined,
  children: null,
  variant: 'neutral',
  shaded: false,
  title: undefined,
  type: 'button',
  disabled: false,
  tabIndex: undefined,
  onClick: function onClick() {},
  onKeyDown: function onKeyDown() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  ariaHaspopup: undefined,
  className: undefined,
  style: undefined,
  id: undefined,
  isLoading: false,
  ariaPressed: undefined,
  ariaControls: undefined,
  ariaExpanded: undefined,
  form: undefined
};