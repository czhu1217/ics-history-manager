"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("./../index"));

var _Spinner = _interopRequireDefault(require("../../Spinner"));

describe('<Button/>', function () {
  it('should focus the button when the focus method is called', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "OK"
    }));
    component.instance().focus();
    var focusedElementDataId = document.activeElement.getAttribute('data-id');
    var buttonDataId = component.find('button').prop('data-id');
    expect(focusedElementDataId).toBe(buttonDataId);
  });
  it('should blur the button when the blur method is called', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "OK"
    }));
    var instance = component.instance();
    var buttonDataId = component.find('button').prop('data-id');
    instance.focus();
    expect(document.activeElement.getAttribute('data-id')).toBe(buttonDataId);
    instance.blur();
    expect(document.activeElement.getAttribute('data-id')).toBeNull();
  });
  it('should set disable to true when it is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "my label",
      disabled: true
    }));
    expect(component.find('button').prop('disabled')).toBe(true);
  });
  it('should set the tabIndex passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "my label",
      tabIndex: 0
    }));
    expect(component.find('button').prop('tabIndex')).toBe(0);
  });
  it('should set the title passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "my label",
      title: "my title"
    }));
    expect(component.find('button').prop('title')).toBe('my title');
  });
  it('should set the type passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "my label",
      type: "reset"
    }));
    expect(component.find('button').prop('type')).toBe('reset');
  });
  it('should set aria-haspopup to true when it is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "my label",
      ariaHaspopup: true
    }));
    expect(component.find('button').prop('aria-haspopup')).toBe(true);
  });
  it('should set the label passed as children', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Click me"
    }));
    expect(component.find('button').text()).toBe('Click me');
  });
  it('should have the right class names', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button rainbow-button--neutral');
  });
  it('should have the right class names when variant base and have a custom class', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      variant: "base",
      className: "my-custom-class-name"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button my-custom-class-name');
  });
  it('should have the right class names when variant brand', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      variant: "brand"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button rainbow-button--brand');
  });
  it('should have the right class names when variant outline-brand', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      variant: "outline-brand"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button rainbow-button--outline-brand');
  });
  it('should have the right class names when variant destructive', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      variant: "destructive"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button rainbow-button--destructive');
  });
  it('should have the right class names when variant success', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      variant: "success"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button rainbow-button--success');
  });
  it('should have the right class names when variant inverse', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      variant: "inverse"
    }));
    expect(component.find('button').prop('className')).toBe('rainbow-button rainbow-button--inverse');
  });
  it('should have the right class names when shaded is true and the valid shaded variants are passed', function () {
    var variants = ['neutral', 'brand', 'destructive', 'success'];
    variants.forEach(function (variant) {
      var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
        label: "Button Label",
        variant: variant,
        shaded: true
      }));
      var buttonClassNameProp = component.find('button').prop('className');
      expect(buttonClassNameProp).toBe("rainbow-button rainbow-button--".concat(variant, " rainbow-button--shaded"));
    });
  });
  it('should have the right class names when shaded is true and the invalid shaded variants are passed', function () {
    var variants = ['outline-brand', 'inverse'];
    variants.forEach(function (variant) {
      var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
        label: "Button Label",
        variant: variant,
        shaded: true
      }));
      var buttonClassNameProp = component.find('button').prop('className');
      expect(buttonClassNameProp).toBe("rainbow-button rainbow-button--".concat(variant));
    });
  });
  it('should have the right class names when shaded is true and variant is base', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      variant: "base",
      shaded: true
    }));
    var buttonClassNameProp = component.find('button').prop('className');
    expect(buttonClassNameProp).toBe('rainbow-button');
  });
  it('should render the Spinner when isLoading is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      isLoading: true
    }));
    expect(component.find(_Spinner["default"]).exists()).toBe(true);
  });
  it('should set disable to true when isLoading is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "my label",
      isLoading: true
    }));
    expect(component.find('button').prop('disabled')).toBe(true);
  });
  it('should have the right class names when isLoading is true', function () {
    var variants = ['neutral', 'brand', 'destructive', 'success', 'inverse', 'outline-brand', 'border-inverse'];
    variants.forEach(function (variant) {
      var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
        label: "Button Label",
        variant: variant,
        isLoading: true
      }));
      var buttonClassNameProp = component.find('button').prop('className');
      expect(buttonClassNameProp).toBe("rainbow-button rainbow-button--".concat(variant, " rainbow-button--loading"));
    });
  });
  it('should have the right class names when isLoading is true and variant is base', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "Button Label",
      variant: "base",
      isLoading: true
    }));
    var buttonClassNameProp = component.find('button').prop('className');
    expect(buttonClassNameProp).toBe('rainbow-button');
  });
  it('should render the Spinner and label when isLoading and label are passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "OK",
      isLoading: true
    }));
    expect(component.text()).toBe('OK');
    expect(component.find(_Spinner["default"]).exists()).toBe(true);
  });
  it('should render the Spinner and children when isLoading, children and label are passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "OK",
      isLoading: true
    }, "Test"));
    expect(component.text()).toBe('Test');
    expect(component.find(_Spinner["default"]).exists()).toBe(true);
  });
  it('should render the children when label and children are passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      label: "OK"
    }, "Test"));
    expect(component.text()).toBe('Test');
  });
});